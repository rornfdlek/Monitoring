"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/*
Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
SPDX-License-Identifier: Apache-2.0
*/
const path_1 = require("path");
const aws_cdk_lib_1 = require("aws-cdk-lib");
const aws_apigateway_1 = require("aws-cdk-lib/aws-apigateway");
const aws_apigatewayv2_1 = require("aws-cdk-lib/aws-apigatewayv2");
const nag_rules_1 = require("../../nag-rules");
function checkCORSMethodResponses(node) {
    const methodResponses = aws_cdk_lib_1.Stack.of(node).resolve(node.methodResponses);
    return methodResponses?.every((response) => {
        const hasCORSResponseParameter = Object.entries(response.responseParameters || {}).some(([key, value]) => key.startsWith('method.response.header.Access-Control-Allow-') &&
            value === true);
        return response.statusCode === '204' && hasCORSResponseParameter;
    });
}
/**
 * APIs implement authorization
 * @param node the CfnResource to check
 */
exports.default = Object.defineProperty((node) => {
    if (node instanceof aws_apigateway_1.CfnMethod || node instanceof aws_apigatewayv2_1.CfnRoute) {
        if (node instanceof aws_apigateway_1.CfnMethod) {
            const httpMethod = nag_rules_1.NagRules.resolveIfPrimitive(node, node.httpMethod);
            if (httpMethod === 'OPTIONS' && checkCORSMethodResponses(node)) {
                return nag_rules_1.NagRuleCompliance.NOT_APPLICABLE;
            }
        }
        const authorizationType = nag_rules_1.NagRules.resolveIfPrimitive(node, node.authorizationType);
        if (authorizationType == undefined ||
            authorizationType == aws_apigateway_1.AuthorizationType.NONE) {
            return nag_rules_1.NagRuleCompliance.NON_COMPLIANT;
        }
        return nag_rules_1.NagRuleCompliance.COMPLIANT;
    }
    else {
        return nag_rules_1.NagRuleCompliance.NOT_APPLICABLE;
    }
}, 'name', { value: path_1.parse(__filename).name });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQVBJR1dBdXRob3JpemF0aW9uLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3J1bGVzL2FwaWd3L0FQSUdXQXV0aG9yaXphdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBOzs7RUFHRTtBQUNGLCtCQUE2QjtBQUM3Qiw2Q0FBaUQ7QUFDakQsK0RBQTBFO0FBQzFFLG1FQUF3RDtBQUN4RCwrQ0FBOEQ7QUFFOUQsU0FBUyx3QkFBd0IsQ0FBQyxJQUFlO0lBQy9DLE1BQU0sZUFBZSxHQUF1QyxtQkFBSyxDQUFDLEVBQUUsQ0FDbEUsSUFBSSxDQUNMLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQztJQUNoQyxPQUFPLGVBQWUsRUFBRSxLQUFLLENBQUMsQ0FBQyxRQUFRLEVBQUUsRUFBRTtRQUN6QyxNQUFNLHdCQUF3QixHQUFHLE1BQU0sQ0FBQyxPQUFPLENBQzdDLFFBQVEsQ0FBQyxrQkFBa0IsSUFBSSxFQUFFLENBQ2xDLENBQUMsSUFBSSxDQUNKLENBQUMsQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLEVBQUUsRUFBRSxDQUNmLEdBQUcsQ0FBQyxVQUFVLENBQUMsOENBQThDLENBQUM7WUFDOUQsS0FBSyxLQUFLLElBQUksQ0FDakIsQ0FBQztRQUVGLE9BQU8sUUFBUSxDQUFDLFVBQVUsS0FBSyxLQUFLLElBQUksd0JBQXdCLENBQUM7SUFDbkUsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDO0FBRUQ7OztHQUdHO0FBQ0gsa0JBQWUsTUFBTSxDQUFDLGNBQWMsQ0FDbEMsQ0FBQyxJQUFpQixFQUFxQixFQUFFO0lBQ3ZDLElBQUksSUFBSSxZQUFZLDBCQUFTLElBQUksSUFBSSxZQUFZLDJCQUFRLEVBQUU7UUFDekQsSUFBSSxJQUFJLFlBQVksMEJBQVMsRUFBRTtZQUM3QixNQUFNLFVBQVUsR0FBRyxvQkFBUSxDQUFDLGtCQUFrQixDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7WUFDdEUsSUFBSSxVQUFVLEtBQUssU0FBUyxJQUFJLHdCQUF3QixDQUFDLElBQUksQ0FBQyxFQUFFO2dCQUM5RCxPQUFPLDZCQUFpQixDQUFDLGNBQWMsQ0FBQzthQUN6QztTQUNGO1FBQ0QsTUFBTSxpQkFBaUIsR0FBRyxvQkFBUSxDQUFDLGtCQUFrQixDQUNuRCxJQUFJLEVBQ0osSUFBSSxDQUFDLGlCQUFpQixDQUN2QixDQUFDO1FBQ0YsSUFDRSxpQkFBaUIsSUFBSSxTQUFTO1lBQzlCLGlCQUFpQixJQUFJLGtDQUFpQixDQUFDLElBQUksRUFDM0M7WUFDQSxPQUFPLDZCQUFpQixDQUFDLGFBQWEsQ0FBQztTQUN4QztRQUNELE9BQU8sNkJBQWlCLENBQUMsU0FBUyxDQUFDO0tBQ3BDO1NBQU07UUFDTCxPQUFPLDZCQUFpQixDQUFDLGNBQWMsQ0FBQztLQUN6QztBQUNILENBQUMsRUFDRCxNQUFNLEVBQ04sRUFBRSxLQUFLLEVBQUUsWUFBSyxDQUFDLFVBQVUsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUNsQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLypcbkNvcHlyaWdodCBBbWF6b24uY29tLCBJbmMuIG9yIGl0cyBhZmZpbGlhdGVzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEFwYWNoZS0yLjBcbiovXG5pbXBvcnQgeyBwYXJzZSB9IGZyb20gJ3BhdGgnO1xuaW1wb3J0IHsgQ2ZuUmVzb3VyY2UsIFN0YWNrIH0gZnJvbSAnYXdzLWNkay1saWInO1xuaW1wb3J0IHsgQXV0aG9yaXphdGlvblR5cGUsIENmbk1ldGhvZCB9IGZyb20gJ2F3cy1jZGstbGliL2F3cy1hcGlnYXRld2F5JztcbmltcG9ydCB7IENmblJvdXRlIH0gZnJvbSAnYXdzLWNkay1saWIvYXdzLWFwaWdhdGV3YXl2Mic7XG5pbXBvcnQgeyBOYWdSdWxlQ29tcGxpYW5jZSwgTmFnUnVsZXMgfSBmcm9tICcuLi8uLi9uYWctcnVsZXMnO1xuXG5mdW5jdGlvbiBjaGVja0NPUlNNZXRob2RSZXNwb25zZXMobm9kZTogQ2ZuTWV0aG9kKTogYm9vbGVhbiB7XG4gIGNvbnN0IG1ldGhvZFJlc3BvbnNlczogQ2ZuTWV0aG9kLk1ldGhvZFJlc3BvbnNlUHJvcGVydHlbXSA9IFN0YWNrLm9mKFxuICAgIG5vZGVcbiAgKS5yZXNvbHZlKG5vZGUubWV0aG9kUmVzcG9uc2VzKTtcbiAgcmV0dXJuIG1ldGhvZFJlc3BvbnNlcz8uZXZlcnkoKHJlc3BvbnNlKSA9PiB7XG4gICAgY29uc3QgaGFzQ09SU1Jlc3BvbnNlUGFyYW1ldGVyID0gT2JqZWN0LmVudHJpZXMoXG4gICAgICByZXNwb25zZS5yZXNwb25zZVBhcmFtZXRlcnMgfHwge31cbiAgICApLnNvbWUoXG4gICAgICAoW2tleSwgdmFsdWVdKSA9PlxuICAgICAgICBrZXkuc3RhcnRzV2l0aCgnbWV0aG9kLnJlc3BvbnNlLmhlYWRlci5BY2Nlc3MtQ29udHJvbC1BbGxvdy0nKSAmJlxuICAgICAgICB2YWx1ZSA9PT0gdHJ1ZVxuICAgICk7XG5cbiAgICByZXR1cm4gcmVzcG9uc2Uuc3RhdHVzQ29kZSA9PT0gJzIwNCcgJiYgaGFzQ09SU1Jlc3BvbnNlUGFyYW1ldGVyO1xuICB9KTtcbn1cblxuLyoqXG4gKiBBUElzIGltcGxlbWVudCBhdXRob3JpemF0aW9uXG4gKiBAcGFyYW0gbm9kZSB0aGUgQ2ZuUmVzb3VyY2UgdG8gY2hlY2tcbiAqL1xuZXhwb3J0IGRlZmF1bHQgT2JqZWN0LmRlZmluZVByb3BlcnR5KFxuICAobm9kZTogQ2ZuUmVzb3VyY2UpOiBOYWdSdWxlQ29tcGxpYW5jZSA9PiB7XG4gICAgaWYgKG5vZGUgaW5zdGFuY2VvZiBDZm5NZXRob2QgfHwgbm9kZSBpbnN0YW5jZW9mIENmblJvdXRlKSB7XG4gICAgICBpZiAobm9kZSBpbnN0YW5jZW9mIENmbk1ldGhvZCkge1xuICAgICAgICBjb25zdCBodHRwTWV0aG9kID0gTmFnUnVsZXMucmVzb2x2ZUlmUHJpbWl0aXZlKG5vZGUsIG5vZGUuaHR0cE1ldGhvZCk7XG4gICAgICAgIGlmIChodHRwTWV0aG9kID09PSAnT1BUSU9OUycgJiYgY2hlY2tDT1JTTWV0aG9kUmVzcG9uc2VzKG5vZGUpKSB7XG4gICAgICAgICAgcmV0dXJuIE5hZ1J1bGVDb21wbGlhbmNlLk5PVF9BUFBMSUNBQkxFO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBjb25zdCBhdXRob3JpemF0aW9uVHlwZSA9IE5hZ1J1bGVzLnJlc29sdmVJZlByaW1pdGl2ZShcbiAgICAgICAgbm9kZSxcbiAgICAgICAgbm9kZS5hdXRob3JpemF0aW9uVHlwZVxuICAgICAgKTtcbiAgICAgIGlmIChcbiAgICAgICAgYXV0aG9yaXphdGlvblR5cGUgPT0gdW5kZWZpbmVkIHx8XG4gICAgICAgIGF1dGhvcml6YXRpb25UeXBlID09IEF1dGhvcml6YXRpb25UeXBlLk5PTkVcbiAgICAgICkge1xuICAgICAgICByZXR1cm4gTmFnUnVsZUNvbXBsaWFuY2UuTk9OX0NPTVBMSUFOVDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBOYWdSdWxlQ29tcGxpYW5jZS5DT01QTElBTlQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBOYWdSdWxlQ29tcGxpYW5jZS5OT1RfQVBQTElDQUJMRTtcbiAgICB9XG4gIH0sXG4gICduYW1lJyxcbiAgeyB2YWx1ZTogcGFyc2UoX19maWxlbmFtZSkubmFtZSB9XG4pO1xuIl19