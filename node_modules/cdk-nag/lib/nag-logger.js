"use strict";
var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.NagReportLogger = exports.NagReportFormat = exports.AnnotationLogger = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
/*
Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
SPDX-License-Identifier: Apache-2.0
*/
const fs_1 = require("fs");
const path_1 = require("path");
const aws_cdk_lib_1 = require("aws-cdk-lib");
const nag_rules_1 = require("./nag-rules");
/**
 * A NagLogger that outputs to the CDK Annotations system.
 */
class AnnotationLogger {
    constructor(props) {
        this.suppressionId = 'CdkNagSuppression';
        this.verbose = props?.verbose ?? false;
        this.logIgnores = props?.logIgnores ?? false;
    }
    onCompliance(_data) {
        return;
    }
    onNonCompliance(data) {
        const message = this.createMessage(data.ruleId, data.findingId, data.ruleInfo, data.ruleExplanation, this.verbose);
        if (data.ruleLevel == nag_rules_1.NagMessageLevel.ERROR) {
            aws_cdk_lib_1.Annotations.of(data.resource).addError(message);
        }
        else if (data.ruleLevel == nag_rules_1.NagMessageLevel.WARN) {
            aws_cdk_lib_1.Annotations.of(data.resource).addWarning(message);
        }
    }
    onSuppressed(data) {
        if (this.logIgnores) {
            const message = this.createMessage(this.suppressionId, data.findingId, `${data.ruleId} was triggered but suppressed.`, `Provided reason: "${data.suppressionReason}"`, this.verbose);
            aws_cdk_lib_1.Annotations.of(data.resource).addInfo(message);
        }
    }
    onError(data) {
        const information = `'${data.ruleId}' threw an error during validation. This is generally caused by a parameter referencing an intrinsic function. You can suppress the "${nag_rules_1.VALIDATION_FAILURE_ID}" to get rid of this error. For more details enable verbose logging.'`;
        const message = this.createMessage(nag_rules_1.VALIDATION_FAILURE_ID, data.ruleId, information, data.errorMessage, this.verbose);
        aws_cdk_lib_1.Annotations.of(data.resource).addWarning(message);
    }
    onSuppressedError(data) {
        if (this.logIgnores === true) {
            const message = this.createMessage(this.suppressionId, data.ruleId, `${nag_rules_1.VALIDATION_FAILURE_ID} was triggered but suppressed.`, data.errorSuppressionReason, this.verbose);
            aws_cdk_lib_1.Annotations.of(data.resource).addInfo(message);
        }
    }
    onNotApplicable(_data) {
        return;
    }
    createMessage(ruleId, findingId, ruleInfo, ruleExplanation, verbose) {
        let message = findingId
            ? `${ruleId}[${findingId}]: ${ruleInfo}`
            : `${ruleId}: ${ruleInfo}`;
        return verbose ? `${message} ${ruleExplanation}\n` : `${message}\n`;
    }
}
exports.AnnotationLogger = AnnotationLogger;
_a = JSII_RTTI_SYMBOL_1;
AnnotationLogger[_a] = { fqn: "cdk-nag.AnnotationLogger", version: "2.34.8" };
/**
 * Possible output formats of the NagReport
 */
var NagReportFormat;
(function (NagReportFormat) {
    NagReportFormat["CSV"] = "csv";
    NagReportFormat["JSON"] = "json";
})(NagReportFormat = exports.NagReportFormat || (exports.NagReportFormat = {}));
/**
 * A NagLogger that creates compliance reports
 */
class NagReportLogger {
    constructor(props) {
        this.reportStacks = new Map();
        if (props.formats.length === 0) {
            throw new Error('Must provide at least 1 NagReportFormat.');
        }
        this.formats = props.formats;
    }
    onCompliance(data) {
        this.initializeStackReport(data);
        this.writeToStackComplianceReport(data, nag_rules_1.NagRuleCompliance.COMPLIANT);
    }
    onNonCompliance(data) {
        this.initializeStackReport(data);
        this.writeToStackComplianceReport(data, nag_rules_1.NagRuleCompliance.NON_COMPLIANT);
    }
    onSuppressed(data) {
        this.initializeStackReport(data);
        this.writeToStackComplianceReport(data, nag_rules_1.NagRulePostValidationStates.SUPPRESSED);
    }
    onError(data) {
        this.initializeStackReport(data);
        this.writeToStackComplianceReport(data, nag_rules_1.NagRulePostValidationStates.UNKNOWN);
    }
    onSuppressedError(data) {
        this.initializeStackReport(data);
        this.writeToStackComplianceReport(data, nag_rules_1.NagRulePostValidationStates.SUPPRESSED);
    }
    onNotApplicable(data) {
        this.initializeStackReport(data);
    }
    getFormatStacks(format) {
        return this.reportStacks.get(format) ?? [];
    }
    /**
     * Initialize the report for the rule pack's compliance report for the resource's Stack if it doesn't exist
     * @param data
     */
    initializeStackReport(data) {
        for (const format of this.formats) {
            const stackName = data.resource.stack.nested
                ? aws_cdk_lib_1.Names.uniqueId(data.resource.stack)
                : data.resource.stack.stackName;
            const fileName = `${data.nagPackName}-${stackName}-NagReport.${format}`;
            const stacks = this.getFormatStacks(format);
            if (!stacks.includes(fileName)) {
                const filePath = path_1.join(aws_cdk_lib_1.App.of(data.resource)?.outdir ?? '', fileName);
                this.reportStacks.set(format, [...stacks, fileName]);
                let body = '';
                if (format === NagReportFormat.CSV) {
                    body =
                        'Rule ID,Resource ID,Compliance,Exception Reason,Rule Level,Rule Info\n';
                }
                else if (format === NagReportFormat.JSON) {
                    body = JSON.stringify({ lines: [] });
                }
                else {
                    throw new Error(`Unrecognized output format ${format} for the NagReportLogger`);
                }
                fs_1.writeFileSync(filePath, body);
            }
        }
    }
    writeToStackComplianceReport(data, compliance) {
        for (const format of this.formats) {
            const stackName = data.resource.stack.nested
                ? aws_cdk_lib_1.Names.uniqueId(data.resource.stack)
                : data.resource.stack.stackName;
            const fileName = `${data.nagPackName}-${stackName}-NagReport.${format}`;
            const filePath = path_1.join(aws_cdk_lib_1.App.of(data.resource)?.outdir ?? '', fileName);
            if (format === NagReportFormat.CSV) {
                //| Rule ID | Resource ID | Compliance | Exception Reason | Rule Level | Rule Info
                const line = Array();
                line.push(data.ruleId);
                line.push(data.resource.node.path);
                if (compliance === nag_rules_1.NagRulePostValidationStates.SUPPRESSED) {
                    line.push(nag_rules_1.NagRulePostValidationStates.SUPPRESSED);
                    if (data.suppressionReason !== undefined) {
                        line.push(data.suppressionReason);
                    }
                    else {
                        line.push(data.errorSuppressionReason);
                    }
                }
                else {
                    line.push(compliance);
                    line.push('N/A');
                }
                line.push(data.ruleLevel);
                line.push(data.ruleInfo);
                fs_1.appendFileSync(filePath, line.map((i) => '"' + i.replace(/"/g, '""') + '"').join(',') + '\n');
            }
            else if (format === NagReportFormat.JSON) {
                const report = JSON.parse(fs_1.readFileSync(filePath, 'utf8'));
                let exceptionReason = 'N/A';
                if (compliance === nag_rules_1.NagRulePostValidationStates.SUPPRESSED) {
                    if (data.suppressionReason !== undefined) {
                        exceptionReason = data
                            .suppressionReason;
                    }
                    else {
                        exceptionReason = data
                            .errorSuppressionReason;
                    }
                }
                report.lines.push({
                    ruleId: data.ruleId,
                    resourceId: data.resource.node.path,
                    compliance,
                    exceptionReason,
                    ruleLevel: data.ruleLevel,
                    ruleInfo: data.ruleInfo,
                });
                fs_1.writeFileSync(filePath, JSON.stringify(report));
            }
            else {
                throw new Error(`Unrecognized output format ${format} for the NagReportLogger`);
            }
        }
    }
}
exports.NagReportLogger = NagReportLogger;
_b = JSII_RTTI_SYMBOL_1;
NagReportLogger[_b] = { fqn: "cdk-nag.NagReportLogger", version: "2.34.8" };
//# sourceMappingURL=data:application/json;base64,