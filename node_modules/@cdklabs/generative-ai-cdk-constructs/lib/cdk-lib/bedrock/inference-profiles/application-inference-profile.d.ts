/**
 *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance
 *  with the License. A copy of the License is located at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  or in the 'license' file accompanying this file. This file is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES
 *  OR CONDITIONS OF ANY KIND, express or implied. See the License for the specific language governing permissions
 *  and limitations under the License.
 */
import { CfnTag } from 'aws-cdk-lib';
import * as bedrock from 'aws-cdk-lib/aws-bedrock';
import { Grant, IGrantable } from 'aws-cdk-lib/aws-iam';
import { Construct } from 'constructs';
import { IInferenceProfile, InferenceProfileBase, InferenceProfileType } from './common';
import { IInvokable } from '../models';
/******************************************************************************
 *                        PROPS FOR NEW CONSTRUCT
 *****************************************************************************/
/**
 * Properties for creating a ApplicationInferenceProfile.
 */
export interface ApplicationInferenceProfileProps {
    /**
     * Description of the inference profile.
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-bedrock-applicationinferenceprofile.html#cfn-bedrock-applicationinferenceprofile-description
     */
    readonly description?: string;
    /**
     * The name of the inference profile.
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-bedrock-applicationinferenceprofile.html#cfn-bedrock-applicationinferenceprofile-inferenceprofilename
     */
    readonly inferenceProfileName: string;
    /**
     * To create an application inference profile for one Region, specify a foundation model.
     * Usage and costs for requests made to that Region with that model will be tracked.
     *
     * To create an application inference profile for multiple Regions,
     * specify a cross region (system-defined) inference profile.
     * The inference profile will route requests to the Regions defined in
     * the cross region (system-defined) inference profile that you choose.
     * Usage and costs for requests made to the Regions in the inference profile will be tracked.
     */
    readonly modelSource: IInvokable;
    /**
     * A list of tags associated with the inference profile.
     * */
    readonly tags?: Array<CfnTag>;
}
/******************************************************************************
 *                      ATTRS FOR IMPORTED CONSTRUCT
 *****************************************************************************/
export interface ApplicationInferenceProfileAttributes {
    /**
     * The ARN of the application inference profile.
     */
    readonly inferenceProfileArn: string;
    /**
     * The ID or Amazon Resource Name (ARN) of the inference profile.
     */
    readonly inferenceProfileIdentifier: string;
}
/******************************************************************************
 *                        NEW CONSTRUCT DEFINITION
 *****************************************************************************/
/**
 * Class to create a ApplicationInferenceProfile with CDK.
 * These are inference profiles created by users (user defined).
 * This helps to track costs and model usage.
 * @resource AWS::Bedrock::ApplicationInferenceProfile
 * @see https://docs.aws.amazon.com/bedrock/latest/userguide/inference-profiles-create.html
 */
export declare class ApplicationInferenceProfile extends InferenceProfileBase implements IInvokable {
    /**
     * Import a ApplicationInferenceProfile given its attributes
     */
    static fromApplicationInferenceProfileAttributes(scope: Construct, id: string, attrs: ApplicationInferenceProfileAttributes): IInferenceProfile;
    /**
     * Import a low-level L1 Cfn ApplicationInferenceProfile
     */
    static fromCfnApplicationInferenceProfile(CfnApplicationInferenceProfile: bedrock.CfnApplicationInferenceProfile): IInferenceProfile;
    /**
     * The name of the application inference profile.
     */
    readonly inferenceProfileName: string;
    /**
     * The ARN of the application application inference profile.
     */
    readonly inferenceProfileArn: string;
    /**
     * The unique identifier of the application inference profile.
     */
    readonly inferenceProfileId: string;
    /**
     * The underlying model/cross-region model used by the application inference profile.
     */
    readonly inferenceProfileModel: IInvokable;
    /**
     * The status of the application inference profile. ACTIVE means that the inference profile is ready to be used.
     */
    readonly status: string;
    /**
     * The type of the inference profile. The following types are possible:
     * SYSTEM_DEFINED – The inference profile is defined by Amazon Bedrock.
     * You can route inference requests across regions with these inference profiles.
     * APPLICATION – The inference profile was created by a user.
     * This type of inference profile can track metrics and costs when invoking the model in it.
     * The inference profile may route requests to one or multiple regions.
     */
    readonly type: InferenceProfileType;
    /**
     * Time Stamp for ApplicationInferenceProfile creation.
     */
    readonly createdAt: string;
    /**
     * Time Stamp for ApplicationInferenceProfile update.
     */
    readonly updatedAt: string;
    /**
     * This equals to the inferenceProfileArn property, useful just to implement IInvokable interface.
     */
    readonly invokableArn: string;
    /**
     * Instance of CfnApplicationInferenceProfile.
     */
    private readonly _resource;
    constructor(scope: Construct, id: string, props: ApplicationInferenceProfileProps);
    /**
     * Gives the appropriate policies to invoke and use the application inference profile.
     */
    grantInvoke(grantee: IGrantable): Grant;
    /**
     * Grants appropriate permissions to use the application inference profile (AIP).
     * Does not grant permissions to use the model/cross-region profile in the AIP.
     */
    grantProfileUsage(grantee: IGrantable): Grant;
}
