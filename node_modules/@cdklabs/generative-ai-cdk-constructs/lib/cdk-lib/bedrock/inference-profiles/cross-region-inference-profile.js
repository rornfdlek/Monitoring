"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.CrossRegionInferenceProfile = exports.CrossRegionInferenceProfileRegion = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
/**
 *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance
 *  with the License. A copy of the License is located at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  or in the 'license' file accompanying this file. This file is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES
 *  OR CONDITIONS OF ANY KIND, express or implied. See the License for the specific language governing permissions
 *  and limitations under the License.
 */
const aws_cdk_lib_1 = require("aws-cdk-lib");
const aws_iam_1 = require("aws-cdk-lib/aws-iam");
const common_1 = require("./common");
var CrossRegionInferenceProfileRegion;
(function (CrossRegionInferenceProfileRegion) {
    /**
     * Cross-region Inference Identifier for the European area.
     * According to the model chosen, this might include:
     * - Frankfurt (`eu-central-1`)
     * - Ireland (`eu-west-1`)
     * - Paris (`eu-west-3`)
     */
    CrossRegionInferenceProfileRegion["EU"] = "eu";
    /**
     * Cross-region Inference Identifier for the United States area.
     * According to the model chosen, this might include:
     * - N. Virginia (`us-east-1`)
     * - Oregon (`us-west-2`)
     * - Ohio (`us-east-2`)
     */
    CrossRegionInferenceProfileRegion["US"] = "us";
    /**
     * Cross-region Inference Identifier for the Asia-Pacific area.
     * According to the model chosen, this might include:
     * - Tokyo (`ap-northeast-1`)
     * - Seoul (`ap-northeast-2`)
     * - Mumbai (`ap-south-1`)
     * - Singapore (`ap-southeast-1`)
     * - Sydney (`ap-southeast-2`)
     */
    CrossRegionInferenceProfileRegion["APAC"] = "apac";
})(CrossRegionInferenceProfileRegion || (exports.CrossRegionInferenceProfileRegion = CrossRegionInferenceProfileRegion = {}));
/******************************************************************************
 *                        NEW CONSTRUCT DEFINITION
 *****************************************************************************/
/**
 * Cross-region inference enables you to seamlessly manage unplanned traffic
 * bursts by utilizing compute across different AWS Regions. With cross-region
 * inference, you can distribute traffic across multiple AWS Regions, enabling
 * higher throughput and enhanced resilience during periods of peak demands.
 * @see https://docs.aws.amazon.com/bedrock/latest/userguide/cross-region-inference.html
 */
class CrossRegionInferenceProfile {
    static fromConfig(config) {
        return new CrossRegionInferenceProfile(config);
    }
    constructor(props) {
        if (!props.model.supportsCrossRegion) {
            throw new Error(`Model ${props.model.modelId} does not support cross-region inference`);
        }
        this.type = common_1.InferenceProfileType.SYSTEM_DEFINED;
        this.inferenceProfileModel = props.model;
        this.inferenceProfileId = `${props.geoRegion}.${props.model.modelId}`;
        this.inferenceProfileArn = aws_cdk_lib_1.Arn.format({
            partition: aws_cdk_lib_1.Aws.PARTITION,
            service: 'bedrock',
            account: aws_cdk_lib_1.Aws.ACCOUNT_ID,
            region: aws_cdk_lib_1.Aws.REGION,
            resource: 'inference-profile',
            resourceName: this.inferenceProfileId,
            arnFormat: aws_cdk_lib_1.ArnFormat.SLASH_RESOURCE_NAME,
        });
        // Needed to Implement IInvokable
        this.invokableArn = this.inferenceProfileArn;
    }
    /**
     * Gives the appropriate policies to invoke and use the Foundation Model.
     */
    grantInvoke(grantee) {
        // for CRIS, we need to provide permissions to invoke the model in all regions
        // where the inference profile can route requests
        this.inferenceProfileModel.grantInvokeAllRegions(grantee);
        // and we need to provide permissions to invoke the inference profile itself
        return this.grantProfileUsage(grantee);
    }
    /**
     * Grants appropriate permissions to use the cross-region inference profile.
     * Does not grant permissions to use the model in the profile.
     */
    grantProfileUsage(grantee) {
        const grant = aws_iam_1.Grant.addToPrincipal({
            grantee: grantee,
            actions: ['bedrock:GetInferenceProfile', 'bedrock:InvokeModel'],
            resourceArns: [this.inferenceProfileArn],
        });
        return grant;
    }
}
exports.CrossRegionInferenceProfile = CrossRegionInferenceProfile;
_a = JSII_RTTI_SYMBOL_1;
CrossRegionInferenceProfile[_a] = { fqn: "@cdklabs/generative-ai-cdk-constructs.bedrock.CrossRegionInferenceProfile", version: "0.1.285" };
//# sourceMappingURL=data:application/json;base64,