"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.InferenceProfileBase = exports.InferenceProfileType = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
/**
 *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance
 *  with the License. A copy of the License is located at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  or in the 'license' file accompanying this file. This file is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES
 *  OR CONDITIONS OF ANY KIND, express or implied. See the License for the specific language governing permissions
 *  and limitations under the License.
 */
const aws_cdk_lib_1 = require("aws-cdk-lib");
const aws_iam_1 = require("aws-cdk-lib/aws-iam");
/** These are the values used by the API when using aws bedrock get-inference-profile --inference-profile-identifier XXXXXXX */
var InferenceProfileType;
(function (InferenceProfileType) {
    /**
     * An inference profile that is created by AWS. These are profiles such as cross-region
     * which help you distributed traffic across a geographic region.
     */
    InferenceProfileType["SYSTEM_DEFINED"] = "SYSTEM_DEFINED";
    /**
     * An inference profile that is user-created. These are profiles that help
     * you track costs or metrics.
     */
    InferenceProfileType["APPLICATION"] = "APPLICATION";
})(InferenceProfileType || (exports.InferenceProfileType = InferenceProfileType = {}));
/**
 * Abstract base class for a ApplicationInferenceProfile.
 * Contains methods and attributes valid for ApplicationInferenceProfiles either created with CDK or imported.
 */
class InferenceProfileBase extends aws_cdk_lib_1.Resource {
    /**
     * Grants appropriate permissions to use the cross-region inference profile.
     * Does not grant permissions to use the model in the profile.
     */
    grantProfileUsage(grantee) {
        const grant = aws_iam_1.Grant.addToPrincipal({
            grantee: grantee,
            actions: ['bedrock:GetInferenceProfile', 'bedrock:ListInferenceProfiles'],
            resourceArns: [this.inferenceProfileArn],
            scope: this,
        });
        return grant;
    }
}
exports.InferenceProfileBase = InferenceProfileBase;
_a = JSII_RTTI_SYMBOL_1;
InferenceProfileBase[_a] = { fqn: "@cdklabs/generative-ai-cdk-constructs.bedrock.InferenceProfileBase", version: "0.1.285" };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tbW9uLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2Nkay1saWIvYmVkcm9jay9pbmZlcmVuY2UtcHJvZmlsZXMvY29tbW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7Ozs7Ozs7Ozs7O0dBV0c7QUFDSCw2Q0FBa0Q7QUFDbEQsaURBQXdEO0FBRXhELCtIQUErSDtBQUMvSCxJQUFZLG9CQVdYO0FBWEQsV0FBWSxvQkFBb0I7SUFDOUI7OztPQUdHO0lBQ0gseURBQWlDLENBQUE7SUFDakM7OztPQUdHO0lBQ0gsbURBQTJCLENBQUE7QUFDN0IsQ0FBQyxFQVhXLG9CQUFvQixvQ0FBcEIsb0JBQW9CLFFBVy9CO0FBNEJEOzs7R0FHRztBQUNILE1BQXNCLG9CQUFxQixTQUFRLHNCQUFRO0lBY3pEOzs7T0FHRztJQUNILGlCQUFpQixDQUFDLE9BQW1CO1FBQ25DLE1BQU0sS0FBSyxHQUFHLGVBQUssQ0FBQyxjQUFjLENBQUM7WUFDakMsT0FBTyxFQUFFLE9BQU87WUFDaEIsT0FBTyxFQUFFLENBQUMsNkJBQTZCLEVBQUUsK0JBQStCLENBQUM7WUFDekUsWUFBWSxFQUFFLENBQUMsSUFBSSxDQUFDLG1CQUFtQixDQUFDO1lBQ3hDLEtBQUssRUFBRSxJQUFJO1NBQ1osQ0FBQyxDQUFDO1FBQ0gsT0FBTyxLQUFLLENBQUM7SUFDZixDQUFDOztBQTFCSCxvREEyQkMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqICBDb3B5cmlnaHQgQW1hem9uLmNvbSwgSW5jLiBvciBpdHMgYWZmaWxpYXRlcy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiAgTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKS4gWW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZVxuICogIHdpdGggdGhlIExpY2Vuc2UuIEEgY29weSBvZiB0aGUgTGljZW5zZSBpcyBsb2NhdGVkIGF0XG4gKlxuICogICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiAgb3IgaW4gdGhlICdsaWNlbnNlJyBmaWxlIGFjY29tcGFueWluZyB0aGlzIGZpbGUuIFRoaXMgZmlsZSBpcyBkaXN0cmlidXRlZCBvbiBhbiAnQVMgSVMnIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVNcbiAqICBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBleHByZXNzIG9yIGltcGxpZWQuIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9uc1xuICogIGFuZCBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuaW1wb3J0IHsgSVJlc291cmNlLCBSZXNvdXJjZSB9IGZyb20gJ2F3cy1jZGstbGliJztcbmltcG9ydCB7IEdyYW50LCBJR3JhbnRhYmxlIH0gZnJvbSAnYXdzLWNkay1saWIvYXdzLWlhbSc7XG5cbi8qKiBUaGVzZSBhcmUgdGhlIHZhbHVlcyB1c2VkIGJ5IHRoZSBBUEkgd2hlbiB1c2luZyBhd3MgYmVkcm9jayBnZXQtaW5mZXJlbmNlLXByb2ZpbGUgLS1pbmZlcmVuY2UtcHJvZmlsZS1pZGVudGlmaWVyIFhYWFhYWFggKi9cbmV4cG9ydCBlbnVtIEluZmVyZW5jZVByb2ZpbGVUeXBlIHtcbiAgLyoqXG4gICAqIEFuIGluZmVyZW5jZSBwcm9maWxlIHRoYXQgaXMgY3JlYXRlZCBieSBBV1MuIFRoZXNlIGFyZSBwcm9maWxlcyBzdWNoIGFzIGNyb3NzLXJlZ2lvblxuICAgKiB3aGljaCBoZWxwIHlvdSBkaXN0cmlidXRlZCB0cmFmZmljIGFjcm9zcyBhIGdlb2dyYXBoaWMgcmVnaW9uLlxuICAgKi9cbiAgU1lTVEVNX0RFRklORUQgPSAnU1lTVEVNX0RFRklORUQnLFxuICAvKipcbiAgICogQW4gaW5mZXJlbmNlIHByb2ZpbGUgdGhhdCBpcyB1c2VyLWNyZWF0ZWQuIFRoZXNlIGFyZSBwcm9maWxlcyB0aGF0IGhlbHBcbiAgICogeW91IHRyYWNrIGNvc3RzIG9yIG1ldHJpY3MuXG4gICAqL1xuICBBUFBMSUNBVElPTiA9ICdBUFBMSUNBVElPTicsXG59XG5cbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQ09NTU9OXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKipcbiAqIFJlcHJlc2VudHMgYSBBcHBsaWNhdGlvbkluZmVyZW5jZVByb2ZpbGUsIGVpdGhlciBjcmVhdGVkIHdpdGggQ0RLIG9yIGltcG9ydGVkLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIElJbmZlcmVuY2VQcm9maWxlIHtcbiAgLyoqXG4gICAqIFRoZSBBUk4gb2YgdGhlIGFwcGxpY2F0aW9uIGluZmVyZW5jZSBwcm9maWxlLlxuICAgKi9cbiAgcmVhZG9ubHkgaW5mZXJlbmNlUHJvZmlsZUFybjogc3RyaW5nO1xuICAvKipcbiAgICogVGhlIHVuaXF1ZSBpZGVudGlmaWVyIG9mIHRoZSBpbmZlcmVuY2UgcHJvZmlsZS5cbiAgICovXG4gIHJlYWRvbmx5IGluZmVyZW5jZVByb2ZpbGVJZDogc3RyaW5nO1xuICAvKipcbiAgICogVGhlIHR5cGUgb2YgaW5mZXJlbmNlIHByb2ZpbGUuXG4gICAqL1xuICByZWFkb25seSB0eXBlOiBJbmZlcmVuY2VQcm9maWxlVHlwZTtcblxuICAvKipcbiAgICogR3JhbnRzIGFwcHJvcHJpYXRlIHBlcm1pc3Npb25zIHRvIHVzZSB0aGUgaW5mZXJlbmNlIHByb2ZpbGUuXG4gICAqL1xuICBncmFudFByb2ZpbGVVc2FnZShncmFudGVlOiBJR3JhbnRhYmxlKTogR3JhbnQ7XG59XG5cbi8qKlxuICogQWJzdHJhY3QgYmFzZSBjbGFzcyBmb3IgYSBBcHBsaWNhdGlvbkluZmVyZW5jZVByb2ZpbGUuXG4gKiBDb250YWlucyBtZXRob2RzIGFuZCBhdHRyaWJ1dGVzIHZhbGlkIGZvciBBcHBsaWNhdGlvbkluZmVyZW5jZVByb2ZpbGVzIGVpdGhlciBjcmVhdGVkIHdpdGggQ0RLIG9yIGltcG9ydGVkLlxuICovXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgSW5mZXJlbmNlUHJvZmlsZUJhc2UgZXh0ZW5kcyBSZXNvdXJjZSBpbXBsZW1lbnRzIElJbmZlcmVuY2VQcm9maWxlLCBJUmVzb3VyY2Uge1xuICAvKipcbiAgICogVGhlIEFSTiBvZiB0aGUgYXBwbGljYXRpb24gaW5mZXJlbmNlIHByb2ZpbGUuXG4gICAqL1xuICBwdWJsaWMgYWJzdHJhY3QgcmVhZG9ubHkgaW5mZXJlbmNlUHJvZmlsZUFybjogc3RyaW5nO1xuICAvKipcbiAgICogVGhlIHVuaXF1ZSBpZGVudGlmaWVyIG9mIHRoZSBpbmZlcmVuY2UgcHJvZmlsZS5cbiAgICovXG4gIHB1YmxpYyBhYnN0cmFjdCByZWFkb25seSBpbmZlcmVuY2VQcm9maWxlSWQ6IHN0cmluZztcbiAgLyoqXG4gICAqIFRoZSBJRCBvciBBbWF6b24gUmVzb3VyY2UgTmFtZSAoQVJOKSBvZiB0aGUgaW5mZXJlbmNlIHByb2ZpbGUuXG4gICAqL1xuICBwdWJsaWMgYWJzdHJhY3QgcmVhZG9ubHkgdHlwZTogSW5mZXJlbmNlUHJvZmlsZVR5cGU7XG5cbiAgLyoqXG4gICAqIEdyYW50cyBhcHByb3ByaWF0ZSBwZXJtaXNzaW9ucyB0byB1c2UgdGhlIGNyb3NzLXJlZ2lvbiBpbmZlcmVuY2UgcHJvZmlsZS5cbiAgICogRG9lcyBub3QgZ3JhbnQgcGVybWlzc2lvbnMgdG8gdXNlIHRoZSBtb2RlbCBpbiB0aGUgcHJvZmlsZS5cbiAgICovXG4gIGdyYW50UHJvZmlsZVVzYWdlKGdyYW50ZWU6IElHcmFudGFibGUpOiBHcmFudCB7XG4gICAgY29uc3QgZ3JhbnQgPSBHcmFudC5hZGRUb1ByaW5jaXBhbCh7XG4gICAgICBncmFudGVlOiBncmFudGVlLFxuICAgICAgYWN0aW9uczogWydiZWRyb2NrOkdldEluZmVyZW5jZVByb2ZpbGUnLCAnYmVkcm9jazpMaXN0SW5mZXJlbmNlUHJvZmlsZXMnXSxcbiAgICAgIHJlc291cmNlQXJuczogW3RoaXMuaW5mZXJlbmNlUHJvZmlsZUFybl0sXG4gICAgICBzY29wZTogdGhpcyxcbiAgICB9KTtcbiAgICByZXR1cm4gZ3JhbnQ7XG4gIH1cbn1cbiJdfQ==