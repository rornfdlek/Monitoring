"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ApplicationInferenceProfile = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
/**
 *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance
 *  with the License. A copy of the License is located at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  or in the 'license' file accompanying this file. This file is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES
 *  OR CONDITIONS OF ANY KIND, express or implied. See the License for the specific language governing permissions
 *  and limitations under the License.
 */
const aws_cdk_lib_1 = require("aws-cdk-lib");
const bedrock = require("aws-cdk-lib/aws-bedrock");
const aws_iam_1 = require("aws-cdk-lib/aws-iam");
const common_1 = require("./common");
/******************************************************************************
 *                        NEW CONSTRUCT DEFINITION
 *****************************************************************************/
/**
 * Class to create a ApplicationInferenceProfile with CDK.
 * These are inference profiles created by users (user defined).
 * This helps to track costs and model usage.
 * @resource AWS::Bedrock::ApplicationInferenceProfile
 * @see https://docs.aws.amazon.com/bedrock/latest/userguide/inference-profiles-create.html
 */
class ApplicationInferenceProfile extends common_1.InferenceProfileBase {
    /**
     * Import a ApplicationInferenceProfile given its attributes
     */
    static fromApplicationInferenceProfileAttributes(scope, id, attrs) {
        class Import extends common_1.InferenceProfileBase {
            constructor() {
                super(...arguments);
                this.inferenceProfileArn = attrs.inferenceProfileArn;
                this.inferenceProfileId = aws_cdk_lib_1.Arn.split(attrs.inferenceProfileArn, aws_cdk_lib_1.ArnFormat.SLASH_RESOURCE_NAME)
                    .resourceName;
                this.type = common_1.InferenceProfileType.APPLICATION;
            }
        }
        return new Import(scope, id);
    }
    /**
     * Import a low-level L1 Cfn ApplicationInferenceProfile
     */
    static fromCfnApplicationInferenceProfile(CfnApplicationInferenceProfile) {
        return new (class extends common_1.InferenceProfileBase {
            constructor() {
                super(...arguments);
                this.inferenceProfileArn = CfnApplicationInferenceProfile.attrInferenceProfileArn;
                this.inferenceProfileId = CfnApplicationInferenceProfile.attrInferenceProfileId;
                this.type = common_1.InferenceProfileType.APPLICATION;
            }
        })(CfnApplicationInferenceProfile, '@FromCfnApplicationInferenceProfile');
    }
    constructor(scope, id, props) {
        super(scope, id);
        this.inferenceProfileModel = props.modelSource;
        this.inferenceProfileName = props.inferenceProfileName;
        this.type = common_1.InferenceProfileType.APPLICATION;
        // L1 instantiation
        this._resource = new bedrock.CfnApplicationInferenceProfile(this, id, {
            description: props.description,
            inferenceProfileName: props.inferenceProfileName,
            modelSource: {
                copyFrom: props.modelSource.invokableArn,
            },
            tags: props.tags,
        });
        // build attributes
        this.inferenceProfileArn = this._resource.attrInferenceProfileArn;
        this.inferenceProfileId = this._resource.attrInferenceProfileId;
        this.status = this._resource.attrStatus;
        this.type = this._resource.attrType;
        this.createdAt = this._resource.attrCreatedAt;
        this.updatedAt = this._resource.attrUpdatedAt;
        // Needed to Implement IInvokable
        this.invokableArn = this.inferenceProfileArn;
    }
    /**
     * Gives the appropriate policies to invoke and use the application inference profile.
     */
    grantInvoke(grantee) {
        // This method ensures the appropriate permissions are given
        // to use either the inference profile or the vanilla FM
        this.inferenceProfileModel.grantInvoke(grantee);
        // plus we add permissions to now invoke the application inference profile itself.
        return this.grantProfileUsage(grantee);
    }
    /**
     * Grants appropriate permissions to use the application inference profile (AIP).
     * Does not grant permissions to use the model/cross-region profile in the AIP.
     */
    grantProfileUsage(grantee) {
        const grant = aws_iam_1.Grant.addToPrincipal({
            grantee: grantee,
            actions: ['bedrock:GetInferenceProfile', 'bedrock:InvokeModel'],
            resourceArns: [this.inferenceProfileArn],
        });
        return grant;
    }
}
exports.ApplicationInferenceProfile = ApplicationInferenceProfile;
_a = JSII_RTTI_SYMBOL_1;
ApplicationInferenceProfile[_a] = { fqn: "@cdklabs/generative-ai-cdk-constructs.bedrock.ApplicationInferenceProfile", version: "0.1.285" };
//# sourceMappingURL=data:application/json;base64,