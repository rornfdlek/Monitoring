"use strict";
var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.Guardrail = exports.GuardrailBase = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
/**
 *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance
 *  with the License. A copy of the License is located at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  or in the 'license' file accompanying this file. This file is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES
 *  OR CONDITIONS OF ANY KIND, express or implied. See the License for the specific language governing permissions
 *  and limitations under the License.
 */
const fs = require("fs");
const aws_cdk_lib_1 = require("aws-cdk-lib");
const bedrock = require("aws-cdk-lib/aws-bedrock");
const iam = require("aws-cdk-lib/aws-iam");
const aws_kms_1 = require("aws-cdk-lib/aws-kms");
const helpers_internal_1 = require("aws-cdk-lib/core/lib/helpers-internal");
/**
 * Abstract base class for a Guardrail.
 * Contains methods and attributes valid for Guardrails either created with CDK or imported.
 */
class GuardrailBase extends aws_cdk_lib_1.Resource {
    /**
     * Grant the given identity permissions to apply the guardrail.
     */
    grantApply(grantee) {
        return iam.Grant.addToPrincipal({
            grantee,
            resourceArns: [this.guardrailArn],
            actions: ['bedrock:ApplyGuardrail'],
            scope: this,
        });
    }
}
exports.GuardrailBase = GuardrailBase;
_a = JSII_RTTI_SYMBOL_1;
GuardrailBase[_a] = { fqn: "@cdklabs/generative-ai-cdk-constructs.bedrock.GuardrailBase", version: "0.1.285" };
/******************************************************************************
 *                        NEW CONSTRUCT DEFINITION
 *****************************************************************************/
/**
 * Class to create a Guardrail with CDK.
 */
class Guardrail extends GuardrailBase {
    /**
     * Import a guardrail given its attributes
     */
    static fromGuardrailAttributes(scope, id, attrs) {
        class Import extends GuardrailBase {
            constructor() {
                super(...arguments);
                this.guardrailArn = attrs.guardrailArn;
                this.guardrailId = aws_cdk_lib_1.Arn.split(attrs.guardrailArn, aws_cdk_lib_1.ArnFormat.SLASH_RESOURCE_NAME).resourceName;
                this.guardrailVersion = attrs.guardrailVersion ?? 'DRAFT';
                this.kmsKey = attrs.kmsKey;
            }
        }
        return new Import(scope, id);
    }
    /**
     * Import a low-level L1 Cfn Guardrail
     */
    static fromCfnGuardrail(cfnGuardrail) {
        return new (class extends GuardrailBase {
            constructor() {
                super(...arguments);
                this.guardrailArn = cfnGuardrail.attrGuardrailArn;
                this.guardrailId = cfnGuardrail.attrGuardrailId;
                this.guardrailVersion = cfnGuardrail.attrVersion;
                this.kmsKey = cfnGuardrail.kmsKeyArn
                    ? aws_kms_1.Key.fromKeyArn(this, '@FromCfnGuardrailKey', cfnGuardrail.kmsKeyArn)
                    : undefined;
            }
        })(cfnGuardrail, '@FromCfnGuardrail');
    }
    constructor(scope, id, props) {
        super(scope, id, {
            physicalName: props.name,
        });
        // ------------------------------------------------------
        // Set properties or defaults
        // ------------------------------------------------------
        this.name = this.physicalName;
        this.contentFilters = props.contentFilters ?? [];
        this.piiFilters = props.piiFilters ?? [];
        this.regexFilters = props.regexFilters ?? [];
        this.deniedTopics = props.deniedTopics ?? [];
        this.contextualGroundingFilters = props.contextualGroundingFilters ?? [];
        this.wordFilters = props.wordFilters ?? [];
        this.managedWordListFilters = props.managedWordListFilters ?? [];
        const defaultBlockedInputMessaging = 'Sorry, your query violates our usage policy.';
        const defaultBlockedOutputsMessaging = 'Sorry, I am unable to answer your question because of our usage policy.';
        // ------------------------------------------------------
        // CFN Props - With Lazy support
        // ------------------------------------------------------
        let cfnProps = {
            name: this.name,
            description: props.description,
            kmsKeyArn: props.kmsKey?.keyArn,
            blockedInputMessaging: props.blockedInputMessaging ?? defaultBlockedInputMessaging,
            blockedOutputsMessaging: props.blockedOutputsMessaging ?? defaultBlockedOutputsMessaging,
            // Lazy props
            contentPolicyConfig: this.generateCfnContentPolicyConfig(),
            contextualGroundingPolicyConfig: this.generateCfnContextualPolicyConfig(),
            topicPolicyConfig: this.generateCfnTopicPolicy(),
            wordPolicyConfig: this.generateCfnWordPolicyConfig(),
            sensitiveInformationPolicyConfig: this.generateCfnSensitiveInformationPolicyConfig(),
        };
        // Hash calculation useful for versioning of the guardrail
        this.hash = (0, helpers_internal_1.md5hash)(JSON.stringify(cfnProps));
        // ------------------------------------------------------
        // L1 Instantiation
        // ------------------------------------------------------
        this.__resource = new bedrock.CfnGuardrail(this, 'MyGuardrail', cfnProps);
        this.guardrailId = this.__resource.attrGuardrailId;
        this.guardrailArn = this.__resource.attrGuardrailArn;
        this.guardrailVersion = this.__resource.attrVersion;
    }
    // ------------------------------------------------------
    // METHODS
    // ------------------------------------------------------
    /**
     * Adds a content filter to the guardrail.
     * @param filter The content filter to add.
     */
    addContentFilter(filter) {
        this.contentFilters.push(filter);
    }
    /**
     * Adds a PII filter to the guardrail.
     * @param filter The PII filter to add.
     */
    addPIIFilter(filter) {
        this.piiFilters.push(filter);
    }
    /**
     * Adds a regex filter to the guardrail.
     * @param filter The regex filter to add.
     */
    addRegexFilter(filter) {
        this.regexFilters.push(filter);
    }
    /**
     * Adds a denied topic filter to the guardrail.
     * @param filter The denied topic filter to add.
     */
    addDeniedTopicFilter(filter) {
        this.deniedTopics.push(filter);
    }
    /**
     * Adds a contextual grounding filter to the guardrail.
     * @param filter The contextual grounding filter to add.
     */
    addContextualGroundingFilter(filter) {
        this.contextualGroundingFilters.push(filter);
    }
    /**
     * Adds a word filter to the guardrail.
     * @param filter The word filter to add.
     */
    addWordFilter(filter) {
        this.wordFilters.push(filter);
    }
    /**
     * Adds a word filter to the guardrail.
     * @param filePath The location of the word filter file.
     */
    addWordFilterFromFile(filePath) {
        const fileContents = fs.readFileSync(filePath, 'utf8');
        const words = fileContents.trim().split(',');
        for (const word of words)
            this.addWordFilter(word);
    }
    /**
     * Adds a managed word list filter to the guardrail.
     * @param filter The managed word list filter to add.
     */
    addManagedWordListFilter(filter) {
        this.managedWordListFilters.push(filter);
    }
    /**
     * Create a version for the guardrail.
     * @param description The description of the version.
     * @returns The guardrail version.
     */
    createVersion(description) {
        const cfnVersion = new bedrock.CfnGuardrailVersion(this, `GuardrailVersion-${this.hash.slice(0, 16)}`, {
            description: description,
            guardrailIdentifier: this.guardrailId,
        });
        this.guardrailVersion = cfnVersion.attrVersion;
        return this.guardrailVersion;
    }
    // ------------------------------------------------------
    // CFN Generators
    // ------------------------------------------------------
    /**
     * Returns the content filters applied to the guardrail. This method defers the computation
     * to synth time.
     */
    generateCfnContentPolicyConfig() {
        return aws_cdk_lib_1.Lazy.any({
            produce: () => {
                if (this.contentFilters.length > 0) {
                    return { filtersConfig: this.contentFilters };
                }
                else {
                    return undefined;
                }
            },
        });
    }
    /**
     * Returns the topic filters applied to the guardrail. This method defers the computation
     * to synth time.
     */
    generateCfnTopicPolicy() {
        return aws_cdk_lib_1.Lazy.any({
            produce: () => {
                if (this.deniedTopics.length > 0) {
                    return {
                        topicsConfig: this.deniedTopics.flatMap((topic) => {
                            return {
                                definition: topic.definition,
                                name: topic.name,
                                examples: topic.examples,
                                type: 'DENY',
                            };
                        }),
                    };
                }
                else {
                    return undefined;
                }
            },
        });
    }
    /**
     * Returns the contectual filters applied to the guardrail. This method defers the computation
     * to synth time.
     */
    generateCfnContextualPolicyConfig() {
        return aws_cdk_lib_1.Lazy.any({
            produce: () => {
                if (this.contextualGroundingFilters.length > 0) {
                    return {
                        filtersConfig: this.contextualGroundingFilters.flatMap((filter) => {
                            return {
                                type: filter.type,
                                threshold: filter.threshold,
                            };
                        }),
                    };
                }
                else {
                    return undefined;
                }
            },
        });
    }
    /**
     * Returns the word config applied to the guardrail. This method defers the computation
     * to synth time.
     */
    generateCfnWordPolicyConfig() {
        return aws_cdk_lib_1.Lazy.any({
            produce: () => {
                if (this.wordFilters.length > 0 || this.managedWordListFilters.length > 0) {
                    return {
                        wordsConfig: this.generateCfnWordConfig(),
                        managedWordListsConfig: this.generateCfnManagedWordListsConfig(),
                    };
                }
                else {
                    return undefined;
                }
            },
        });
    }
    /**
     * Returns the word filters applied to the guardrail. This method defers the computation
     * to synth time.
     */
    generateCfnWordConfig() {
        return aws_cdk_lib_1.Lazy.any({
            produce: () => {
                return this.wordFilters.flatMap((word) => {
                    return {
                        text: word,
                    };
                });
            },
        }, { omitEmptyArray: true });
    }
    /**
     * Returns the word filters applied to the guardrail. This method defers the computation
     * to synth time.
     */
    generateCfnManagedWordListsConfig() {
        return aws_cdk_lib_1.Lazy.any({
            produce: () => {
                return this.managedWordListFilters.flatMap((filter) => {
                    return {
                        type: filter.toString(),
                    };
                });
            },
        }, { omitEmptyArray: true });
    }
    /**
     * Returns the sensitive information config applied to the guardrail. This method defers the computation
     * to synth time.
     */
    generateCfnSensitiveInformationPolicyConfig() {
        return aws_cdk_lib_1.Lazy.any({
            produce: () => {
                if (this.regexFilters.length > 0 || this.piiFilters.length > 0) {
                    return {
                        regexesConfig: this.generateCfnRegexesConfig(),
                        piiEntitiesConfig: this.generateCfnPiiEntitiesConfig(),
                    };
                }
                else {
                    return undefined;
                }
            },
        }, { omitEmptyArray: true });
    }
    /**
     * Returns the regex filters applied to the guardrail. This method defers the computation
     * to synth time.
     */
    generateCfnRegexesConfig() {
        return aws_cdk_lib_1.Lazy.any({
            produce: () => {
                return this.regexFilters.flatMap((regex) => {
                    return {
                        name: regex.name,
                        description: regex.description,
                        pattern: regex.pattern,
                        action: regex.action,
                    };
                });
            },
        }, { omitEmptyArray: true });
    }
    /**
     * Returns the Pii filters applied to the guardrail. This method defers the computation
     * to synth time.
     */
    generateCfnPiiEntitiesConfig() {
        return aws_cdk_lib_1.Lazy.any({
            produce: () => {
                return this.piiFilters.flatMap((filter) => {
                    return {
                        type: filter.type,
                        action: filter.action,
                    };
                });
            },
        }, { omitEmptyArray: true });
    }
}
exports.Guardrail = Guardrail;
_b = JSII_RTTI_SYMBOL_1;
Guardrail[_b] = { fqn: "@cdklabs/generative-ai-cdk-constructs.bedrock.Guardrail", version: "0.1.285" };
//# sourceMappingURL=data:application/json;base64,