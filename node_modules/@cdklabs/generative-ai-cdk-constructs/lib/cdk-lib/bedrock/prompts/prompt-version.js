"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.PromptVersion = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
/**
 *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance
 *  with the License. A copy of the License is located at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  or in the 'license' file accompanying this file. This file is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES
 *  OR CONDITIONS OF ANY KIND, express or implied. See the License for the specific language governing permissions
 *  and limitations under the License.
 */
const aws_cdk_lib_1 = require("aws-cdk-lib");
const constructs_1 = require("constructs");
/**
 * Creates a version of the prompt.
 *
 * Use this to create a static snapshot of your prompt that can be deployed
 * to production. Versions allow you to easily switch between different
 * configurations for your prompt and update your application with the most
 * appropriate version for your use-case.
 * @resource AWS::Bedrock::PromptVersion
 * @see https://docs.aws.amazon.com/bedrock/latest/userguide/prompt-management-deploy.html
 */
class PromptVersion extends constructs_1.Construct {
    constructor(scope, id, props) {
        super(scope, id);
        this.prompt = props.prompt;
        // L1 instantiation
        this._resource = new aws_cdk_lib_1.aws_bedrock.CfnPromptVersion(this, id, {
            description: props.description,
            promptArn: props.prompt.promptArn,
        });
        this.versionArn = this._resource.attrArn;
        this.version = this._resource.attrVersion;
    }
}
exports.PromptVersion = PromptVersion;
_a = JSII_RTTI_SYMBOL_1;
PromptVersion[_a] = { fqn: "@cdklabs/generative-ai-cdk-constructs.bedrock.PromptVersion", version: "0.1.285" };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvbXB0LXZlcnNpb24uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvY2RrLWxpYi9iZWRyb2NrL3Byb21wdHMvcHJvbXB0LXZlcnNpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTs7Ozs7Ozs7Ozs7R0FXRztBQUVILDZDQUFxRDtBQUNyRCwyQ0FBdUM7QUFnQnZDOzs7Ozs7Ozs7R0FTRztBQUNILE1BQWEsYUFBYyxTQUFRLHNCQUFTO0lBc0IxQyxZQUFZLEtBQWdCLEVBQUUsRUFBVSxFQUFFLEtBQXlCO1FBQ2pFLEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFFakIsSUFBSSxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFDO1FBRTNCLG1CQUFtQjtRQUNuQixJQUFJLENBQUMsU0FBUyxHQUFHLElBQUkseUJBQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLEVBQUUsRUFBRSxFQUFFO1lBQ3RELFdBQVcsRUFBRSxLQUFLLENBQUMsV0FBVztZQUM5QixTQUFTLEVBQUUsS0FBSyxDQUFDLE1BQU0sQ0FBQyxTQUFTO1NBQ2xDLENBQUMsQ0FBQztRQUVILElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUM7UUFDekMsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLFdBQVcsQ0FBQztJQUU1QyxDQUFDOztBQXBDSCxzQ0FzQ0MiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqICBDb3B5cmlnaHQgQW1hem9uLmNvbSwgSW5jLiBvciBpdHMgYWZmaWxpYXRlcy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiAgTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKS4gWW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZVxuICogIHdpdGggdGhlIExpY2Vuc2UuIEEgY29weSBvZiB0aGUgTGljZW5zZSBpcyBsb2NhdGVkIGF0XG4gKlxuICogICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiAgb3IgaW4gdGhlICdsaWNlbnNlJyBmaWxlIGFjY29tcGFueWluZyB0aGlzIGZpbGUuIFRoaXMgZmlsZSBpcyBkaXN0cmlidXRlZCBvbiBhbiAnQVMgSVMnIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVNcbiAqICBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBleHByZXNzIG9yIGltcGxpZWQuIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9uc1xuICogIGFuZCBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBhd3NfYmVkcm9jayBhcyBiZWRyb2NrIH0gZnJvbSAnYXdzLWNkay1saWInO1xuaW1wb3J0IHsgQ29uc3RydWN0IH0gZnJvbSAnY29uc3RydWN0cyc7XG5pbXBvcnQgeyBQcm9tcHQgfSBmcm9tICcuL3Byb21wdCc7XG5cblxuZXhwb3J0IGludGVyZmFjZSBQcm9tcHRWZXJzaW9uUHJvcHMge1xuICAvKipcbiAgICogVGhlIHByb21wdCB0byB1c2UgZm9yIHRoaXMgdmVyc2lvbi5cbiAgICovXG4gIHJlYWRvbmx5IHByb21wdDogUHJvbXB0O1xuXG4gIC8qKlxuICAgKiBUaGUgZGVzY3JpcHRpb24gb2YgdGhlIHByb21wdCB2ZXJzaW9uLlxuICAgKi9cbiAgcmVhZG9ubHkgZGVzY3JpcHRpb24/OiBzdHJpbmc7XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIHZlcnNpb24gb2YgdGhlIHByb21wdC5cbiAqXG4gKiBVc2UgdGhpcyB0byBjcmVhdGUgYSBzdGF0aWMgc25hcHNob3Qgb2YgeW91ciBwcm9tcHQgdGhhdCBjYW4gYmUgZGVwbG95ZWRcbiAqIHRvIHByb2R1Y3Rpb24uIFZlcnNpb25zIGFsbG93IHlvdSB0byBlYXNpbHkgc3dpdGNoIGJldHdlZW4gZGlmZmVyZW50XG4gKiBjb25maWd1cmF0aW9ucyBmb3IgeW91ciBwcm9tcHQgYW5kIHVwZGF0ZSB5b3VyIGFwcGxpY2F0aW9uIHdpdGggdGhlIG1vc3RcbiAqIGFwcHJvcHJpYXRlIHZlcnNpb24gZm9yIHlvdXIgdXNlLWNhc2UuXG4gKiBAcmVzb3VyY2UgQVdTOjpCZWRyb2NrOjpQcm9tcHRWZXJzaW9uXG4gKiBAc2VlIGh0dHBzOi8vZG9jcy5hd3MuYW1hem9uLmNvbS9iZWRyb2NrL2xhdGVzdC91c2VyZ3VpZGUvcHJvbXB0LW1hbmFnZW1lbnQtZGVwbG95Lmh0bWxcbiAqL1xuZXhwb3J0IGNsYXNzIFByb21wdFZlcnNpb24gZXh0ZW5kcyBDb25zdHJ1Y3Qge1xuICAvKipcbiAgICogVGhlIEFtYXpvbiBSZXNvdXJjZSBOYW1lIChBUk4pIG9mIHRoZSBwcm9tcHQgdmVyc2lvbi5cbiAgICogQGV4YW1wbGUgXCJhcm46YXdzOmJlZHJvY2s6dXMtZWFzdC0xOjEyMzQ1Njc4OTAxMjpwcm9tcHQvUFJPTVBUMTIzNDU6MVwiXG4gICAqL1xuICBwdWJsaWMgcmVhZG9ubHkgdmVyc2lvbkFybjogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBUaGUgcHJvbXB0IHVzZWQgYnkgdGhpcyB2ZXJzaW9uLlxuICAgKi9cbiAgcHVibGljIHJlYWRvbmx5IHByb21wdDogUHJvbXB0O1xuXG4gIC8qKlxuICAgKiBUaGUgdmVyc2lvbiBvZiB0aGUgcHJvbXB0IHRoYXQgd2FzIGNyZWF0ZWQuXG4gICAqL1xuICBwdWJsaWMgcmVhZG9ubHkgdmVyc2lvbjogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBJbnN0YW5jZSBvZiBwcm9tcHQgdmVyc2lvbi5cbiAgICovXG4gIHByaXZhdGUgcmVhZG9ubHkgX3Jlc291cmNlOiBiZWRyb2NrLkNmblByb21wdFZlcnNpb247XG5cbiAgY29uc3RydWN0b3Ioc2NvcGU6IENvbnN0cnVjdCwgaWQ6IHN0cmluZywgcHJvcHM6IFByb21wdFZlcnNpb25Qcm9wcykge1xuICAgIHN1cGVyKHNjb3BlLCBpZCk7XG5cbiAgICB0aGlzLnByb21wdCA9IHByb3BzLnByb21wdDtcblxuICAgIC8vIEwxIGluc3RhbnRpYXRpb25cbiAgICB0aGlzLl9yZXNvdXJjZSA9IG5ldyBiZWRyb2NrLkNmblByb21wdFZlcnNpb24odGhpcywgaWQsIHtcbiAgICAgIGRlc2NyaXB0aW9uOiBwcm9wcy5kZXNjcmlwdGlvbixcbiAgICAgIHByb21wdEFybjogcHJvcHMucHJvbXB0LnByb21wdEFybixcbiAgICB9KTtcblxuICAgIHRoaXMudmVyc2lvbkFybiA9IHRoaXMuX3Jlc291cmNlLmF0dHJBcm47XG4gICAgdGhpcy52ZXJzaW9uID0gdGhpcy5fcmVzb3VyY2UuYXR0clZlcnNpb247XG5cbiAgfVxuXG59Il19