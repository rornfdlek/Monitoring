"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.AgentAlias = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
/**
 *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance
 *  with the License. A copy of the License is located at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  or in the 'license' file accompanying this file. This file is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES
 *  OR CONDITIONS OF ANY KIND, express or implied. See the License for the specific language governing permissions
 *  and limitations under the License.
 */
const aws_cdk_lib_1 = require("aws-cdk-lib");
const constructs_1 = require("constructs");
class AgentAlias extends constructs_1.Construct {
    // ------------------------------------------------------
    // Imports
    // ------------------------------------------------------
    /**
     * Brings an Agent Alias from an existing one created outside of CDK.
     */
    static fromAliasArn(scope, id, aliasArn) {
        class Import extends aws_cdk_lib_1.Resource {
            constructor() {
                super(scope, id);
                this.aliasArn = aliasArn;
                [this.agentId, this.aliasId] = this.parseArnComponents(aliasArn);
            }
            parseArnComponents(arn) {
                const resourceName = aws_cdk_lib_1.Arn.split(arn, aws_cdk_lib_1.ArnFormat.SLASH_RESOURCE_SLASH_RESOURCE_NAME).resourceName;
                const [agentId, aliasId] = resourceName.split('/');
                return [agentId, aliasId];
            }
        }
        return new Import();
    }
    constructor(scope, id, props) {
        super(scope, id);
        const alias = new aws_cdk_lib_1.aws_bedrock.CfnAgentAlias(this, 'MyCfnAgentAlias', {
            agentAliasName: props.aliasName ?? 'latest',
            agentId: props.agentId,
            tags: props.tags,
            description: props.description,
        });
        if (props.agentVersion) {
            alias.routingConfiguration = [{
                    agentVersion: props.agentVersion,
                }];
        }
        this.agentId = props.agentId;
        this.aliasId = alias.attrAgentAliasId;
        this.aliasArn = alias.attrAgentAliasArn;
        this.aliasName = props.aliasName ?? 'latest';
    }
}
exports.AgentAlias = AgentAlias;
_a = JSII_RTTI_SYMBOL_1;
AgentAlias[_a] = { fqn: "@cdklabs/generative-ai-cdk-constructs.bedrock.AgentAlias", version: "0.1.285" };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWdlbnQtYWxpYXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvY2RrLWxpYi9iZWRyb2NrL2FnZW50LWFsaWFzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7Ozs7Ozs7Ozs7O0dBV0c7QUFHSCw2Q0FBK0U7QUFDL0UsMkNBQXVDO0FBOER2QyxNQUFhLFVBQVcsU0FBUSxzQkFBUztJQUN2Qyx5REFBeUQ7SUFDekQsVUFBVTtJQUNWLHlEQUF5RDtJQUN6RDs7T0FFRztJQUNJLE1BQU0sQ0FBQyxZQUFZLENBQUMsS0FBZ0IsRUFBRSxFQUFVLEVBQUUsUUFBZ0I7UUFDdkUsTUFBTSxNQUFPLFNBQVEsc0JBQVE7WUFLM0I7Z0JBQ0UsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQztnQkFMSCxhQUFRLEdBQUcsUUFBUSxDQUFDO2dCQU1sQyxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUNuRSxDQUFDO1lBRU8sa0JBQWtCLENBQUMsR0FBVztnQkFDcEMsTUFBTSxZQUFZLEdBQUcsaUJBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxFQUFFLHVCQUFTLENBQUMsa0NBQWtDLENBQUMsQ0FBQyxZQUFhLENBQUM7Z0JBQ2hHLE1BQU0sQ0FBQyxPQUFPLEVBQUUsT0FBTyxDQUFDLEdBQUcsWUFBWSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztnQkFDbkQsT0FBTyxDQUFDLE9BQU8sRUFBRSxPQUFPLENBQUMsQ0FBQztZQUM1QixDQUFDO1NBQ0Y7UUFDRCxPQUFPLElBQUksTUFBTSxFQUFFLENBQUM7SUFDdEIsQ0FBQztJQXlCRCxZQUFZLEtBQWdCLEVBQUUsRUFBVSxFQUFFLEtBQXNCO1FBQzlELEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFHakIsTUFBTSxLQUFLLEdBQUcsSUFBSSx5QkFBTyxDQUFDLGFBQWEsQ0FBQyxJQUFJLEVBQUUsaUJBQWlCLEVBQUU7WUFDL0QsY0FBYyxFQUFFLEtBQUssQ0FBQyxTQUFTLElBQUksUUFBUTtZQUMzQyxPQUFPLEVBQUUsS0FBSyxDQUFDLE9BQU87WUFDdEIsSUFBSSxFQUFFLEtBQUssQ0FBQyxJQUFJO1lBQ2hCLFdBQVcsRUFBRSxLQUFLLENBQUMsV0FBVztTQUMvQixDQUFDLENBQUM7UUFFSCxJQUFJLEtBQUssQ0FBQyxZQUFZLEVBQUUsQ0FBQztZQUN2QixLQUFLLENBQUMsb0JBQW9CLEdBQUcsQ0FBQztvQkFDNUIsWUFBWSxFQUFFLEtBQUssQ0FBQyxZQUFZO2lCQUNqQyxDQUFDLENBQUM7UUFDTCxDQUFDO1FBRUQsSUFBSSxDQUFDLE9BQU8sR0FBRyxLQUFLLENBQUMsT0FBTyxDQUFDO1FBQzdCLElBQUksQ0FBQyxPQUFPLEdBQUcsS0FBSyxDQUFDLGdCQUFnQixDQUFDO1FBQ3RDLElBQUksQ0FBQyxRQUFRLEdBQUcsS0FBSyxDQUFDLGlCQUFpQixDQUFDO1FBQ3hDLElBQUksQ0FBQyxTQUFTLEdBQUcsS0FBSyxDQUFDLFNBQVMsSUFBSSxRQUFRLENBQUM7SUFFL0MsQ0FBQzs7QUF4RUgsZ0NBMkVDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiAgQ29weXJpZ2h0IEFtYXpvbi5jb20sIEluYy4gb3IgaXRzIGFmZmlsaWF0ZXMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIikuIFlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2VcbiAqICB3aXRoIHRoZSBMaWNlbnNlLiBBIGNvcHkgb2YgdGhlIExpY2Vuc2UgaXMgbG9jYXRlZCBhdFxuICpcbiAqICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogIG9yIGluIHRoZSAnbGljZW5zZScgZmlsZSBhY2NvbXBhbnlpbmcgdGhpcyBmaWxlLiBUaGlzIGZpbGUgaXMgZGlzdHJpYnV0ZWQgb24gYW4gJ0FTIElTJyBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTXG4gKiAgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZXhwcmVzcyBvciBpbXBsaWVkLiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnNcbiAqICBhbmQgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuXG5pbXBvcnQgeyBBcm4sIEFybkZvcm1hdCwgYXdzX2JlZHJvY2sgYXMgYmVkcm9jaywgUmVzb3VyY2UgfSBmcm9tICdhd3MtY2RrLWxpYic7XG5pbXBvcnQgeyBDb25zdHJ1Y3QgfSBmcm9tICdjb25zdHJ1Y3RzJztcblxuXG4vKipcbiAqIEludGVyZmFjZSBmb3IgYm90aCBJbXBvcnRlZCBhbmQgQ0RLLWNyZWF0ZWQgQWdlbnQgQWxpYXNlcy5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBJQWdlbnRBbGlhcyB7XG4gIC8qKlxuICAgKiBUaGUgdW5pcXVlIGlkZW50aWZpZXIgb2YgdGhlIGFnZW50IGFsaWFzLlxuICAgKiBAZXhhbXBsZSBgVENMQ0lURlpUTmBcbiAgICovXG4gIHJlYWRvbmx5IGFsaWFzSWQ6IHN0cmluZztcbiAgLyoqXG4gICAqIFRoZSB1bmlxdWUgaWRlbnRpZmllciBvZiB0aGUgYWdlbnQuXG4gICAqIEBleGFtcGxlIGBETkNKSllRS1NVYFxuICAgKi9cbiAgcmVhZG9ubHkgYWdlbnRJZDogc3RyaW5nO1xuICAvKipcbiAgICogVGhlIEFSTiBvZiB0aGUgYWdlbnQgYWxpYXMuXG4gICAqIEBleGFtcGxlIGBhcm46YXdzOmJlZHJvY2s6dXMtZWFzdC0xOjEyMzQ1Njc4OTAxMjphZ2VudC1hbGlhcy9ETkNKSllRS1NVL1RDTENJVEZaVE5gXG4gICAqL1xuICByZWFkb25seSBhbGlhc0Fybjogc3RyaW5nO1xufVxuXG4vKipcbiAqIEludGVyZmFjZSB0byBjcmVhdGUgYSBuZXcgQWdlbnQgQWxpYXMuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQWdlbnRBbGlhc1Byb3BzIHtcbiAgLyoqXG4gICAqIFRoZSB1bmlxdWUgaWRlbnRpZmllciBvZiB0aGUgYWdlbnQuXG4gICAqL1xuICByZWFkb25seSBhZ2VudElkOiBzdHJpbmc7XG4gIC8qKlxuICAgKiBUaGUgbmFtZSBmb3IgdGhlIGFnZW50IGFsaWFzLlxuICAgKlxuICAgKiBAZGVmYXVsdCAtICdsYXRlc3QnXG4gICAqL1xuICByZWFkb25seSBhbGlhc05hbWU/OiBzdHJpbmc7XG4gIC8qKlxuICAgKiBEZXNjcmlwdGlvbiBmb3IgdGhlIGFnZW50IGFsaWFzLlxuICAgKlxuICAgKi9cbiAgcmVhZG9ubHkgZGVzY3JpcHRpb24/OiBzdHJpbmc7XG4gIC8qKlxuICAgKiBUaGUgbGlzdCBvZiByZXNvdXJjZSB1cGRhdGUgdGltZXN0YW1wcyB0byBsZXQgQ2xvdWRGb3JtYXRpb24gZGV0ZXJtaW5lIHdoZW4gdG8gdXBkYXRlIHRoZSBhbGlhcy5cbiAgICovXG4gIHJlYWRvbmx5IHJlc291cmNlVXBkYXRlcz86IHN0cmluZ1tdO1xuICAvKipcbiAgICogVGhlIHZlcnNpb24gb2YgdGhlIGFnZW50IHRvIGFzc29jaWF0ZSB3aXRoIHRoZSBhZ2VudCBhbGlhcy5cbiAgICpcbiAgICogQGRlZmF1bHQgLSBDcmVhdGVzIGEgbmV3IHZlcnNpb24gb2YgdGhlIGFnZW50LlxuICAgKi9cbiAgcmVhZG9ubHkgYWdlbnRWZXJzaW9uPzogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBPUFRJT05BTDogVGFnIChLRVktVkFMVUUpIGJlZHJvY2sgYWdlbnQgcmVzb3VyY2VcbiAgICpcbiAgICogQGRlZmF1bHQgLSBmYWxzZVxuICAgKi9cbiAgcmVhZG9ubHkgdGFncz86IFJlY29yZDxzdHJpbmcsIHN0cmluZz47XG59XG5cbmV4cG9ydCBjbGFzcyBBZ2VudEFsaWFzIGV4dGVuZHMgQ29uc3RydWN0IGltcGxlbWVudHMgSUFnZW50QWxpYXMge1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gSW1wb3J0c1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLyoqXG4gICAqIEJyaW5ncyBhbiBBZ2VudCBBbGlhcyBmcm9tIGFuIGV4aXN0aW5nIG9uZSBjcmVhdGVkIG91dHNpZGUgb2YgQ0RLLlxuICAgKi9cbiAgcHVibGljIHN0YXRpYyBmcm9tQWxpYXNBcm4oc2NvcGU6IENvbnN0cnVjdCwgaWQ6IHN0cmluZywgYWxpYXNBcm46IHN0cmluZyk6IElBZ2VudEFsaWFzIHtcbiAgICBjbGFzcyBJbXBvcnQgZXh0ZW5kcyBSZXNvdXJjZSBpbXBsZW1lbnRzIElBZ2VudEFsaWFzIHtcbiAgICAgIHB1YmxpYyByZWFkb25seSBhbGlhc0FybiA9IGFsaWFzQXJuO1xuICAgICAgcHVibGljIHJlYWRvbmx5IGFsaWFzSWQ6IHN0cmluZztcbiAgICAgIHB1YmxpYyByZWFkb25seSBhZ2VudElkOiBzdHJpbmc7XG5cbiAgICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcihzY29wZSwgaWQpO1xuICAgICAgICBbdGhpcy5hZ2VudElkLCB0aGlzLmFsaWFzSWRdID0gdGhpcy5wYXJzZUFybkNvbXBvbmVudHMoYWxpYXNBcm4pO1xuICAgICAgfVxuXG4gICAgICBwcml2YXRlIHBhcnNlQXJuQ29tcG9uZW50cyhhcm46IHN0cmluZyk6IFtzdHJpbmcsIHN0cmluZ10ge1xuICAgICAgICBjb25zdCByZXNvdXJjZU5hbWUgPSBBcm4uc3BsaXQoYXJuLCBBcm5Gb3JtYXQuU0xBU0hfUkVTT1VSQ0VfU0xBU0hfUkVTT1VSQ0VfTkFNRSkucmVzb3VyY2VOYW1lITtcbiAgICAgICAgY29uc3QgW2FnZW50SWQsIGFsaWFzSWRdID0gcmVzb3VyY2VOYW1lLnNwbGl0KCcvJyk7XG4gICAgICAgIHJldHVybiBbYWdlbnRJZCwgYWxpYXNJZF07XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBuZXcgSW1wb3J0KCk7XG4gIH1cblxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gQ0RLLWNyZWF0ZWQgQWdlbnQgQWxpYXNcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8qKlxuICAgKiBUaGUgdW5pcXVlIGlkZW50aWZpZXIgb2YgdGhlIGFnZW50LlxuICAgKi9cbiAgcHVibGljIHJlYWRvbmx5IGFnZW50SWQ6IHN0cmluZztcbiAgLyoqXG4gICAqIFRoZSB1bmlxdWUgaWRlbnRpZmllciBvZiB0aGUgYWdlbnQgYWxpYXMuXG4gICAqIEBleGFtcGxlIGBUQ0xDSVRGWlROYFxuICAgKi9cbiAgcHVibGljIHJlYWRvbmx5IGFsaWFzSWQ6IHN0cmluZztcbiAgLyoqXG4gICAqIFRoZSBBUk4gb2YgdGhlIGFnZW50IGFsaWFzLlxuICAgKiBAZXhhbXBsZSBgYXJuOmF3czpiZWRyb2NrOnVzLWVhc3QtMToxMjM0NTY3ODkwMTI6YWdlbnQtYWxpYXMvRE5DSkpZUUtTVS9UQ0xDSVRGWlROYFxuICAgKi9cbiAgcHVibGljIHJlYWRvbmx5IGFsaWFzQXJuOiBzdHJpbmc7XG4gIC8qKlxuICAgKiBUaGUgbmFtZSBmb3IgdGhlIGFnZW50IGFsaWFzLlxuICAgKi9cbiAgcHVibGljIHJlYWRvbmx5IGFsaWFzTmFtZTogc3RyaW5nO1xuXG5cbiAgY29uc3RydWN0b3Ioc2NvcGU6IENvbnN0cnVjdCwgaWQ6IHN0cmluZywgcHJvcHM6IEFnZW50QWxpYXNQcm9wcykge1xuICAgIHN1cGVyKHNjb3BlLCBpZCk7XG5cblxuICAgIGNvbnN0IGFsaWFzID0gbmV3IGJlZHJvY2suQ2ZuQWdlbnRBbGlhcyh0aGlzLCAnTXlDZm5BZ2VudEFsaWFzJywge1xuICAgICAgYWdlbnRBbGlhc05hbWU6IHByb3BzLmFsaWFzTmFtZSA/PyAnbGF0ZXN0JyxcbiAgICAgIGFnZW50SWQ6IHByb3BzLmFnZW50SWQsXG4gICAgICB0YWdzOiBwcm9wcy50YWdzLFxuICAgICAgZGVzY3JpcHRpb246IHByb3BzLmRlc2NyaXB0aW9uLFxuICAgIH0pO1xuXG4gICAgaWYgKHByb3BzLmFnZW50VmVyc2lvbikge1xuICAgICAgYWxpYXMucm91dGluZ0NvbmZpZ3VyYXRpb24gPSBbe1xuICAgICAgICBhZ2VudFZlcnNpb246IHByb3BzLmFnZW50VmVyc2lvbixcbiAgICAgIH1dO1xuICAgIH1cblxuICAgIHRoaXMuYWdlbnRJZCA9IHByb3BzLmFnZW50SWQ7XG4gICAgdGhpcy5hbGlhc0lkID0gYWxpYXMuYXR0ckFnZW50QWxpYXNJZDtcbiAgICB0aGlzLmFsaWFzQXJuID0gYWxpYXMuYXR0ckFnZW50QWxpYXNBcm47XG4gICAgdGhpcy5hbGlhc05hbWUgPSBwcm9wcy5hbGlhc05hbWUgPz8gJ2xhdGVzdCc7XG5cbiAgfVxuXG5cbn0iXX0=