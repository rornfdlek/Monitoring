"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.SharePointDataSource = exports.SharePointObjectType = exports.SharePointDataSourceAuthType = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
/**
 *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance
 *  with the License. A copy of the License is located at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  or in the 'license' file accompanying this file. This file is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES
 *  OR CONDITIONS OF ANY KIND, express or implied. See the License for the specific language governing permissions
 *  and limitations under the License.
 */
const aws_bedrock_1 = require("aws-cdk-lib/aws-bedrock");
const base_data_source_1 = require("./base-data-source");
const utils_1 = require("../../../common/helpers/utils");
/**
 * Represents the authentication types available for connecting to a SharePoint data source.
 */
var SharePointDataSourceAuthType;
(function (SharePointDataSourceAuthType) {
    /**
     * OAuth 2.0 Client Credentials flow for authentication with SharePoint.
     * Your secret authentication credentials in AWS Secrets Manager should include:
     * - `username`: The admin username for SharePoint authentication
     * - `password`: The admin password associated with the username
     * - `clientId`: The client ID (also known as application ID)
     * - `clientSecret`: The client secret
     */
    SharePointDataSourceAuthType["OAUTH2_CLIENT_CREDENTIALS"] = "OAUTH2_CLIENT_CREDENTIALS";
})(SharePointDataSourceAuthType || (exports.SharePointDataSourceAuthType = SharePointDataSourceAuthType = {}));
/**
 * Represents the SharePoint object types that can be accessed by the data source connector.
 */
var SharePointObjectType;
(function (SharePointObjectType) {
    /**
     * Represents a SharePoint page, which typically contains web parts and content.
     */
    SharePointObjectType["PAGE"] = "Page";
    /**
     * Represents a calendar event in SharePoint.
     */
    SharePointObjectType["EVENT"] = "Event";
    /**
     * Represents a file stored in SharePoint document libraries.
     */
    SharePointObjectType["FILE"] = "File";
})(SharePointObjectType || (exports.SharePointObjectType = SharePointObjectType = {}));
/**
 * Sets up an data source to be added to a knowledge base.
 */
class SharePointDataSource extends base_data_source_1.DataSourceNew {
    constructor(scope, id, props) {
        super(scope, id);
        // Assign attributes
        this.knowledgeBase = props.knowledgeBase;
        this.dataSourceType = base_data_source_1.DataSourceType.SHAREPOINT;
        this.dataSourceName = props.dataSourceName ?? (0, utils_1.generatePhysicalNameV2)(this, 'sharepoint-ds', { maxLength: 40, lower: true, separator: '-' });
        ;
        this.siteUrls = props.siteUrls;
        this.domain = props.domain;
        this.authSecret = props.authSecret;
        this.kmsKey = props.kmsKey;
        // ------------------------------------------------------
        // Manage permissions for the data source
        // ------------------------------------------------------
        this.handleCommonPermissions(props);
        this.authSecret.grantRead(this.knowledgeBase.role);
        // ------------------------------------------------------
        // L1 Instantiation
        // ------------------------------------------------------
        this.__resource = new aws_bedrock_1.CfnDataSource(this, 'DataSource', {
            ...this.formatAsCfnProps(props, {
                type: this.dataSourceType,
                sharePointConfiguration: {
                    sourceConfiguration: {
                        authType: SharePointDataSourceAuthType.OAUTH2_CLIENT_CREDENTIALS,
                        credentialsSecretArn: this.authSecret.secretArn,
                        hostType: 'ONLINE',
                        domain: props.domain,
                        siteUrls: this.siteUrls,
                        tenantId: props.tenantId,
                    },
                    crawlerConfiguration: (props.filters) ? ({
                        filterConfiguration: {
                            type: 'PATTERN',
                            patternObjectFilter: {
                                filters: props.filters?.map(item => ({
                                    objectType: item.objectType,
                                    inclusionFilters: item.includePatterns,
                                    exclusionFilters: item.excludePatterns,
                                })),
                            },
                        },
                    }) : undefined,
                },
            }),
        });
        this.dataSourceId = this.__resource.attrDataSourceId;
    }
}
exports.SharePointDataSource = SharePointDataSource;
_a = JSII_RTTI_SYMBOL_1;
SharePointDataSource[_a] = { fqn: "@cdklabs/generative-ai-cdk-constructs.bedrock.SharePointDataSource", version: "0.1.285" };
//# sourceMappingURL=data:application/json;base64,