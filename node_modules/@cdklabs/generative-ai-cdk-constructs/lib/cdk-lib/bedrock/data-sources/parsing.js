"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ParsingStategy = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const aws_iam_1 = require("aws-cdk-lib/aws-iam");
const default_parsing_prompt_1 = require("./default-parsing-prompt");
/**
 * Enum representing the types of parsing strategies available for Amazon Bedrock Knowledge Bases.
 */
var ParsingStategyType;
(function (ParsingStategyType) {
    /**
     * Uses a Bedrock Foundation Model for advanced parsing of non-textual information from documents.
     */
    ParsingStategyType["FOUNDATION_MODEL"] = "BEDROCK_FOUNDATION_MODEL";
})(ParsingStategyType || (ParsingStategyType = {}));
/**
 * Represents an advanced parsing strategy configuration for Knowledge Base ingestion.
 * @see https://docs.aws.amazon.com/bedrock/latest/userguide/kb-chunking-parsing.html#kb-advanced-parsing
 */
class ParsingStategy {
    // ------------------------------------------------------
    // FM Parsing Strategy
    // ------------------------------------------------------
    /**
     * Creates a Foundation Model-based parsing strategy for extracting non-textual information
     * from documents such as tables and charts.
     * - Additional costs apply when using advanced parsing due to foundation model usage.
     * - There are limits on file types (PDF) and total data that can be parsed using advanced parsing.
     * @see https://docs.aws.amazon.com/bedrock/latest/userguide/knowledge-base-ds.html#kb-ds-supported-doc-formats-limits
     */
    static foundationModel(props) {
        class FoundationModelTransformation extends ParsingStategy {
            constructor() {
                super(...arguments);
                /** The CloudFormation property representation of this configuration */
                this.configuration = {
                    bedrockFoundationModelConfiguration: {
                        modelArn: props.parsingModel.invokableArn,
                        parsingPrompt: {
                            parsingPromptText: props.parsingPrompt ?? default_parsing_prompt_1.DEFAULT_PARSING_PROMPT,
                        },
                    },
                    parsingStrategy: ParsingStategyType.FOUNDATION_MODEL,
                };
            }
            generatePolicyStatements() {
                return [
                    new aws_iam_1.PolicyStatement({
                        actions: ['bedrock:InvokeModel'],
                        resources: [props.parsingModel.invokableArn],
                    }),
                ];
            }
        }
        return new FoundationModelTransformation();
    }
}
exports.ParsingStategy = ParsingStategy;
_a = JSII_RTTI_SYMBOL_1;
ParsingStategy[_a] = { fqn: "@cdklabs/generative-ai-cdk-constructs.bedrock.ParsingStategy", version: "0.1.285" };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFyc2luZy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jZGstbGliL2JlZHJvY2svZGF0YS1zb3VyY2VzL3BhcnNpbmcudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFjQSxpREFBc0Q7QUFDdEQscUVBQWtFO0FBR2xFOztHQUVHO0FBQ0gsSUFBSyxrQkFLSjtBQUxELFdBQUssa0JBQWtCO0lBQ3JCOztPQUVHO0lBQ0gsbUVBQTZDLENBQUE7QUFDL0MsQ0FBQyxFQUxJLGtCQUFrQixLQUFsQixrQkFBa0IsUUFLdEI7QUFvQkQ7OztHQUdHO0FBQ0gsTUFBc0IsY0FBYztJQUNsQyx5REFBeUQ7SUFDekQsc0JBQXNCO0lBQ3RCLHlEQUF5RDtJQUN6RDs7Ozs7O09BTUc7SUFDSSxNQUFNLENBQUMsZUFBZSxDQUFDLEtBQXlDO1FBQ3JFLE1BQU0sNkJBQThCLFNBQVEsY0FBYztZQUExRDs7Z0JBQ0UsdUVBQXVFO2dCQUN2RCxrQkFBYSxHQUFHO29CQUM5QixtQ0FBbUMsRUFBRTt3QkFDbkMsUUFBUSxFQUFFLEtBQUssQ0FBQyxZQUFZLENBQUMsWUFBWTt3QkFDekMsYUFBYSxFQUFFOzRCQUNiLGlCQUFpQixFQUFFLEtBQUssQ0FBQyxhQUFhLElBQUksK0NBQXNCO3lCQUNqRTtxQkFDRjtvQkFDRCxlQUFlLEVBQUUsa0JBQWtCLENBQUMsZ0JBQWdCO2lCQUNyRCxDQUFDO1lBVUosQ0FBQztZQVJRLHdCQUF3QjtnQkFDN0IsT0FBTztvQkFDTCxJQUFJLHlCQUFlLENBQUM7d0JBQ2xCLE9BQU8sRUFBRSxDQUFDLHFCQUFxQixDQUFDO3dCQUNoQyxTQUFTLEVBQUUsQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDLFlBQVksQ0FBQztxQkFDN0MsQ0FBQztpQkFDSCxDQUFDO1lBQ0osQ0FBQztTQUNGO1FBRUQsT0FBTyxJQUFJLDZCQUE2QixFQUFFLENBQUM7SUFDN0MsQ0FBQzs7QUFuQ0gsd0NBMkNDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiAgQ29weXJpZ2h0IEFtYXpvbi5jb20sIEluYy4gb3IgaXRzIGFmZmlsaWF0ZXMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIikuIFlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2VcbiAqICB3aXRoIHRoZSBMaWNlbnNlLiBBIGNvcHkgb2YgdGhlIExpY2Vuc2UgaXMgbG9jYXRlZCBhdFxuICpcbiAqICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogIG9yIGluIHRoZSAnbGljZW5zZScgZmlsZSBhY2NvbXBhbnlpbmcgdGhpcyBmaWxlLiBUaGlzIGZpbGUgaXMgZGlzdHJpYnV0ZWQgb24gYW4gJ0FTIElTJyBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTXG4gKiAgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZXhwcmVzcyBvciBpbXBsaWVkLiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnNcbiAqICBhbmQgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgQ2ZuRGF0YVNvdXJjZSB9IGZyb20gJ2F3cy1jZGstbGliL2F3cy1iZWRyb2NrJztcbmltcG9ydCB7IFBvbGljeVN0YXRlbWVudCB9IGZyb20gJ2F3cy1jZGstbGliL2F3cy1pYW0nO1xuaW1wb3J0IHsgREVGQVVMVF9QQVJTSU5HX1BST01QVCB9IGZyb20gJy4vZGVmYXVsdC1wYXJzaW5nLXByb21wdCc7XG5pbXBvcnQgeyBJSW52b2thYmxlIH0gZnJvbSAnLi4vbW9kZWxzJztcblxuLyoqXG4gKiBFbnVtIHJlcHJlc2VudGluZyB0aGUgdHlwZXMgb2YgcGFyc2luZyBzdHJhdGVnaWVzIGF2YWlsYWJsZSBmb3IgQW1hem9uIEJlZHJvY2sgS25vd2xlZGdlIEJhc2VzLlxuICovXG5lbnVtIFBhcnNpbmdTdGF0ZWd5VHlwZSB7XG4gIC8qKlxuICAgKiBVc2VzIGEgQmVkcm9jayBGb3VuZGF0aW9uIE1vZGVsIGZvciBhZHZhbmNlZCBwYXJzaW5nIG9mIG5vbi10ZXh0dWFsIGluZm9ybWF0aW9uIGZyb20gZG9jdW1lbnRzLlxuICAgKi9cbiAgRk9VTkRBVElPTl9NT0RFTCA9ICdCRURST0NLX0ZPVU5EQVRJT05fTU9ERUwnLFxufVxuXG4vKipcbiAqIFByb3BlcnRpZXMgZm9yIGNvbmZpZ3VyaW5nIGEgRm91bmRhdGlvbiBNb2RlbCBwYXJzaW5nIHN0cmF0ZWd5LlxuICovXG5leHBvcnQgaW50ZXJmYWNlIEZvdW5kYXRpb25Nb2RlbFBhcnNpbmdTdGF0ZWd5UHJvcHMge1xuICAvKipcbiAgICogVGhlIEZvdW5kYXRpb24gTW9kZWwgdG8gdXNlIGZvciBwYXJzaW5nIG5vbi10ZXh0dWFsIGluZm9ybWF0aW9uLlxuICAgKiBDdXJyZW50bHkgc3VwcG9ydGVkIG1vZGVscyBhcmUgQ2xhdWRlIDMgU29ubmV0IGFuZCBDbGF1ZGUgMyBIYWlrdS5cbiAgICovXG4gIHJlYWRvbmx5IHBhcnNpbmdNb2RlbDogSUludm9rYWJsZTtcblxuICAvKipcbiAgICogQ3VzdG9tIHByb21wdCB0byBpbnN0cnVjdCB0aGUgcGFyc2VyIG9uIGhvdyB0byBpbnRlcnByZXQgdGhlIGRvY3VtZW50LlxuICAgKlxuICAgKiBAZGVmYXVsdCAtIFVzZXMgdGhlIGRlZmF1bHQgaW5zdHJ1Y3Rpb24gcHJvbXB0IGFzIHByb3ZpZGVkIGluIHRoZSBBV1MgQ29uc29sZS5cbiAgICovXG4gIHJlYWRvbmx5IHBhcnNpbmdQcm9tcHQ/OiBzdHJpbmc7XG59XG5cbi8qKlxuICogUmVwcmVzZW50cyBhbiBhZHZhbmNlZCBwYXJzaW5nIHN0cmF0ZWd5IGNvbmZpZ3VyYXRpb24gZm9yIEtub3dsZWRnZSBCYXNlIGluZ2VzdGlvbi5cbiAqIEBzZWUgaHR0cHM6Ly9kb2NzLmF3cy5hbWF6b24uY29tL2JlZHJvY2svbGF0ZXN0L3VzZXJndWlkZS9rYi1jaHVua2luZy1wYXJzaW5nLmh0bWwja2ItYWR2YW5jZWQtcGFyc2luZ1xuICovXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgUGFyc2luZ1N0YXRlZ3kge1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gRk0gUGFyc2luZyBTdHJhdGVneVxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBGb3VuZGF0aW9uIE1vZGVsLWJhc2VkIHBhcnNpbmcgc3RyYXRlZ3kgZm9yIGV4dHJhY3Rpbmcgbm9uLXRleHR1YWwgaW5mb3JtYXRpb25cbiAgICogZnJvbSBkb2N1bWVudHMgc3VjaCBhcyB0YWJsZXMgYW5kIGNoYXJ0cy5cbiAgICogLSBBZGRpdGlvbmFsIGNvc3RzIGFwcGx5IHdoZW4gdXNpbmcgYWR2YW5jZWQgcGFyc2luZyBkdWUgdG8gZm91bmRhdGlvbiBtb2RlbCB1c2FnZS5cbiAgICogLSBUaGVyZSBhcmUgbGltaXRzIG9uIGZpbGUgdHlwZXMgKFBERikgYW5kIHRvdGFsIGRhdGEgdGhhdCBjYW4gYmUgcGFyc2VkIHVzaW5nIGFkdmFuY2VkIHBhcnNpbmcuXG4gICAqIEBzZWUgaHR0cHM6Ly9kb2NzLmF3cy5hbWF6b24uY29tL2JlZHJvY2svbGF0ZXN0L3VzZXJndWlkZS9rbm93bGVkZ2UtYmFzZS1kcy5odG1sI2tiLWRzLXN1cHBvcnRlZC1kb2MtZm9ybWF0cy1saW1pdHNcbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgZm91bmRhdGlvbk1vZGVsKHByb3BzOiBGb3VuZGF0aW9uTW9kZWxQYXJzaW5nU3RhdGVneVByb3BzKTogUGFyc2luZ1N0YXRlZ3kge1xuICAgIGNsYXNzIEZvdW5kYXRpb25Nb2RlbFRyYW5zZm9ybWF0aW9uIGV4dGVuZHMgUGFyc2luZ1N0YXRlZ3kge1xuICAgICAgLyoqIFRoZSBDbG91ZEZvcm1hdGlvbiBwcm9wZXJ0eSByZXByZXNlbnRhdGlvbiBvZiB0aGlzIGNvbmZpZ3VyYXRpb24gKi9cbiAgICAgIHB1YmxpYyByZWFkb25seSBjb25maWd1cmF0aW9uID0ge1xuICAgICAgICBiZWRyb2NrRm91bmRhdGlvbk1vZGVsQ29uZmlndXJhdGlvbjoge1xuICAgICAgICAgIG1vZGVsQXJuOiBwcm9wcy5wYXJzaW5nTW9kZWwuaW52b2thYmxlQXJuLFxuICAgICAgICAgIHBhcnNpbmdQcm9tcHQ6IHtcbiAgICAgICAgICAgIHBhcnNpbmdQcm9tcHRUZXh0OiBwcm9wcy5wYXJzaW5nUHJvbXB0ID8/IERFRkFVTFRfUEFSU0lOR19QUk9NUFQsXG4gICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgICAgcGFyc2luZ1N0cmF0ZWd5OiBQYXJzaW5nU3RhdGVneVR5cGUuRk9VTkRBVElPTl9NT0RFTCxcbiAgICAgIH07XG5cbiAgICAgIHB1YmxpYyBnZW5lcmF0ZVBvbGljeVN0YXRlbWVudHMoKTogUG9saWN5U3RhdGVtZW50W10ge1xuICAgICAgICByZXR1cm4gW1xuICAgICAgICAgIG5ldyBQb2xpY3lTdGF0ZW1lbnQoe1xuICAgICAgICAgICAgYWN0aW9uczogWydiZWRyb2NrOkludm9rZU1vZGVsJ10sXG4gICAgICAgICAgICByZXNvdXJjZXM6IFtwcm9wcy5wYXJzaW5nTW9kZWwuaW52b2thYmxlQXJuXSxcbiAgICAgICAgICB9KSxcbiAgICAgICAgXTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IEZvdW5kYXRpb25Nb2RlbFRyYW5zZm9ybWF0aW9uKCk7XG4gIH1cbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIFByb3BlcnRpZXNcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8qKiBUaGUgQ2xvdWRGb3JtYXRpb24gcHJvcGVydHkgcmVwcmVzZW50YXRpb24gb2YgdGhpcyBjb25maWd1cmF0aW9uICovXG4gIHB1YmxpYyBhYnN0cmFjdCBjb25maWd1cmF0aW9uOiBDZm5EYXRhU291cmNlLlBhcnNpbmdDb25maWd1cmF0aW9uUHJvcGVydHk7XG5cbiAgcHVibGljIGFic3RyYWN0IGdlbmVyYXRlUG9saWN5U3RhdGVtZW50cygpOiBQb2xpY3lTdGF0ZW1lbnRbXTtcbn1cbiJdfQ==