"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConfluenceDataSource = exports.ConfluenceObjectType = exports.ConfluenceDataSourceAuthType = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
/**
 *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance
 *  with the License. A copy of the License is located at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  or in the 'license' file accompanying this file. This file is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES
 *  OR CONDITIONS OF ANY KIND, express or implied. See the License for the specific language governing permissions
 *  and limitations under the License.
 */
const aws_bedrock_1 = require("aws-cdk-lib/aws-bedrock");
const base_data_source_1 = require("./base-data-source");
const utils_1 = require("../../../common/helpers/utils");
/**
 * The different authentication types available to connect to your Confluence instance.
 * @see https://docs.aws.amazon.com/bedrock/latest/userguide/confluence-data-source-connector.html#configuration-confluence-connector
 */
var ConfluenceDataSourceAuthType;
(function (ConfluenceDataSourceAuthType) {
    /**
     * Your secret authentication credentials in AWS Secrets Manager should include:
     * - `confluenceAppKey`
     * - `confluenceAppSecret`
     * - `confluenceAccessToken`
     * - `confluenceRefreshToken`
     */
    ConfluenceDataSourceAuthType["OAUTH2_CLIENT_CREDENTIALS"] = "OAUTH2_CLIENT_CREDENTIALS";
    /**
     * Your secret authentication credentials in AWS Secrets Manager should include:
     *  - `username` (email of admin account)
     *  - `password` (API token)
     */
    ConfluenceDataSourceAuthType["BASIC"] = "BASIC";
})(ConfluenceDataSourceAuthType || (exports.ConfluenceDataSourceAuthType = ConfluenceDataSourceAuthType = {}));
/**
 * Represents the different types of content objects in Confluence that can be
 * crawled by the data source.
 */
var ConfluenceObjectType;
(function (ConfluenceObjectType) {
    ConfluenceObjectType["SPACE"] = "Space";
    ConfluenceObjectType["PAGE"] = "Page";
    ConfluenceObjectType["BLOG"] = "Blog";
    ConfluenceObjectType["COMMENT"] = "Comment";
    ConfluenceObjectType["ATTACHMENT"] = "Attachment";
})(ConfluenceObjectType || (exports.ConfluenceObjectType = ConfluenceObjectType = {}));
/**
 * Sets up a Confluence Data Source to be added to a knowledge base.
 * @see https://docs.aws.amazon.com/bedrock/latest/userguide/confluence-data-source-connector.html
 */
class ConfluenceDataSource extends base_data_source_1.DataSourceNew {
    constructor(scope, id, props) {
        super(scope, id);
        // Assign common attributes
        this.knowledgeBase = props.knowledgeBase;
        this.dataSourceType = base_data_source_1.DataSourceType.CONFLUENCE;
        this.dataSourceName = props.dataSourceName ?? (0, utils_1.generatePhysicalNameV2)(this, 'confluence-ds', { maxLength: 40, lower: true, separator: '-' });
        this.kmsKey = props.kmsKey;
        // Assign unique attributes
        this.confluenceUrl = props.confluenceUrl;
        this.authSecret = props.authSecret;
        // ------------------------------------------------------
        // Manage permissions for the data source
        // ------------------------------------------------------
        this.handleCommonPermissions(props);
        this.authSecret.grantRead(this.knowledgeBase.role);
        // Grant write permissions to the knowledge base role for updating the secret.
        // This is necessary when using OAuth 2.0 authentication with a refresh token.
        if (props.authType === ConfluenceDataSourceAuthType.OAUTH2_CLIENT_CREDENTIALS) {
            this.authSecret.grantWrite(this.knowledgeBase.role);
        }
        // ------------------------------------------------------
        // L1 Instantiation
        // ------------------------------------------------------
        this.__resource = new aws_bedrock_1.CfnDataSource(this, 'DataSource', {
            ...this.formatAsCfnProps(props, {
                type: this.dataSourceType,
                confluenceConfiguration: {
                    sourceConfiguration: {
                        authType: props.authType ?? ConfluenceDataSourceAuthType.OAUTH2_CLIENT_CREDENTIALS,
                        credentialsSecretArn: this.authSecret.secretArn,
                        hostUrl: this.confluenceUrl,
                        hostType: 'SAAS',
                    },
                    crawlerConfiguration: (props.filters) ? ({
                        filterConfiguration: {
                            type: 'PATTERN',
                            patternObjectFilter: {
                                filters: props.filters?.map(item => ({
                                    objectType: item.objectType,
                                    inclusionFilters: item.includePatterns,
                                    exclusionFilters: item.excludePatterns,
                                })),
                            },
                        },
                    }) : undefined,
                },
            }),
        });
        this.dataSourceId = this.__resource.attrDataSourceId;
    }
}
exports.ConfluenceDataSource = ConfluenceDataSource;
_a = JSII_RTTI_SYMBOL_1;
ConfluenceDataSource[_a] = { fqn: "@cdklabs/generative-ai-cdk-constructs.bedrock.ConfluenceDataSource", version: "0.1.285" };
//# sourceMappingURL=data:application/json;base64,