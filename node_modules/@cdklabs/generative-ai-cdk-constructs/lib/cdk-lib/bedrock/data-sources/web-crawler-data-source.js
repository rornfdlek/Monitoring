"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.WebCrawlerDataSource = exports.CrawlingScope = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
/**
 *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance
 *  with the License. A copy of the License is located at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  or in the 'license' file accompanying this file. This file is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES
 *  OR CONDITIONS OF ANY KIND, express or implied. See the License for the specific language governing permissions
 *  and limitations under the License.
 */
const aws_bedrock_1 = require("aws-cdk-lib/aws-bedrock");
const base_data_source_1 = require("./base-data-source");
const utils_1 = require("../../../common/helpers/utils");
/**
 * The scope of the crawling.
 */
var CrawlingScope;
(function (CrawlingScope) {
    /**
     * Crawls only web pages that belong to the same host or primary domain.
     */
    CrawlingScope["HOST_ONLY"] = "HOST_ONLY";
    /**
     * Includes subdomains in addition to the host or primary domain, i.e.
     * web pages that contain "aws.amazon.com" can also include
     * sub domain "docs.aws.amazon.com"
     */
    CrawlingScope["SUBDOMAINS"] = "SUBDOMAINS";
    /**
     * Limit crawling to web pages that belong to the same host and with the
     * same initial URL path.
     */
    CrawlingScope["DEFAULT"] = "DEFAULT";
})(CrawlingScope || (exports.CrawlingScope = CrawlingScope = {}));
/**
 * Sets up a web crawler data source to be added to a knowledge base.
 */
class WebCrawlerDataSource extends base_data_source_1.DataSourceNew {
    constructor(scope, id, props) {
        super(scope, id);
        // Assign attributes
        this.knowledgeBase = props.knowledgeBase;
        this.dataSourceType = base_data_source_1.DataSourceType.WEB_CRAWLER;
        this.dataSourceName = props.dataSourceName ?? (0, utils_1.generatePhysicalNameV2)(this, 'crawler-ds', { maxLength: 40, lower: true, separator: '-' });
        ;
        this.kmsKey = props.kmsKey;
        this.crawlingRate = props.crawlingRate ?? 300;
        this.siteUrls = props.sourceUrls;
        // ------------------------------------------------------
        // Manage permissions for the data source
        // ------------------------------------------------------
        this.handleCommonPermissions(props);
        // ------------------------------------------------------
        // L1 Instantiation
        // ------------------------------------------------------
        this.__resource = new aws_bedrock_1.CfnDataSource(this, 'DataSource', {
            ...this.formatAsCfnProps(props, {
                type: this.dataSourceType,
                webConfiguration: {
                    crawlerConfiguration: {
                        crawlerLimits: {
                            rateLimit: this.crawlingRate,
                        },
                        scope: (props.crawlingScope !== CrawlingScope.DEFAULT) ? props.crawlingScope : undefined, //?? CrawlingScope.HOST_ONLY,
                        inclusionFilters: props.filters?.includePatterns,
                        exclusionFilters: props.filters?.excludePatterns,
                    },
                    sourceConfiguration: {
                        urlConfiguration: {
                            seedUrls: props.sourceUrls.map(item => ({ url: item })),
                        },
                    },
                },
            }),
        });
        this.dataSourceId = this.__resource.attrDataSourceId;
    }
}
exports.WebCrawlerDataSource = WebCrawlerDataSource;
_a = JSII_RTTI_SYMBOL_1;
WebCrawlerDataSource[_a] = { fqn: "@cdklabs/generative-ai-cdk-constructs.bedrock.WebCrawlerDataSource", version: "0.1.285" };
//# sourceMappingURL=data:application/json;base64,