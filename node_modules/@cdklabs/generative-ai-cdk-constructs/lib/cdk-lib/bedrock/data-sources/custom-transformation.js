"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.CustomTransformation = exports.TransformationStep = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
/**
 *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance
 *  with the License. A copy of the License is located at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  or in the 'license' file accompanying this file. This file is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES
 *  OR CONDITIONS OF ANY KIND, express or implied. See the License for the specific language governing permissions
 *  and limitations under the License.
 */
const aws_cdk_lib_1 = require("aws-cdk-lib");
const aws_iam_1 = require("aws-cdk-lib/aws-iam");
/**
 * Defines the step in the ingestion process where the custom transformation is applied.
 */
var TransformationStep;
(function (TransformationStep) {
    /**
     * Processes documents after they have been converted into chunks.
     * This allows for custom chunk-level metadata addition or custom post-chunking logic.
     */
    TransformationStep["POST_CHUNKING"] = "POST_CHUNKING";
})(TransformationStep || (exports.TransformationStep = TransformationStep = {}));
/**
 * Represents a custom transformation configuration for a data source ingestion.
 * @see https://docs.aws.amazon.com/bedrock/latest/userguide/kb-chunking-parsing.html#kb-custom-transformation
 */
class CustomTransformation {
    // ------------------------------------------------------
    // Lambda Transformation Strategy
    // ------------------------------------------------------
    /**
     * This feature allows you to use a Lambda function to inject your own logic
     * into the knowledge base ingestion process.
     * @see https://github.com/aws-samples/amazon-bedrock-samples/blob/main/knowledge-bases/features-examples/02-optimizing-accuracy-retrieved-results/advanced_chunking_options.ipynb
     */
    static lambda(props) {
        class LambdaCustomTransformation extends CustomTransformation {
            constructor() {
                super(...arguments);
                this.configuration = {
                    intermediateStorage: {
                        s3Location: {
                            uri: props.s3BucketUri,
                        },
                    },
                    transformations: [
                        {
                            stepToApply: TransformationStep.POST_CHUNKING,
                            // To uncomment when more steps are available
                            // stepToApply: props.stepToApply ?? TransformationStep.POST_CHUNKING,
                            transformationFunction: {
                                transformationLambdaConfiguration: {
                                    lambdaArn: props.lambdaFunction.functionArn,
                                },
                            },
                        },
                    ],
                };
            }
            generatePolicyStatements(scope) {
                return [
                    new aws_iam_1.PolicyStatement({
                        actions: ['lambda:InvokeFunction'],
                        resources: [`${props.lambdaFunction.functionArn}:*`],
                        conditions: {
                            StringEquals: {
                                'aws:ResourceAccount': aws_cdk_lib_1.Stack.of(scope).account,
                            },
                        },
                    }),
                ];
            }
        }
        return new LambdaCustomTransformation();
    }
}
exports.CustomTransformation = CustomTransformation;
_a = JSII_RTTI_SYMBOL_1;
CustomTransformation[_a] = { fqn: "@cdklabs/generative-ai-cdk-constructs.bedrock.CustomTransformation", version: "0.1.285" };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3VzdG9tLXRyYW5zZm9ybWF0aW9uLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2Nkay1saWIvYmVkcm9jay9kYXRhLXNvdXJjZXMvY3VzdG9tLXRyYW5zZm9ybWF0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7Ozs7Ozs7Ozs7O0dBV0c7QUFFSCw2Q0FBb0M7QUFFcEMsaURBQXNEO0FBSXREOztHQUVHO0FBQ0gsSUFBWSxrQkFNWDtBQU5ELFdBQVksa0JBQWtCO0lBQzVCOzs7T0FHRztJQUNILHFEQUErQixDQUFBO0FBQ2pDLENBQUMsRUFOVyxrQkFBa0Isa0NBQWxCLGtCQUFrQixRQU03QjtBQTBCRDs7O0dBR0c7QUFDSCxNQUFzQixvQkFBb0I7SUFFeEMseURBQXlEO0lBQ3pELGlDQUFpQztJQUNqQyx5REFBeUQ7SUFDekQ7Ozs7T0FJRztJQUNJLE1BQU0sQ0FBQyxNQUFNLENBQUMsS0FBc0M7UUFFekQsTUFBTSwwQkFBMkIsU0FBUSxvQkFBb0I7WUFBN0Q7O2dCQUNrQixrQkFBYSxHQUFHO29CQUM5QixtQkFBbUIsRUFBRTt3QkFDbkIsVUFBVSxFQUFFOzRCQUNWLEdBQUcsRUFBRSxLQUFLLENBQUMsV0FBVzt5QkFDdkI7cUJBQ0Y7b0JBQ0QsZUFBZSxFQUFFO3dCQUNmOzRCQUNFLFdBQVcsRUFBRSxrQkFBa0IsQ0FBQyxhQUFhOzRCQUM3Qyw2Q0FBNkM7NEJBQzdDLHNFQUFzRTs0QkFDdEUsc0JBQXNCLEVBQUU7Z0NBQ3RCLGlDQUFpQyxFQUFFO29DQUNqQyxTQUFTLEVBQUUsS0FBSyxDQUFDLGNBQWMsQ0FBQyxXQUFXO2lDQUM1Qzs2QkFDRjt5QkFDRjtxQkFDRjtpQkFDRixDQUFDO1lBY0osQ0FBQztZQWJRLHdCQUF3QixDQUFDLEtBQWdCO2dCQUM5QyxPQUFPO29CQUNMLElBQUkseUJBQWUsQ0FBQzt3QkFDbEIsT0FBTyxFQUFFLENBQUMsdUJBQXVCLENBQUM7d0JBQ2xDLFNBQVMsRUFBRSxDQUFDLEdBQUcsS0FBSyxDQUFDLGNBQWMsQ0FBQyxXQUFXLElBQUksQ0FBQzt3QkFDcEQsVUFBVSxFQUFFOzRCQUNWLFlBQVksRUFBRTtnQ0FDWixxQkFBcUIsRUFBRSxtQkFBSyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxPQUFPOzZCQUMvQzt5QkFDRjtxQkFDRixDQUFDO2lCQUNILENBQUM7WUFDSixDQUFDO1NBQ0Y7UUFDRCxPQUFPLElBQUksMEJBQTBCLEVBQUUsQ0FBQztJQUMxQyxDQUFDOztBQS9DSCxvREEwREMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqICBDb3B5cmlnaHQgQW1hem9uLmNvbSwgSW5jLiBvciBpdHMgYWZmaWxpYXRlcy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiAgTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKS4gWW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZVxuICogIHdpdGggdGhlIExpY2Vuc2UuIEEgY29weSBvZiB0aGUgTGljZW5zZSBpcyBsb2NhdGVkIGF0XG4gKlxuICogICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiAgb3IgaW4gdGhlICdsaWNlbnNlJyBmaWxlIGFjY29tcGFueWluZyB0aGlzIGZpbGUuIFRoaXMgZmlsZSBpcyBkaXN0cmlidXRlZCBvbiBhbiAnQVMgSVMnIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVNcbiAqICBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBleHByZXNzIG9yIGltcGxpZWQuIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9uc1xuICogIGFuZCBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBTdGFjayB9IGZyb20gJ2F3cy1jZGstbGliJztcbmltcG9ydCB7IENmbkRhdGFTb3VyY2UgfSBmcm9tICdhd3MtY2RrLWxpYi9hd3MtYmVkcm9jayc7XG5pbXBvcnQgeyBQb2xpY3lTdGF0ZW1lbnQgfSBmcm9tICdhd3MtY2RrLWxpYi9hd3MtaWFtJztcbmltcG9ydCB7IElGdW5jdGlvbiB9IGZyb20gJ2F3cy1jZGstbGliL2F3cy1sYW1iZGEnO1xuaW1wb3J0IHsgQ29uc3RydWN0IH0gZnJvbSAnY29uc3RydWN0cyc7XG5cbi8qKlxuICogRGVmaW5lcyB0aGUgc3RlcCBpbiB0aGUgaW5nZXN0aW9uIHByb2Nlc3Mgd2hlcmUgdGhlIGN1c3RvbSB0cmFuc2Zvcm1hdGlvbiBpcyBhcHBsaWVkLlxuICovXG5leHBvcnQgZW51bSBUcmFuc2Zvcm1hdGlvblN0ZXAge1xuICAvKipcbiAgICogUHJvY2Vzc2VzIGRvY3VtZW50cyBhZnRlciB0aGV5IGhhdmUgYmVlbiBjb252ZXJ0ZWQgaW50byBjaHVua3MuXG4gICAqIFRoaXMgYWxsb3dzIGZvciBjdXN0b20gY2h1bmstbGV2ZWwgbWV0YWRhdGEgYWRkaXRpb24gb3IgY3VzdG9tIHBvc3QtY2h1bmtpbmcgbG9naWMuXG4gICAqL1xuICBQT1NUX0NIVU5LSU5HID0gJ1BPU1RfQ0hVTktJTkcnLFxufVxuXG4vKipcbiAqIFByb3BlcnRpZXMgZm9yIGNvbmZpZ3VyaW5nIGEgTGFtYmRhLWJhc2VkIGN1c3RvbSB0cmFuc2Zvcm1hdGlvbi5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBMYW1iZGFDdXN0b21UcmFuc2Zvcm1hdGlvblByb3BzIHtcbiAgLyoqXG4gICAqIFRoZSBMYW1iZGEgZnVuY3Rpb24gdG8gdXNlIGZvciBjdXN0b20gZG9jdW1lbnQgcHJvY2Vzc2luZy5cbiAgICovXG4gIHJlYWRvbmx5IGxhbWJkYUZ1bmN0aW9uOiBJRnVuY3Rpb247XG5cbiAgLyoqXG4gICAqIEFuIFMzIGJ1Y2tldCBVUkwvcGF0aCB0byBzdG9yZSBpbnB1dCBkb2N1bWVudHMgZm9yIExhbWJkYSBwcm9jZXNzaW5nXG4gICAqIGFuZCB0byBzdG9yZSB0aGUgb3V0cHV0IG9mIHRoZSBwcm9jZXNzZWQgZG9jdW1lbnRzLlxuICAgKiBAZXhhbXBsZSBcInMzOi8vbXktYnVja2V0L2NodW5rLXByb2Nlc3Nvci9cIlxuICAgKi9cbiAgcmVhZG9ubHkgczNCdWNrZXRVcmk6IHN0cmluZztcblxuICAvLyBDb21tZW50ZWQgYXMgb25seSBvbmUgc3VwcG9ydGVkIGF0IHRoZSB0aW1lIHRoaXMgY29kZSBpcyB3cml0dGVuLlxuICAvLyAvKipcbiAgLy8gICogV2hlbiBpbiB0aGUgaW5nZXN0aW9uIHByb2Nlc3MgdG8gYXBwbHkgdGhlIHRyYW5zZm9ybWF0aW9uIHN0ZXAuXG4gIC8vICAqIEBkZWZhdWx0IFRyYW5zZm9ybWF0aW9uU3RlcC5QT1NUX0NIVU5LSU5HXG4gIC8vICAqL1xuICAvLyByZWFkb25seSBzdGVwVG9BcHBseT86IFRyYW5zZm9ybWF0aW9uU3RlcDtcbn1cblxuLyoqXG4gKiBSZXByZXNlbnRzIGEgY3VzdG9tIHRyYW5zZm9ybWF0aW9uIGNvbmZpZ3VyYXRpb24gZm9yIGEgZGF0YSBzb3VyY2UgaW5nZXN0aW9uLlxuICogQHNlZSBodHRwczovL2RvY3MuYXdzLmFtYXpvbi5jb20vYmVkcm9jay9sYXRlc3QvdXNlcmd1aWRlL2tiLWNodW5raW5nLXBhcnNpbmcuaHRtbCNrYi1jdXN0b20tdHJhbnNmb3JtYXRpb25cbiAqL1xuZXhwb3J0IGFic3RyYWN0IGNsYXNzIEN1c3RvbVRyYW5zZm9ybWF0aW9uIHtcblxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gTGFtYmRhIFRyYW5zZm9ybWF0aW9uIFN0cmF0ZWd5XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvKipcbiAgICogVGhpcyBmZWF0dXJlIGFsbG93cyB5b3UgdG8gdXNlIGEgTGFtYmRhIGZ1bmN0aW9uIHRvIGluamVjdCB5b3VyIG93biBsb2dpY1xuICAgKiBpbnRvIHRoZSBrbm93bGVkZ2UgYmFzZSBpbmdlc3Rpb24gcHJvY2Vzcy5cbiAgICogQHNlZSBodHRwczovL2dpdGh1Yi5jb20vYXdzLXNhbXBsZXMvYW1hem9uLWJlZHJvY2stc2FtcGxlcy9ibG9iL21haW4va25vd2xlZGdlLWJhc2VzL2ZlYXR1cmVzLWV4YW1wbGVzLzAyLW9wdGltaXppbmctYWNjdXJhY3ktcmV0cmlldmVkLXJlc3VsdHMvYWR2YW5jZWRfY2h1bmtpbmdfb3B0aW9ucy5pcHluYlxuICAgKi9cbiAgcHVibGljIHN0YXRpYyBsYW1iZGEocHJvcHM6IExhbWJkYUN1c3RvbVRyYW5zZm9ybWF0aW9uUHJvcHMpOiBDdXN0b21UcmFuc2Zvcm1hdGlvbiB7XG5cbiAgICBjbGFzcyBMYW1iZGFDdXN0b21UcmFuc2Zvcm1hdGlvbiBleHRlbmRzIEN1c3RvbVRyYW5zZm9ybWF0aW9uIHtcbiAgICAgIHB1YmxpYyByZWFkb25seSBjb25maWd1cmF0aW9uID0ge1xuICAgICAgICBpbnRlcm1lZGlhdGVTdG9yYWdlOiB7XG4gICAgICAgICAgczNMb2NhdGlvbjoge1xuICAgICAgICAgICAgdXJpOiBwcm9wcy5zM0J1Y2tldFVyaSxcbiAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgICB0cmFuc2Zvcm1hdGlvbnM6IFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICBzdGVwVG9BcHBseTogVHJhbnNmb3JtYXRpb25TdGVwLlBPU1RfQ0hVTktJTkcsXG4gICAgICAgICAgICAvLyBUbyB1bmNvbW1lbnQgd2hlbiBtb3JlIHN0ZXBzIGFyZSBhdmFpbGFibGVcbiAgICAgICAgICAgIC8vIHN0ZXBUb0FwcGx5OiBwcm9wcy5zdGVwVG9BcHBseSA/PyBUcmFuc2Zvcm1hdGlvblN0ZXAuUE9TVF9DSFVOS0lORyxcbiAgICAgICAgICAgIHRyYW5zZm9ybWF0aW9uRnVuY3Rpb246IHtcbiAgICAgICAgICAgICAgdHJhbnNmb3JtYXRpb25MYW1iZGFDb25maWd1cmF0aW9uOiB7XG4gICAgICAgICAgICAgICAgbGFtYmRhQXJuOiBwcm9wcy5sYW1iZGFGdW5jdGlvbi5mdW5jdGlvbkFybixcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgIH07XG4gICAgICBwdWJsaWMgZ2VuZXJhdGVQb2xpY3lTdGF0ZW1lbnRzKHNjb3BlOiBDb25zdHJ1Y3QpOiBQb2xpY3lTdGF0ZW1lbnRbXSB7XG4gICAgICAgIHJldHVybiBbXG4gICAgICAgICAgbmV3IFBvbGljeVN0YXRlbWVudCh7XG4gICAgICAgICAgICBhY3Rpb25zOiBbJ2xhbWJkYTpJbnZva2VGdW5jdGlvbiddLFxuICAgICAgICAgICAgcmVzb3VyY2VzOiBbYCR7cHJvcHMubGFtYmRhRnVuY3Rpb24uZnVuY3Rpb25Bcm59OipgXSxcbiAgICAgICAgICAgIGNvbmRpdGlvbnM6IHtcbiAgICAgICAgICAgICAgU3RyaW5nRXF1YWxzOiB7XG4gICAgICAgICAgICAgICAgJ2F3czpSZXNvdXJjZUFjY291bnQnOiBTdGFjay5vZihzY29wZSkuYWNjb3VudCxcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgfSksXG4gICAgICAgIF07XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBuZXcgTGFtYmRhQ3VzdG9tVHJhbnNmb3JtYXRpb24oKTtcbiAgfVxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gUHJvcGVydGllc1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLyoqXG4gICAqIFRoZSBDbG91ZEZvcm1hdGlvbiBwcm9wZXJ0eSByZXByZXNlbnRhdGlvbiBvZiB0aGlzIGN1c3RvbSB0cmFuc2Zvcm1hdGlvbiBjb25maWd1cmF0aW9uLlxuICAgKi9cbiAgcHVibGljIGFic3RyYWN0IGNvbmZpZ3VyYXRpb246IENmbkRhdGFTb3VyY2UuQ3VzdG9tVHJhbnNmb3JtYXRpb25Db25maWd1cmF0aW9uUHJvcGVydHk7XG5cbiAgcHVibGljIGFic3RyYWN0IGdlbmVyYXRlUG9saWN5U3RhdGVtZW50cyhzY29wZTogQ29uc3RydWN0KTogUG9saWN5U3RhdGVtZW50W107XG5cbn0iXX0=