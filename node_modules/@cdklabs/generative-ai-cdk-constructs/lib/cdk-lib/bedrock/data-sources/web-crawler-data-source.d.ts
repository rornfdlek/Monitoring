import { IKey } from 'aws-cdk-lib/aws-kms';
import { Construct } from 'constructs';
import { DataSourceNew, DataSourceAssociationProps, DataSourceType } from './base-data-source';
import { IKnowledgeBase } from '../knowledge-base';
/**
 * The scope of the crawling.
 */
export declare enum CrawlingScope {
    /**
     * Crawls only web pages that belong to the same host or primary domain.
     */
    HOST_ONLY = "HOST_ONLY",
    /**
     * Includes subdomains in addition to the host or primary domain, i.e.
     * web pages that contain "aws.amazon.com" can also include
     * sub domain "docs.aws.amazon.com"
     */
    SUBDOMAINS = "SUBDOMAINS",
    /**
     * Limit crawling to web pages that belong to the same host and with the
     * same initial URL path.
     */
    DEFAULT = "DEFAULT"
}
/**
 * The filters (regular expression patterns) to include or exclude in the crawling
 * in accordance with your scope.
 */
export interface CrawlingFilters {
    /**
     * Include patterns.
     */
    readonly includePatterns?: string[];
    /**
     * Exclude paths.
     */
    readonly excludePatterns?: string[];
}
/**
 * Interface to add a new data source to an existing KB.
 */
export interface WebCrawlerDataSourceAssociationProps extends DataSourceAssociationProps {
    /**
     * The source urls in the format `https://www.sitename.com`.
     * Maximum of 100 URLs.
     */
    readonly sourceUrls: string[];
    /**
     * The scope of the crawling.
     * @default - CrawlingScope.DEFAULT
     */
    readonly crawlingScope?: CrawlingScope;
    /**
     * The max rate at which pages are crawled, up to 300 per minute per host.
     * Higher values will decrease sync time but increase the load on the host.
     * @default 300
     */
    readonly crawlingRate?: number;
    /**
     * The filters (regular expression patterns) for the crawling.
     * If there's a conflict, the exclude pattern takes precedence.
     * @default None
     */
    readonly filters?: CrawlingFilters;
}
/**
 * Interface to create a new standalone data source object.
 */
export interface WebCrawlerDataSourceProps extends WebCrawlerDataSourceAssociationProps {
    /**
     * The knowledge base to associate with the data source.
     */
    readonly knowledgeBase: IKnowledgeBase;
}
/**
 * Sets up a web crawler data source to be added to a knowledge base.
 */
export declare class WebCrawlerDataSource extends DataSourceNew {
    /**
     * The unique identifier of the data source.
     * @example 'JHUEVXUZMU'
     */
    readonly dataSourceId: string;
    /**
     * The type of data source.
     */
    readonly dataSourceType: DataSourceType;
    /**
     * The name of the data source.
     */
    readonly dataSourceName: string;
    /**
     * The knowledge base associated with the data source.
     */
    readonly knowledgeBase: IKnowledgeBase;
    /**
     * The KMS key to use to encrypt the data source.
     */
    readonly kmsKey?: IKey;
    /**
     * The max rate at which pages are crawled.
     */
    readonly siteUrls: string[];
    /**
     * The max rate at which pages are crawled.
     */
    readonly crawlingRate: number;
    /**
     * The Data Source cfn resource.
     */
    private readonly __resource;
    constructor(scope: Construct, id: string, props: WebCrawlerDataSourceProps);
}
