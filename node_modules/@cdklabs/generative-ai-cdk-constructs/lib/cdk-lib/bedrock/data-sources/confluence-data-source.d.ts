import { IKey } from 'aws-cdk-lib/aws-kms';
import { ISecret } from 'aws-cdk-lib/aws-secretsmanager';
import { Construct } from 'constructs';
import { IKnowledgeBase } from './../knowledge-base';
import { DataSourceAssociationProps, DataSourceNew, DataSourceType } from './base-data-source';
/**
 * The different authentication types available to connect to your Confluence instance.
 * @see https://docs.aws.amazon.com/bedrock/latest/userguide/confluence-data-source-connector.html#configuration-confluence-connector
 */
export declare enum ConfluenceDataSourceAuthType {
    /**
     * Your secret authentication credentials in AWS Secrets Manager should include:
     * - `confluenceAppKey`
     * - `confluenceAppSecret`
     * - `confluenceAccessToken`
     * - `confluenceRefreshToken`
     */
    OAUTH2_CLIENT_CREDENTIALS = "OAUTH2_CLIENT_CREDENTIALS",
    /**
     * Your secret authentication credentials in AWS Secrets Manager should include:
     *  - `username` (email of admin account)
     *  - `password` (API token)
     */
    BASIC = "BASIC"
}
/**
 * Represents the different types of content objects in Confluence that can be
 * crawled by the data source.
 */
export declare enum ConfluenceObjectType {
    SPACE = "Space",
    PAGE = "Page",
    BLOG = "Blog",
    COMMENT = "Comment",
    ATTACHMENT = "Attachment"
}
/**
 * Defines filters for crawling Confluence content.
 * These filters allow you to include or exclude specific content based on object types and patterns.
 *
 * - For Spaces: Use the unique space key
 * - For Pages: Use the main page title
 * - For Blogs: Use the main blog title
 * - For Comments: Use "Re: Page/Blog Title"
 * - For Attachments: Use the filename with extension
 * @remarks
 * - You can specify inclusion and exclusion patterns using regular expressions.
 * - If both inclusion and exclusion patterns match a document, the exclusion takes precedence.
 *
 * @example
 * {
 *   objectType: ConfluenceObjectType.ATTACHMENT,
 *   excludePatterns: [".*private.*\\.pdf"]
 * }
 */
export interface ConfluenceCrawlingFilters {
    /**
     * The type of Confluence object to apply the filters to.
     */
    readonly objectType: ConfluenceObjectType;
    /**
     * Regular expression patterns to include content.
     * If specified, only content matching these patterns will be crawled.
     */
    readonly includePatterns?: string[];
    /**
     * Regular expression patterns to exclude content.
     * Content matching these patterns will not be crawled, even if it matches an include pattern.
     */
    readonly excludePatterns?: string[];
}
/**
 * Interface to add a new data source to an existing KB.
 */
export interface ConfluenceDataSourceAssociationProps extends DataSourceAssociationProps {
    /**
     * The Confluence host URL or instance URL.
     * @example https://example.atlassian.net
     */
    readonly confluenceUrl: string;
    /**
     * The AWS Secrets Manager secret that stores your authentication credentials
     * for your Confluence instance URL. Secret must start with "AmazonBedrock-".
     */
    readonly authSecret: ISecret;
    /**
     * The supported authentication method to connect to the data source.
     * @default ConfluenceDataSourceAuthType.OAUTH2_CLIENT_CREDENTIALS
     */
    readonly authType?: ConfluenceDataSourceAuthType;
    /**
     * The filters (regular expression patterns) for the crawling.
     * If there's a conflict, the exclude pattern takes precedence.
     * @default None - all your content is crawled.
     */
    readonly filters?: ConfluenceCrawlingFilters[];
}
/**
 * Interface to create a new standalone data source object.
 */
export interface ConfluenceDataSourceProps extends ConfluenceDataSourceAssociationProps {
    /**
     * The knowledge base to associate with the data source.
     */
    readonly knowledgeBase: IKnowledgeBase;
}
/**
 * Sets up a Confluence Data Source to be added to a knowledge base.
 * @see https://docs.aws.amazon.com/bedrock/latest/userguide/confluence-data-source-connector.html
 */
export declare class ConfluenceDataSource extends DataSourceNew {
    /**
     * The unique identifier of the data source.
     * @example 'JHUEVXUZMU'
     */
    readonly dataSourceId: string;
    /**
     * The type of data source.
     */
    readonly dataSourceType: DataSourceType;
    /**
     * The name of the data source.
     */
    readonly dataSourceName: string;
    /**
     * The knowledge base associated with the data source.
     */
    readonly knowledgeBase: IKnowledgeBase;
    /**
     * The KMS key to use to encrypt the data source.
     */
    readonly kmsKey?: IKey;
    /**
     * The Confluence host URL or instance URL.
     */
    readonly confluenceUrl: string;
    /**
     * The AWS Secrets Manager secret that stores your authentication credentials.
     */
    readonly authSecret: ISecret;
    /**
     * The Data Source cfn resource.
     */
    private readonly __resource;
    constructor(scope: Construct, id: string, props: ConfluenceDataSourceProps);
}
