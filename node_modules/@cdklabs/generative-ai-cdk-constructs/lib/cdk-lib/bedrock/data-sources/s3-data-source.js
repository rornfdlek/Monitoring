"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.S3DataSource = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
/**
 *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance
 *  with the License. A copy of the License is located at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  or in the 'license' file accompanying this file. This file is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES
 *  OR CONDITIONS OF ANY KIND, express or implied. See the License for the specific language governing permissions
 *  and limitations under the License.
 */
const aws_bedrock_1 = require("aws-cdk-lib/aws-bedrock");
const cdk_nag_1 = require("cdk-nag");
const base_data_source_1 = require("./base-data-source");
const utils_1 = require("../../../common/helpers/utils");
/**
 * Sets up an S3 Data Source to be added to a knowledge base.
 */
class S3DataSource extends base_data_source_1.DataSourceNew {
    constructor(scope, id, props) {
        super(scope, id);
        // Assign attributes
        this.knowledgeBase = props.knowledgeBase;
        this.dataSourceType = base_data_source_1.DataSourceType.S3;
        // Turns out chunking and parsing are not replace so pass
        const chunkingStrategy = props.chunkingStrategy;
        const parsingStrategy = props.parsingStrategy;
        const theseAreNotReplacable = { chunkingStrategy, parsingStrategy };
        this.dataSourceName = props.dataSourceName ?? (0, utils_1.generatePhysicalNameV2)(this, 's3-ds', { maxLength: 40, lower: true, separator: '-', destroyCreate: theseAreNotReplacable });
        ;
        this.bucket = props.bucket;
        this.kmsKey = props.kmsKey;
        // ------------------------------------------------------
        // Manage permissions for the data source
        // ------------------------------------------------------
        this.handleCommonPermissions(props);
        this.bucket.grantRead(this.knowledgeBase.role);
        cdk_nag_1.NagSuppressions.addResourceSuppressions(this.knowledgeBase.role, [{
                id: 'AwsSolutions-IAM5',
                reason: 'The KB role needs read only access to all objects in the data source bucket.',
            }], true);
        // ------------------------------------------------------
        // L1 Instantiation
        // ------------------------------------------------------
        this.__resource = new aws_bedrock_1.CfnDataSource(this, 'DataSource', {
            ...this.formatAsCfnProps(props, {
                type: this.dataSourceType,
                s3Configuration: {
                    bucketArn: props.bucket.bucketArn,
                    inclusionPrefixes: props.inclusionPrefixes,
                },
            }),
        });
        this.dataSourceId = this.__resource.attrDataSourceId;
    }
}
exports.S3DataSource = S3DataSource;
_a = JSII_RTTI_SYMBOL_1;
S3DataSource[_a] = { fqn: "@cdklabs/generative-ai-cdk-constructs.bedrock.S3DataSource", version: "0.1.285" };
//# sourceMappingURL=data:application/json;base64,