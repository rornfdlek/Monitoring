"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.AgentActionGroup = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const constructs_1 = require("constructs");
const utils_1 = require("../../common/helpers/utils");
class AgentActionGroup extends constructs_1.Construct {
    constructor(scope, id, props) {
        super(scope, id);
        validateAgentActionGroupProps(props);
        const apiSchema = props.apiSchema?.bind(this);
        validateApiSchema(apiSchema);
        const skipResourceInUseCheckOnDelete = props.skipResourceInUseCheckOnDelete ?? false;
        const actionGroupName = props.actionGroupName ?? (0, utils_1.generatePhysicalNameV2)(this, 'action-group', { maxLength: 100, separator: '-' });
        let actionGroupExecutorProperty;
        if (props.actionGroupExecutor) {
            actionGroupExecutorProperty = {
                lambda: props.actionGroupExecutor.lambda?.functionArn,
                customControl: props.actionGroupExecutor.customControl,
            };
            this.actionGroupExecutor = props.actionGroupExecutor;
        }
        ;
        const agentActionGroupProperty = {
            actionGroupName: actionGroupName,
            actionGroupExecutor: actionGroupExecutorProperty,
            actionGroupState: props.actionGroupState,
            apiSchema: apiSchema,
            description: props.description,
            parentActionGroupSignature: props.parentActionGroupSignature,
            functionSchema: props.functionSchema,
            skipResourceInUseCheckOnDelete: skipResourceInUseCheckOnDelete,
        };
        this.actionGroupProperty = agentActionGroupProperty;
        this.actionGroupName = agentActionGroupProperty.actionGroupName;
        this.apiSchema = apiSchema;
        this.description = props.description;
        this.parentActionGroupSignature = props.parentActionGroupSignature;
        this.actionGroupState = props.actionGroupState;
        this.skipResourceInUseCheckOnDelete = skipResourceInUseCheckOnDelete;
        this.functionSchema = props.functionSchema;
    }
}
exports.AgentActionGroup = AgentActionGroup;
_a = JSII_RTTI_SYMBOL_1;
AgentActionGroup[_a] = { fqn: "@cdklabs/generative-ai-cdk-constructs.bedrock.AgentActionGroup", version: "0.1.285" };
function validateAgentActionGroupProps(props) {
    if (props.parentActionGroupSignature && props.description) {
        throw new Error('Cannot specify both description and parentActionSignature');
    }
}
function validateApiSchema(apiSchema) {
    // mutually exclusive
    if (apiSchema?.payload && apiSchema?.s3) {
        throw new Error('Cannot specify both apiSchema.payload and apiSchema.s3');
    }
}
//# sourceMappingURL=data:application/json;base64,