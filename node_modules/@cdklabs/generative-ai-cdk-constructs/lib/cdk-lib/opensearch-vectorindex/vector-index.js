"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.OpenSearchIndexCRProvider = exports.VectorIndex = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
/**
 *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance
 *  with the License. A copy of the License is located at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  or in the 'license' file accompanying this file. This file is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES
 *  OR CONDITIONS OF ANY KIND, express or implied. See the License for the specific language governing permissions
 *  and limitations under the License.
 */
const path = require("path");
const cdk = require("aws-cdk-lib");
const lambda = require("aws-cdk-lib/aws-lambda");
const oss = require("aws-cdk-lib/aws-opensearchserverless");
const custom_resource_provider_helper_1 = require("../../common/helpers/custom-resource-provider-helper");
const utils_1 = require("../../common/helpers/utils");
/**
 * Deploy a vector index on the collection.
 */
class VectorIndex extends cdk.Resource {
    constructor(scope, id, props) {
        super(scope, id);
        this.indexName = props.indexName;
        this.vectorField = props.vectorField;
        this.vectorDimensions = props.vectorDimensions;
        const crProvider = exports.OpenSearchIndexCRProvider.getProvider(this);
        crProvider.role.addManagedPolicy(props.collection.aossPolicy);
        const manageIndexPolicyName = (0, utils_1.generatePhysicalNameV2)(this, 'ManageIndexPolicy', { maxLength: 32, lower: true });
        const manageIndexPolicy = new oss.CfnAccessPolicy(this, 'ManageIndexPolicy', {
            name: manageIndexPolicyName,
            type: 'data',
            policy: JSON.stringify([
                {
                    Rules: [
                        {
                            Resource: [`index/${props.collection.collectionName}/*`],
                            Permission: [
                                'aoss:DescribeIndex',
                                'aoss:CreateIndex',
                                'aoss:DeleteIndex',
                                'aoss:UpdateIndex',
                            ],
                            ResourceType: 'index',
                        },
                        {
                            Resource: [`collection/${props.collection.collectionName}`],
                            Permission: ['aoss:DescribeCollectionItems'],
                            ResourceType: 'collection',
                        },
                    ],
                    Principal: [crProvider.role.roleArn],
                    Description: '',
                },
            ]),
        });
        const analyzerProps = props.analyzer
            ? {
                CharacterFilters: props.analyzer.characterFilters,
                Tokenizer: props.analyzer.tokenizer,
                TokenFilters: props.analyzer.tokenFilters,
            }
            : undefined;
        const vectorIndex = new cdk.CustomResource(this, 'VectorIndex', {
            serviceToken: crProvider.serviceToken,
            properties: {
                Endpoint: `${props.collection.collectionId}.${cdk.Stack.of(this).region}.aoss.amazonaws.com`,
                IndexName: props.indexName,
                VectorField: props.vectorField,
                Dimensions: props.vectorDimensions,
                MetadataManagement: props.mappings.map((m) => {
                    return {
                        MappingField: m.mappingField,
                        DataType: m.dataType,
                        Filterable: m.filterable,
                    };
                }),
                Analyzer: analyzerProps,
            },
            resourceType: 'Custom::OpenSearchIndex',
        });
        vectorIndex.node.addDependency(manageIndexPolicy);
        vectorIndex.node.addDependency(props.collection);
        vectorIndex.node.addDependency(props.collection.dataAccessPolicy);
    }
}
exports.VectorIndex = VectorIndex;
_a = JSII_RTTI_SYMBOL_1;
VectorIndex[_a] = { fqn: "@cdklabs/generative-ai-cdk-constructs.opensearch_vectorindex.VectorIndex", version: "0.1.285" };
/**
 * Custom Resource provider for OpenSearch Index operations.
 *
 * @internal This is an internal core function and should not be called directly by Solutions Constructs clients.
 */
exports.OpenSearchIndexCRProvider = (0, custom_resource_provider_helper_1.buildCustomResourceProvider)({
    providerName: 'OpenSearchIndexCRProvider',
    codePath: path.join(__dirname, '../../../lambda/opensearch-serverless-custom-resources'),
    handler: 'custom_resources.on_event',
    runtime: lambda.Runtime.PYTHON_3_12,
});
//# sourceMappingURL=data:application/json;base64,