"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.VectorCollection = exports.VectorCollectionStandbyReplicas = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
/**
 *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance
 *  with the License. A copy of the License is located at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  or in the 'license' file accompanying this file. This file is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES
 *  OR CONDITIONS OF ANY KIND, express or implied. See the License for the specific language governing permissions
 *  and limitations under the License.
 */
const cdk = require("aws-cdk-lib");
const iam = require("aws-cdk-lib/aws-iam");
const oss = require("aws-cdk-lib/aws-opensearchserverless");
const constructs_1 = require("constructs");
const utils_1 = require("../../common/helpers/utils");
var VectorCollectionStandbyReplicas;
(function (VectorCollectionStandbyReplicas) {
    VectorCollectionStandbyReplicas["ENABLED"] = "ENABLED";
    VectorCollectionStandbyReplicas["DISABLED"] = "DISABLED";
})(VectorCollectionStandbyReplicas || (exports.VectorCollectionStandbyReplicas = VectorCollectionStandbyReplicas = {}));
/**
 * Deploys an OpenSearch Serverless Collection to be used as a vector store.
 *
 * It includes all policies.
 */
class VectorCollection extends constructs_1.Construct {
    constructor(scope, id, props) {
        super(scope, id);
        /**
         * An OpenSearch Access Policy document that will become `dataAccessPolicy`.
         * @private
         */
        this.dataAccessPolicyDocument = [];
        this.collectionName = props?.collectionName ?? (0, utils_1.generatePhysicalNameV2)(this, 'VectorStore', { maxLength: 32, lower: true });
        this.standbyReplicas = props?.standbyReplicas ?? VectorCollectionStandbyReplicas.ENABLED;
        const encryptionPolicyName = (0, utils_1.generatePhysicalNameV2)(this, 'EncryptionPolicy', { maxLength: 32, lower: true });
        const encryptionPolicy = new oss.CfnSecurityPolicy(this, 'EncryptionPolicy', {
            name: encryptionPolicyName,
            type: 'encryption',
            policy: JSON.stringify({
                Rules: [
                    {
                        ResourceType: 'collection',
                        Resource: [`collection/${this.collectionName}`],
                    },
                ],
                AWSOwnedKey: true,
            }),
        });
        const networkPolicyName = (0, utils_1.generatePhysicalNameV2)(this, 'NetworkPolicy', { maxLength: 32, lower: true });
        const networkPolicy = new oss.CfnSecurityPolicy(this, 'NetworkPolicy', {
            name: networkPolicyName,
            type: 'network',
            policy: JSON.stringify([
                {
                    Rules: [
                        {
                            ResourceType: 'collection',
                            Resource: [`collection/${this.collectionName}`],
                        },
                        {
                            ResourceType: 'dashboard',
                            Resource: [`collection/${this.collectionName}`],
                        },
                    ],
                    AllowFromPublic: true,
                },
            ]),
        });
        const collection = new oss.CfnCollection(this, 'VectorCollection', {
            name: this.collectionName,
            type: 'VECTORSEARCH',
            standbyReplicas: this.standbyReplicas,
        });
        this.collectionArn = collection.attrArn;
        this.collectionId = collection.attrId;
        if (props?.customAossPolicy) {
            this.aossPolicy = props.customAossPolicy;
        }
        else {
            this.aossPolicy = new iam.ManagedPolicy(this, 'AOSSApiAccessAll', {
                statements: [
                    new iam.PolicyStatement({
                        effect: iam.Effect.ALLOW,
                        actions: [
                            'aoss:APIAccessAll',
                        ],
                        resources: [collection.attrArn],
                    }),
                ],
            });
        }
        collection.addDependency(encryptionPolicy);
        collection.addDependency(networkPolicy);
        const isDataAccessPolicyNotEmpty = new cdk.CfnCondition(this, 'IsDataAccessPolicyNotEmpty', {
            expression: cdk.Fn.conditionNot(cdk.Fn.conditionEquals(0, cdk.Lazy.number({
                produce: () => this.dataAccessPolicyDocument.length,
            }))),
        });
        const dataAccessPolicyName = (0, utils_1.generatePhysicalNameV2)(this, 'DataAccessPolicy', { maxLength: 32, lower: true });
        this.dataAccessPolicy = new oss.CfnAccessPolicy(this, 'DataAccessPolicy', {
            name: dataAccessPolicyName,
            type: 'data',
            policy: cdk.Lazy.string({
                produce: () => JSON.stringify(this.dataAccessPolicyDocument),
            }),
        });
        this.dataAccessPolicy.cfnOptions.condition = isDataAccessPolicyNotEmpty;
    }
    /**
     * Grants the specified role access to data in the collection.
     * @param grantee The role to grant access to.
     */
    grantDataAccess(grantee) {
        this.dataAccessPolicyDocument.push({
            Rules: [
                {
                    Resource: [`collection/${this.collectionName}`],
                    Permission: [
                        'aoss:DescribeCollectionItems',
                        'aoss:CreateCollectionItems',
                        'aoss:UpdateCollectionItems',
                    ],
                    ResourceType: 'collection',
                },
                {
                    Resource: [`index/${this.collectionName}/*`],
                    Permission: [
                        'aoss:UpdateIndex',
                        'aoss:DescribeIndex',
                        'aoss:ReadDocument',
                        'aoss:WriteDocument',
                        'aoss:CreateIndex',
                    ],
                    ResourceType: 'index',
                },
            ],
            Principal: [
                grantee.roleArn,
            ],
            Description: '',
        });
        grantee.addManagedPolicy(this.aossPolicy);
    }
}
exports.VectorCollection = VectorCollection;
_a = JSII_RTTI_SYMBOL_1;
VectorCollection[_a] = { fqn: "@cdklabs/generative-ai-cdk-constructs.opensearchserverless.VectorCollection", version: "0.1.285" };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmVjdG9yLWNvbGxlY3Rpb24uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvY2RrLWxpYi9vcGVuc2VhcmNoc2VydmVybGVzcy92ZWN0b3ItY29sbGVjdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBOzs7Ozs7Ozs7OztHQVdHO0FBQ0gsbUNBQW1DO0FBQ25DLDJDQUEyQztBQUMzQyw0REFBNEQ7QUFDNUQsMkNBQXVDO0FBQ3ZDLHNEQUFvRTtBQUVwRSxJQUFZLCtCQUdYO0FBSEQsV0FBWSwrQkFBK0I7SUFDekMsc0RBQW1CLENBQUE7SUFDbkIsd0RBQXFCLENBQUE7QUFDdkIsQ0FBQyxFQUhXLCtCQUErQiwrQ0FBL0IsK0JBQStCLFFBRzFDO0FBcUJEOzs7O0dBSUc7QUFDSCxNQUFhLGdCQUFpQixTQUFRLHNCQUFTO0lBb0M3QyxZQUFZLEtBQWdCLEVBQUUsRUFBVSxFQUFFLEtBQTZCO1FBQ3JFLEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFQbkI7OztXQUdHO1FBQ0ssNkJBQXdCLEdBQVUsRUFBRSxDQUFDO1FBSzNDLElBQUksQ0FBQyxjQUFjLEdBQUcsS0FBSyxFQUFFLGNBQWMsSUFBSSxJQUFBLDhCQUFzQixFQUNuRSxJQUFJLEVBQ0osYUFBYSxFQUNiLEVBQUUsU0FBUyxFQUFFLEVBQUUsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztRQUVsQyxJQUFJLENBQUMsZUFBZSxHQUFHLEtBQUssRUFBRSxlQUFlLElBQUksK0JBQStCLENBQUMsT0FBTyxDQUFDO1FBRXpGLE1BQU0sb0JBQW9CLEdBQUcsSUFBQSw4QkFBc0IsRUFBQyxJQUFJLEVBQ3RELGtCQUFrQixFQUNsQixFQUFFLFNBQVMsRUFBRSxFQUFFLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7UUFDbEMsTUFBTSxnQkFBZ0IsR0FBRyxJQUFJLEdBQUcsQ0FBQyxpQkFBaUIsQ0FBQyxJ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QUNELFdBQVcsRUFBRSxFQUFFO1NBQ2hCLENBQUMsQ0FBQztRQUNILE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDNUMsQ0FBQzs7QUEzS0gsNENBNEtDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiAgQ29weXJpZ2h0IEFtYXpvbi5jb20sIEluYy4gb3IgaXRzIGFmZmlsaWF0ZXMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIikuIFlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2VcbiAqICB3aXRoIHRoZSBMaWNlbnNlLiBBIGNvcHkgb2YgdGhlIExpY2Vuc2UgaXMgbG9jYXRlZCBhdFxuICpcbiAqICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogIG9yIGluIHRoZSAnbGljZW5zZScgZmlsZSBhY2NvbXBhbnlpbmcgdGhpcyBmaWxlLiBUaGlzIGZpbGUgaXMgZGlzdHJpYnV0ZWQgb24gYW4gJ0FTIElTJyBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTXG4gKiAgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZXhwcmVzcyBvciBpbXBsaWVkLiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnNcbiAqICBhbmQgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbmltcG9ydCAqIGFzIGNkayBmcm9tICdhd3MtY2RrLWxpYic7XG5pbXBvcnQgKiBhcyBpYW0gZnJvbSAnYXdzLWNkay1saWIvYXdzLWlhbSc7XG5pbXBvcnQgKiBhcyBvc3MgZnJvbSAnYXdzLWNkay1saWIvYXdzLW9wZW5zZWFyY2hzZXJ2ZXJsZXNzJztcbmltcG9ydCB7IENvbnN0cnVjdCB9IGZyb20gJ2NvbnN0cnVjdHMnO1xuaW1wb3J0IHsgZ2VuZXJhdGVQaHlzaWNhbE5hbWVWMiB9IGZyb20gJy4uLy4uL2NvbW1vbi9oZWxwZXJzL3V0aWxzJztcblxuZXhwb3J0IGVudW0gVmVjdG9yQ29sbGVjdGlvblN0YW5kYnlSZXBsaWNhcyB7XG4gIEVOQUJMRUQgPSAnRU5BQkxFRCcsXG4gIERJU0FCTEVEID0gJ0RJU0FCTEVEJyxcbn1cblxuZXhwb3J0IGludGVyZmFjZSBWZWN0b3JDb2xsZWN0aW9uUHJvcHMge1xuICAvKipcbiAgICogVGhlIG5hbWUgb2YgdGhlIGNvbGxlY3Rpb24uXG4gICAqL1xuICByZWFkb25seSBjb2xsZWN0aW9uTmFtZTogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBJbmRpY2F0ZXMgd2hldGhlciB0byB1c2Ugc3RhbmRieSByZXBsaWNhcyBmb3IgdGhlIGNvbGxlY3Rpb24uXG4gICAqXG4gICAqIEBkZWZhdWx0IEVOQUJMRURcbiAgICovXG4gIHJlYWRvbmx5IHN0YW5kYnlSZXBsaWNhcz86IFZlY3RvckNvbGxlY3Rpb25TdGFuZGJ5UmVwbGljYXM7XG5cbiAgLyoqXG4gICAqIEEgdXNlciBkZWZpbmVkIElBTSBwb2xpY3kgdGhhdCBhbGxvd3MgQVBJIGFjY2VzcyB0byB0aGUgY29sbGVjdGlvbi5cbiAgICovXG4gIHJlYWRvbmx5IGN1c3RvbUFvc3NQb2xpY3k/OiBpYW0uTWFuYWdlZFBvbGljeTtcbn1cblxuLyoqXG4gKiBEZXBsb3lzIGFuIE9wZW5TZWFyY2ggU2VydmVybGVzcyBDb2xsZWN0aW9uIHRvIGJlIHVzZWQgYXMgYSB2ZWN0b3Igc3RvcmUuXG4gKlxuICogSXQgaW5jbHVkZXMgYWxsIHBvbGljaWVzLlxuICovXG5leHBvcnQgY2xhc3MgVmVjdG9yQ29sbGVjdGlvbiBleHRlbmRzIENvbnN0cnVjdCB7XG4gIC8qKlxuICAgKiBUaGUgbmFtZSBvZiB0aGUgY29sbGVjdGlvbi5cbiAgICovXG4gIHB1YmxpYyBjb2xsZWN0aW9uTmFtZTogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBJbmRpY2F0ZXMgd2hldGhlciB0byB1c2Ugc3RhbmRieSByZXBsaWNhcyBmb3IgdGhlIGNvbGxlY3Rpb24uXG4gICAqL1xuICBwdWJsaWMgc3RhbmRieVJlcGxpY2FzOiBWZWN0b3JDb2xsZWN0aW9uU3RhbmRieVJlcGxpY2FzO1xuXG4gIC8qKlxuICAgKiBUaGUgSUQgb2YgdGhlIGNvbGxlY3Rpb24uXG4gICAqL1xuICBwdWJsaWMgY29sbGVjdGlvbklkOiBzdHJpbmc7XG4gIC8qKlxuICAgKiBUaGUgQVJOIG9mIHRoZSBjb2xsZWN0aW9uLlxuICAgKi9cbiAgcHVibGljIGNvbGxlY3Rpb25Bcm46IHN0cmluZztcblxuICAvKipcbiAgICogQW4gSUFNIHBvbGljeSB0aGF0IGFsbG93cyBBUEkgYWNjZXNzIHRvIHRoZSBjb2xsZWN0aW9uLlxuICAgKi9cbiAgcHVibGljIGFvc3NQb2xpY3k6IGlhbS5NYW5hZ2VkUG9saWN5O1xuXG4gIC8qKlxuICAgKiBBbiBPcGVuU2VhcmNoIEFjY2VzcyBQb2xpY3kgdGhhdCBhbGxvd3MgYWNjZXNzIHRvIHRoZSBpbmRleC5cbiAgICovXG4gIHB1YmxpYyBkYXRhQWNjZXNzUG9saWN5OiBvc3MuQ2ZuQWNjZXNzUG9saWN5O1xuXG4gIC8qKlxuICAgKiBBbiBPcGVuU2VhcmNoIEFjY2VzcyBQb2xpY3kgZG9jdW1lbnQgdGhhdCB3aWxsIGJlY29tZSBgZGF0YUFjY2Vzc1BvbGljeWAuXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBwcml2YXRlIGRhdGFBY2Nlc3NQb2xpY3lEb2N1bWVudDogYW55W10gPSBbXTtcblxuICBjb25zdHJ1Y3RvcihzY29wZTogQ29uc3RydWN0LCBpZDogc3RyaW5nLCBwcm9wcz86IFZlY3RvckNvbGxlY3Rpb25Qcm9wcykge1xuICAgIHN1cGVyKHNjb3BlLCBpZCk7XG5cbiAgICB0aGlzLmNvbGxlY3Rpb25OYW1lID0gcHJvcHM/LmNvbGxlY3Rpb25OYW1lID8/IGdlbmVyYXRlUGh5c2ljYWxOYW1lVjIoXG4gICAgICB0aGlzLFxuICAgICAgJ1ZlY3RvclN0b3JlJyxcbiAgICAgIHsgbWF4TGVuZ3RoOiAzMiwgbG93ZXI6IHRydWUgfSk7XG5cbiAgICB0aGlzLnN0YW5kYnlSZXBsaWNhcyA9IHByb3BzPy5zdGFuZGJ5UmVwbGljYXMgPz8gVmVjdG9yQ29sbGVjdGlvblN0YW5kYnlSZXBsaWNhcy5FTkFCTEVEO1xuXG4gICAgY29uc3QgZW5jcnlwdGlvblBvbGljeU5hbWUgPSBnZW5lcmF0ZVBoeXNpY2FsTmFtZVYyKHRoaXMsXG4gICAgICAnRW5jcnlwdGlvblBvbGljeScsXG4gICAgICB7IG1heExlbmd0aDogMzIsIGxvd2VyOiB0cnVlIH0pO1xuICAgIGNvbnN0IGVuY3J5cHRpb25Qb2xpY3kgPSBuZXcgb3NzLkNmblNlY3VyaXR5UG9saWN5KHRoaXMsICdFbmNyeXB0aW9uUG9saWN5Jywge1xuICAgICAgbmFtZTogZW5jcnlwdGlvblBvbGljeU5hbWUsXG4gICAgICB0eXBlOiAnZW5jcnlwdGlvbicsXG4gICAgICBwb2xpY3k6IEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgUnVsZXM6IFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICBSZXNvdXJjZVR5cGU6ICdjb2xsZWN0aW9uJyxcbiAgICAgICAgICAgIFJlc291cmNlOiBbYGNvbGxlY3Rpb24vJHt0aGlzLmNvbGxlY3Rpb25OYW1lfWBdLFxuICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIEFXU093bmVkS2V5OiB0cnVlLFxuICAgICAgfSksXG4gICAgfSk7XG5cbiAgICBjb25zdCBuZXR3b3JrUG9saWN5TmFtZSA9IGdlbmVyYXRlUGh5c2ljYWxOYW1lVjIodGhpcyxcbiAgICAgICdOZXR3b3JrUG9saWN5JyxcbiAgICAgIHsgbWF4TGVuZ3RoOiAzMiwgbG93ZXI6IHRydWUgfSk7XG4gICAgY29uc3QgbmV0d29ya1BvbGljeSA9IG5ldyBvc3MuQ2ZuU2VjdXJpdHlQb2xpY3kodGhpcywgJ05ldHdvcmtQb2xpY3knLCB7XG4gICAgICBuYW1lOiBuZXR3b3JrUG9saWN5TmFtZSxcbiAgICAgIHR5cGU6ICduZXR3b3JrJyxcbiAgICAgIHBvbGljeTogSlNPTi5zdHJpbmdpZnkoW1xuICAgICAgICB7XG4gICAgICAgICAgUnVsZXM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgUmVzb3VyY2VUeXBlOiAnY29sbGVjdGlvbicsXG4gICAgICAgICAgICAgIFJlc291cmNlOiBbYGNvbGxlY3Rpb24vJHt0aGlzLmNvbGxlY3Rpb25OYW1lfWBdLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgUmVzb3VyY2VUeXBlOiAnZGFzaGJvYXJkJyxcbiAgICAgICAgICAgICAgUmVzb3VyY2U6IFtgY29sbGVjdGlvbi8ke3RoaXMuY29sbGVjdGlvbk5hbWV9YF0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIF0sXG4gICAgICAgICAgQWxsb3dGcm9tUHVibGljOiB0cnVlLFxuICAgICAgICB9LFxuICAgICAgXSksXG4gICAgfSk7XG5cbiAgICBjb25zdCBjb2xsZWN0aW9uID0gbmV3IG9zcy5DZm5Db2xsZWN0aW9uKHRoaXMsICdWZWN0b3JDb2xsZWN0aW9uJywge1xuICAgICAgbmFtZTogdGhpcy5jb2xsZWN0aW9uTmFtZSxcbiAgICAgIHR5cGU6ICdWRUNUT1JTRUFSQ0gnLFxuICAgICAgc3RhbmRieVJlcGxpY2FzOiB0aGlzLnN0YW5kYnlSZXBsaWNhcyxcbiAgICB9KTtcblxuICAgIHRoaXMuY29sbGVjdGlvbkFybiA9IGNvbGxlY3Rpb24uYXR0ckFybjtcbiAgICB0aGlzLmNvbGxlY3Rpb25JZCA9IGNvbGxlY3Rpb24uYXR0cklkO1xuXG4gICAgaWYgKHByb3BzPy5jdXN0b21Bb3NzUG9saWN5KSB7XG4gICAgICB0aGlzLmFvc3NQb2xpY3kgPSBwcm9wcy5jdXN0b21Bb3NzUG9saWN5O1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmFvc3NQb2xpY3kgPSBuZXcgaWFtLk1hbmFnZWRQb2xpY3koXG4gICAgICAgIHRoaXMsXG4gICAgICAgICdBT1NTQXBpQWNjZXNzQWxsJywge1xuICAgICAgICAgIHN0YXRlbWVudHM6IFtcbiAgICAgICAgICAgIG5ldyBpYW0uUG9saWN5U3RhdGVtZW50KHtcbiAgICAgICAgICAgICAgZWZmZWN0OiBpYW0uRWZmZWN0LkFMTE9XLFxuICAgICAgICAgICAgICBhY3Rpb25zOiBbXG4gICAgICAgICAgICAgICAgJ2Fvc3M6QVBJQWNjZXNzQWxsJyxcbiAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgcmVzb3VyY2VzOiBbY29sbGVjdGlvbi5hdHRyQXJuXSxcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgIF0sXG4gICAgICAgIH0sXG4gICAgICApO1xuICAgIH1cblxuICAgIGNvbGxlY3Rpb24uYWRkRGVwZW5kZW5jeShlbmNyeXB0aW9uUG9saWN5KTtcbiAgICBjb2xsZWN0aW9uLmFkZERlcGVuZGVuY3kobmV0d29ya1BvbGljeSk7XG5cblxuICAgIGNvbnN0IGlzRGF0YUFjY2Vzc1BvbGljeU5vdEVtcHR5ID0gbmV3IGNkay5DZm5Db25kaXRpb24odGhpcywgJ0lzRGF0YUFjY2Vzc1BvbGljeU5vdEVtcHR5Jywge1xuICAgICAgZXhwcmVzc2lvbjogY2RrLkZuLmNvbmRpdGlvbk5vdChjZGsuRm4uY29uZGl0aW9uRXF1YWxzKDAsIGNkay5MYXp5Lm51bWJlcih7XG4gICAgICAgIHByb2R1Y2U6ICgpID0+IHRoaXMuZGF0YUFjY2Vzc1BvbGljeURvY3VtZW50Lmxlbmd0aCxcbiAgICAgIH0pKSksXG4gICAgfSk7XG5cbiAgICBjb25zdCBkYXRhQWNjZXNzUG9saWN5TmFtZSA9IGdlbmVyYXRlUGh5c2ljYWxOYW1lVjIodGhpcyxcbiAgICAgICdEYXRhQWNjZXNzUG9saWN5JyxcbiAgICAgIHsgbWF4TGVuZ3RoOiAzMiwgbG93ZXI6IHRydWUgfSk7XG4gICAgdGhpcy5kYXRhQWNjZXNzUG9saWN5ID0gbmV3IG9zcy5DZm5BY2Nlc3NQb2xpY3kodGhpcywgJ0RhdGFBY2Nlc3NQb2xpY3knLCB7XG4gICAgICBuYW1lOiBkYXRhQWNjZXNzUG9saWN5TmFtZSxcbiAgICAgIHR5cGU6ICdkYXRhJyxcbiAgICAgIHBvbGljeTogY2RrLkxhenkuc3RyaW5nKHtcbiAgICAgICAgcHJvZHVjZTogKCkgPT4gSlNPTi5zdHJpbmdpZnkodGhpcy5kYXRhQWNjZXNzUG9saWN5RG9jdW1lbnQpLFxuICAgICAgfSksXG4gICAgfSk7XG4gICAgdGhpcy5kYXRhQWNjZXNzUG9saWN5LmNmbk9wdGlvbnMuY29uZGl0aW9uID0gaXNEYXRhQWNjZXNzUG9saWN5Tm90RW1wdHk7XG4gIH1cblxuICAvKipcbiAgICogR3JhbnRzIHRoZSBzcGVjaWZpZWQgcm9sZSBhY2Nlc3MgdG8gZGF0YSBpbiB0aGUgY29sbGVjdGlvbi5cbiAgICogQHBhcmFtIGdyYW50ZWUgVGhlIHJvbGUgdG8gZ3JhbnQgYWNjZXNzIHRvLlxuICAgKi9cbiAgZ3JhbnREYXRhQWNjZXNzKGdyYW50ZWU6IGlhbS5JUm9sZSkge1xuICAgIHRoaXMuZGF0YUFjY2Vzc1BvbGljeURvY3VtZW50LnB1c2goe1xuICAgICAgUnVsZXM6IFtcbiAgICAgICAge1xuICAgICAgICAgIFJlc291cmNlOiBbYGNvbGxlY3Rpb24vJHt0aGlzLmNvbGxlY3Rpb25OYW1lfWBdLFxuICAgICAgICAgIFBlcm1pc3Npb246IFtcbiAgICAgICAgICAgICdhb3NzOkRlc2NyaWJlQ29sbGVjdGlvbkl0ZW1zJyxcbiAgICAgICAgICAgICdhb3NzOkNyZWF0ZUNvbGxlY3Rpb25JdGVtcycsXG4gICAgICAgICAgICAnYW9zczpVcGRhdGVDb2xsZWN0aW9uSXRlbXMnLFxuICAgICAgICAgIF0sXG4gICAgICAgICAgUmVzb3VyY2VUeXBlOiAnY29sbGVjdGlvbicsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBSZXNvdXJjZTogW2BpbmRleC8ke3RoaXMuY29sbGVjdGlvbk5hbWV9LypgXSxcbiAgICAgICAgICBQZXJtaXNzaW9uOiBbXG4gICAgICAgICAgICAnYW9zczpVcGRhdGVJbmRleCcsXG4gICAgICAgICAgICAnYW9zczpEZXNjcmliZUluZGV4JyxcbiAgICAgICAgICAgICdhb3NzOlJlYWREb2N1bWVudCcsXG4gICAgICAgICAgICAnYW9zczpXcml0ZURvY3VtZW50JyxcbiAgICAgICAgICAgICdhb3NzOkNyZWF0ZUluZGV4JyxcbiAgICAgICAgICBdLFxuICAgICAgICAgIFJlc291cmNlVHlwZTogJ2luZGV4JyxcbiAgICAgICAgfSxcbiAgICAgIF0sXG4gICAgICBQcmluY2lwYWw6IFtcbiAgICAgICAgZ3JhbnRlZS5yb2xlQXJuLFxuICAgICAgXSxcbiAgICAgIERlc2NyaXB0aW9uOiAnJyxcbiAgICB9KTtcbiAgICBncmFudGVlLmFkZE1hbmFnZWRQb2xpY3kodGhpcy5hb3NzUG9saWN5KTtcbiAgfVxufVxuXG4iXX0=