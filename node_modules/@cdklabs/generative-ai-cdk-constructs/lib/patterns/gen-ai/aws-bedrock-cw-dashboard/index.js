"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.BedrockCwDashboard = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
/**
 *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance
 *  with the License. A copy of the License is located at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  or in the 'license' file accompanying this file. This file is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES
 *  OR CONDITIONS OF ANY KIND, express or implied. See the License for the specific language governing permissions
 *  and limitations under the License.
 */
const aws_cdk_lib_1 = require("aws-cdk-lib");
const aws_cloudwatch_1 = require("aws-cdk-lib/aws-cloudwatch");
const constructs_1 = require("constructs");
/**
 * The BedrockCwDashboard class.
 */
class BedrockCwDashboard extends constructs_1.Construct {
    /**
     * Constructs a new instance of the BedrockCwDashboard class.
     * @param {cdk.App} scope - represents the scope for all the resources.
     * @param {string} id - this is a a scope-unique id.
     * @param {BedrockCwDashboardProps} props - user provided props for the construct.
     * @since 0.0.0
     * @public
     */
    constructor(scope, id, props) {
        super(scope, id);
        this.dashboard = props.existingDashboard ?? new aws_cloudwatch_1.Dashboard(this, 'BedrockMetricsDashboard', {
            dashboardName: props.dashboardName ?? 'BedrockMetricsDashboard',
        });
    }
    /* Provide metrics for a specific model id in Bedrock
     * @param {string} modelName - Model name as it will appear in the dashboard row widget.
     * @param {string} modelId - Bedrock model id as defined in https://docs.aws.amazon.com/bedrock/latest/userguide/model-ids.html
     * @param {ModelMonitoringProps} props - user provided props for the monitoring.
    */
    addModelMonitoring(modelName, modelId, props) {
        const period = props.period ?? aws_cdk_lib_1.Duration.hours(1);
        const modelInputTokensMetric = new aws_cloudwatch_1.Metric({
            namespace: 'AWS/Bedrock',
            metricName: 'InputTokenCount',
            dimensionsMap: {
                ModelId: modelId,
            },
            statistic: aws_cloudwatch_1.Stats.SUM,
            period: period,
        });
        const modelOutputTokensMetric = new aws_cloudwatch_1.Metric({
            namespace: 'AWS/Bedrock',
            metricName: 'OutputTokenCount',
            dimensionsMap: {
                ModelId: modelId,
            },
            statistic: aws_cloudwatch_1.Stats.SUM,
            period: period,
        });
        const modelLatencyAvgMetric = new aws_cloudwatch_1.Metric({
            namespace: 'AWS/Bedrock',
            metricName: 'InvocationLatency',
            dimensionsMap: {
                ModelId: modelId,
            },
            statistic: aws_cloudwatch_1.Stats.AVERAGE,
            period: period,
        });
        const modelLatencyMinMetric = new aws_cloudwatch_1.Metric({
            namespace: 'AWS/Bedrock',
            metricName: 'InvocationLatency',
            dimensionsMap: {
                ModelId: modelId,
            },
            statistic: aws_cloudwatch_1.Stats.MINIMUM,
            period: period,
        });
        const modelLatencyMaxMetric = new aws_cloudwatch_1.Metric({
            namespace: 'AWS/Bedrock',
            metricName: 'InvocationLatency',
            dimensionsMap: {
                ModelId: modelId,
            },
            statistic: aws_cloudwatch_1.Stats.MAXIMUM,
            period: period,
        });
        const modelInvocationsCountMetric = new aws_cloudwatch_1.Metric({
            namespace: 'AWS/Bedrock',
            metricName: 'Invocations',
            dimensionsMap: {
                ModelId: modelId,
            },
            statistic: aws_cloudwatch_1.Stats.SAMPLE_COUNT,
            period: period,
        });
        const modelInvocationsClientErrorsMetric = new aws_cloudwatch_1.Metric({
            namespace: 'AWS/Bedrock',
            metricName: 'InvocationClientErrors',
            dimensionsMap: {
                ModelId: modelId,
            },
            statistic: aws_cloudwatch_1.Stats.SAMPLE_COUNT,
            period: period,
        });
        this.dashboard.addWidgets(new aws_cloudwatch_1.Row(new aws_cloudwatch_1.TextWidget({
            markdown: `# ${modelName}`,
            width: 24,
        })));
        this.dashboard.addWidgets(new aws_cloudwatch_1.Row(new aws_cloudwatch_1.SingleValueWidget({
            title: 'Average Latency',
            metrics: [modelLatencyAvgMetric],
            width: 8,
        }), new aws_cloudwatch_1.SingleValueWidget({
            title: 'Min Latency',
            metrics: [modelLatencyMinMetric],
            width: 8,
        }), new aws_cloudwatch_1.SingleValueWidget({
            title: 'Max Latency',
            metrics: [modelLatencyMaxMetric],
            width: 8,
        })));
        this.dashboard.addWidgets(new aws_cloudwatch_1.Row(new aws_cloudwatch_1.GraphWidget({
            title: 'Input and Output Token Counts',
            left: [modelInputTokensMetric],
            right: [modelOutputTokensMetric],
            period: period,
            width: 12,
            height: 10,
        })));
        this.dashboard.addWidgets(new aws_cloudwatch_1.Row(new aws_cloudwatch_1.SingleValueWidget({
            title: 'Invocations',
            metrics: [modelInvocationsCountMetric],
            width: 12,
        }), new aws_cloudwatch_1.SingleValueWidget({
            title: 'Client Errors',
            metrics: [modelInvocationsClientErrorsMetric],
            width: 12,
        })));
    }
    /* Add a new row to the dashboard providing metrics across all model ids in Bedrock
    * @param {ModelMonitoringProps} props - user provided props for the monitoring.
    */
    addAllModelsMonitoring(props) {
        const period = props.period ?? aws_cdk_lib_1.Duration.hours(1);
        // Metrics across all Model Ids
        const inputTokensAllModelsMetric = new aws_cloudwatch_1.Metric({
            namespace: 'AWS/Bedrock',
            metricName: 'InputTokenCount',
            statistic: aws_cloudwatch_1.Stats.SUM,
            period: period,
        });
        const outputTokensAllModelsMetric = new aws_cloudwatch_1.Metric({
            namespace: 'AWS/Bedrock',
            metricName: 'OutputTokenCount',
            statistic: aws_cloudwatch_1.Stats.SUM,
            period: period,
        });
        const latencyAvgAllModelsMetric = new aws_cloudwatch_1.Metric({
            namespace: 'AWS/Bedrock',
            metricName: 'InvocationLatency',
            statistic: aws_cloudwatch_1.Stats.AVERAGE,
            period: period,
        });
        const latencyMinAllModelsMetric = new aws_cloudwatch_1.Metric({
            namespace: 'AWS/Bedrock',
            metricName: 'InvocationLatency',
            statistic: aws_cloudwatch_1.Stats.MINIMUM,
            period: period,
        });
        const latencyMaxAllModelsMetric = new aws_cloudwatch_1.Metric({
            namespace: 'AWS/Bedrock',
            metricName: 'InvocationLatency',
            statistic: aws_cloudwatch_1.Stats.MAXIMUM,
            period: period,
        });
        const invocationsCountAllModelsMetric = new aws_cloudwatch_1.Metric({
            namespace: 'AWS/Bedrock',
            metricName: 'Invocations',
            statistic: aws_cloudwatch_1.Stats.SAMPLE_COUNT,
            period: period,
        });
        const invocationsClientErrorsAllModelsMetric = new aws_cloudwatch_1.Metric({
            namespace: 'AWS/Bedrock',
            metricName: 'InvocationClientErrors',
            statistic: aws_cloudwatch_1.Stats.SAMPLE_COUNT,
            period: period,
        });
        this.dashboard.addWidgets(new aws_cloudwatch_1.Row(new aws_cloudwatch_1.TextWidget({
            markdown: '# Metrics Across All Models',
            width: 24,
        })));
        this.dashboard.addWidgets(new aws_cloudwatch_1.Row(new aws_cloudwatch_1.SingleValueWidget({
            title: 'Average Latency (All Models)',
            metrics: [latencyAvgAllModelsMetric],
            width: 8,
        }), new aws_cloudwatch_1.SingleValueWidget({
            title: 'Min Latency (All Models)',
            metrics: [latencyMinAllModelsMetric],
            width: 8,
        }), new aws_cloudwatch_1.SingleValueWidget({
            title: 'Max Latency (All Models)',
            metrics: [latencyMaxAllModelsMetric],
            width: 8,
        })));
        this.dashboard.addWidgets(new aws_cloudwatch_1.Row(new aws_cloudwatch_1.Column(new aws_cloudwatch_1.GraphWidget({
            title: 'Input and Output Tokens (All Models)',
            left: [inputTokensAllModelsMetric],
            right: [outputTokensAllModelsMetric],
            period: period,
            width: 12,
        })), new aws_cloudwatch_1.Column(new aws_cloudwatch_1.Row(new aws_cloudwatch_1.SingleValueWidget({
            title: 'Invocations (All Models)',
            metrics: [invocationsCountAllModelsMetric],
            width: 12,
        })), new aws_cloudwatch_1.Row(new aws_cloudwatch_1.SingleValueWidget({
            title: 'Client Errors (All Models)',
            metrics: [invocationsClientErrorsAllModelsMetric],
            width: 12,
        })))));
    }
}
exports.BedrockCwDashboard = BedrockCwDashboard;
_a = JSII_RTTI_SYMBOL_1;
BedrockCwDashboard[_a] = { fqn: "@cdklabs/generative-ai-cdk-constructs.BedrockCwDashboard", version: "0.1.285" };
//# sourceMappingURL=data:application/json;base64,