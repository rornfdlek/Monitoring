"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.LangchainCommonDepsLayer = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
/**
 *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance
 *  with the License. A copy of the License is located at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  or in the 'license' file accompanying this file. This file is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES
 *  OR CONDITIONS OF ANY KIND, express or implied. See the License for the specific language governing permissions
 *  and limitations under the License.
 */
const path = require("path");
const constructs_1 = require("constructs");
const python_lambda_layer_helper_1 = require("../../../common/helpers/python-lambda-layer-helper");
/**
   * The LangchainCommonDepsLayer class.
   */
class LangchainCommonDepsLayer extends constructs_1.Construct {
    /**
       * This construct creates a lambda layer loaded with relevant libraries to run genai applications. Libraries include boto3, botocore, requests, requests-aws4auth, langchain, opensearch-py and openai.
       * @param {cdk.App} scope - represents the scope for all the resources.
       * @param {string} id - this is a a scope-unique id.
       * @param {LangchainLayerProps} props - user provided props for the construct.
       * @since 0.0.0
       * @public
       */
    constructor(scope, id, props) {
        super(scope, id);
        const layer = new python_lambda_layer_helper_1.Layer(this, 'Langchain Layer', {
            path: path.join(__dirname, '../../../../layers/langchain-common-deps'),
            description: 'Dependencies to build gen ai applications with the langchain client',
            ...props,
        });
        this.layer = layer.layer;
    }
}
exports.LangchainCommonDepsLayer = LangchainCommonDepsLayer;
_a = JSII_RTTI_SYMBOL_1;
LangchainCommonDepsLayer[_a] = { fqn: "@cdklabs/generative-ai-cdk-constructs.LangchainCommonDepsLayer", version: "0.1.285" };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvcGF0dGVybnMvZ2VuLWFpL2F3cy1sYW5nY2hhaW4tY29tbW9uLWxheWVyL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7Ozs7Ozs7Ozs7O0dBV0c7QUFDSCw2QkFBNkI7QUFFN0IsMkNBQXVDO0FBQ3ZDLG1HQUEyRTtBQXFDM0U7O0tBRUs7QUFDTCxNQUFhLHdCQUF5QixTQUFRLHNCQUFTO0lBTXJEOzs7Ozs7O1NBT0s7SUFDTCxZQUFZLEtBQWdCLEVBQUUsRUFBVSxFQUFFLEtBQTBCO1FBQ2xFLEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFFakIsTUFBTSxLQUFLLEdBQUcsSUFBSSxrQ0FBSyxDQUFDLElBQUksRUFBRSxpQkFBaUIsRUFBRTtZQUMvQyxJQUFJLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsMENBQTBDLENBQUM7WUFDdEUsV0FBVyxFQUFFLHFFQUFxRTtZQUNsRixHQUFHLEtBQUs7U0FDVCxDQUFDLENBQUM7UUFFSCxJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUM7SUFDM0IsQ0FBQzs7QUF4QkgsNERBeUJDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiAgQ29weXJpZ2h0IEFtYXpvbi5jb20sIEluYy4gb3IgaXRzIGFmZmlsaWF0ZXMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIikuIFlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2VcbiAqICB3aXRoIHRoZSBMaWNlbnNlLiBBIGNvcHkgb2YgdGhlIExpY2Vuc2UgaXMgbG9jYXRlZCBhdFxuICpcbiAqICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogIG9yIGluIHRoZSAnbGljZW5zZScgZmlsZSBhY2NvbXBhbnlpbmcgdGhpcyBmaWxlLiBUaGlzIGZpbGUgaXMgZGlzdHJpYnV0ZWQgb24gYW4gJ0FTIElTJyBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTXG4gKiAgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZXhwcmVzcyBvciBpbXBsaWVkLiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnNcbiAqICBhbmQgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbmltcG9ydCAqIGFzIHBhdGggZnJvbSAncGF0aCc7XG5pbXBvcnQgKiBhcyBsYW1iZGEgZnJvbSAnYXdzLWNkay1saWIvYXdzLWxhbWJkYSc7XG5pbXBvcnQgeyBDb25zdHJ1Y3QgfSBmcm9tICdjb25zdHJ1Y3RzJztcbmltcG9ydCB7IExheWVyIH0gZnJvbSAnLi4vLi4vLi4vY29tbW9uL2hlbHBlcnMvcHl0aG9uLWxhbWJkYS1sYXllci1oZWxwZXInO1xuaW1wb3J0IHsgTGFuZ2NoYWluUHJvcHMgfSBmcm9tICcuLi8uLi8uLi9jb21tb24vcHJvcHMvTGFuZ2NoYWluUHJvcHMnO1xuXG4vKipcbiAqIFRoZSBwcm9wZXJ0aWVzIGZvciB0aGUgTGFuZ2NoYWluTGF5ZXJQcm9wcyBjbGFzcy5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBMYW5nY2hhaW5MYXllclByb3BzIGV4dGVuZHMgTGFuZ2NoYWluUHJvcHMge1xuICAvKipcbiAgICogUmVxdWlyZWQuIExhbWJkYSBmdW5jdGlvbiBydW50aW1lIGNvbXBhdGlibGUgd2l0aCB0aGlzIExheWVyLlxuICAgKi9cbiAgcmVhZG9ubHkgcnVudGltZTogbGFtYmRhLlJ1bnRpbWU7XG4gIC8qKlxuICAgKiBSZXF1aXJlZC4gTGFtYmRhIGZ1bmN0aW9uIGFyY2hpdGVjdHVyZSBjb21wYXRpYmxlIHdpdGggdGhpcyBMYXllci5cbiAgICovXG4gIHJlYWRvbmx5IGFyY2hpdGVjdHVyZTogbGFtYmRhLkFyY2hpdGVjdHVyZTtcbiAgLyoqXG4gICAqIE9wdGlvbmFsOiBBZGQgJy0tdXBncmFkZScgdG8gcGlwIGluc3RhbGwgcmVxdWlyZW1lbnRzLnR4dFxuICAgKiBJbiBjYXNlIG9mIGEgTGFuZ2NoYWluQ29tbW9uTGF5ZXIsIHRoaXMgcGFyYW1ldGVyIGlzIG5vdCB1c2VkLlxuICAgKlxuICAgKiBAZGVmYXVsdCAtIGZhbHNlXG4gICAqL1xuICByZWFkb25seSBhdXRvVXBncmFkZT86IGJvb2xlYW47XG4gIC8qKlxuICAgKiBBIHByb3AgYWxsb3dpbmcgYWRkaXRpb25hbCBweXRob24gcGlwIGxpYnJhcmllcyB0byBiZSBpbnN0YWxsZWQgd2l0aCB0aGlzIGxhbmdjaGFpbiBsYXllclxuICAgKlxuICAgKiBAZGVmYXVsdCAtIG5vbmVcbiAgICovXG4gIHJlYWRvbmx5IGFkZGl0aW9uYWxQYWNrYWdlcz86IHN0cmluZ1tdO1xuICAvKiogT3B0aW9uYWw6IExvY2FsIGNvbXB1dGUgd2lsbCBiZSB1c2VkIHdoZW4gaW5zdGFsbGluZyByZXF1aXJlbWVudHMudHh0LlxuICAgKiBCeSBkZWZhdWx0LCBhIGRvY2tlciBjb250YWluZXIgd2lsbCBiZSBzcHVuIHVwIHRvIGluc3RhbGwgcmVxdWlyZW1lbnRzLiBUbyBvdmVycmlkZSB0aGlzIGJlaGF2aW9yLCB1c2UgdGhlIHB5dGhvbiBhbGlhcyBzdHJpbmcgb2YgYHB5dGhvbmAgb3IgYHB5dGhvbjNgXG4gICAqIFRoZSBzdHJpbmcgdmFsdWUgd2lsbCBiZSB0aGUgcHl0aG9uIGFsaWFzIHVzZWQgdG8gaW5zdGFsbCByZXF1aXJlbWVudHMuXG4gICAqXG4gICAqIEBkZWZhdWx0IC0gbm9uZVxuICAgKi9cbiAgcmVhZG9ubHkgbG9jYWw/OiAncHl0aG9uJyB8ICdweXRob24zJztcbn1cblxuLyoqXG4gICAqIFRoZSBMYW5nY2hhaW5Db21tb25EZXBzTGF5ZXIgY2xhc3MuXG4gICAqL1xuZXhwb3J0IGNsYXNzIExhbmdjaGFpbkNvbW1vbkRlcHNMYXllciBleHRlbmRzIENvbnN0cnVjdCB7XG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBpbnN0YW5jZSBvZiBsYW1iZGEuTGF5ZXJWZXJzaW9uIGNyZWF0ZWQgYnkgdGhlIGNvbnN0cnVjdFxuICAgKi9cbiAgcHVibGljIHJlYWRvbmx5IGxheWVyOiBsYW1iZGEuTGF5ZXJWZXJzaW9uO1xuXG4gIC8qKlxuICAgICAqIFRoaXMgY29uc3RydWN0IGNyZWF0ZXMgYSBsYW1iZGEgbGF5ZXIgbG9hZGVkIHdpdGggcmVsZXZhbnQgbGlicmFyaWVzIHRvIHJ1biBnZW5haSBhcHBsaWNhdGlvbnMuIExpYnJhcmllcyBpbmNsdWRlIGJvdG8zLCBib3RvY29yZSwgcmVxdWVzdHMsIHJlcXVlc3RzLWF3czRhdXRoLCBsYW5nY2hhaW4sIG9wZW5zZWFyY2gtcHkgYW5kIG9wZW5haS5cbiAgICAgKiBAcGFyYW0ge2Nkay5BcHB9IHNjb3BlIC0gcmVwcmVzZW50cyB0aGUgc2NvcGUgZm9yIGFsbCB0aGUgcmVzb3VyY2VzLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBpZCAtIHRoaXMgaXMgYSBhIHNjb3BlLXVuaXF1ZSBpZC5cbiAgICAgKiBAcGFyYW0ge0xhbmdjaGFpbkxheWVyUHJvcHN9IHByb3BzIC0gdXNlciBwcm92aWRlZCBwcm9wcyBmb3IgdGhlIGNvbnN0cnVjdC5cbiAgICAgKiBAc2luY2UgMC4wLjBcbiAgICAgKiBAcHVibGljXG4gICAgICovXG4gIGNvbnN0cnVjdG9yKHNjb3BlOiBDb25zdHJ1Y3QsIGlkOiBzdHJpbmcsIHByb3BzOiBMYW5nY2hhaW5MYXllclByb3BzKSB7XG4gICAgc3VwZXIoc2NvcGUsIGlkKTtcblxuICAgIGNvbnN0IGxheWVyID0gbmV3IExheWVyKHRoaXMsICdMYW5nY2hhaW4gTGF5ZXInLCB7XG4gICAgICBwYXRoOiBwYXRoLmpvaW4oX19kaXJuYW1lLCAnLi4vLi4vLi4vLi4vbGF5ZXJzL2xhbmdjaGFpbi1jb21tb24tZGVwcycpLFxuICAgICAgZGVzY3JpcHRpb246ICdEZXBlbmRlbmNpZXMgdG8gYnVpbGQgZ2VuIGFpIGFwcGxpY2F0aW9ucyB3aXRoIHRoZSBsYW5nY2hhaW4gY2xpZW50JyxcbiAgICAgIC4uLnByb3BzLFxuICAgIH0pO1xuXG4gICAgdGhpcy5sYXllciA9IGxheWVyLmxheWVyO1xuICB9XG59XG5cbiJdfQ==