"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.AossCwDashboard = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
/**
 *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance
 *  with the License. A copy of the License is located at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  or in the 'license' file accompanying this file. This file is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES
 *  OR CONDITIONS OF ANY KIND, express or implied. See the License for the specific language governing permissions
 *  and limitations under the License.
 */
const aws_cdk_lib_1 = require("aws-cdk-lib");
const aws_cloudwatch_1 = require("aws-cdk-lib/aws-cloudwatch");
const constructs_1 = require("constructs");
/**
 * The BedrockCwDashboard class.
 */
class AossCwDashboard extends constructs_1.Construct {
    /**
     * Constructs a new instance of the AossCwDashboard class.
     * @param {cdk.App} scope - represents the scope for all the resources.
     * @param {string} id - this is a a scope-unique id.
     * @param {AossCwDashboardProps} props - user provided props for the construct.
     * @since 0.0.0
     * @public
     */
    constructor(scope, id, props) {
        super(scope, id);
        this.dashboard = props.existingDashboard ?? new aws_cloudwatch_1.Dashboard(this, 'AossMetricsDashboard', {
            dashboardName: props.dashboardName ?? 'AossMetricsDashboard',
        });
    }
    /* Provide metrics for a specific aoss collection
     * @param {string} collectionName - Name of the aoss collection to monitor.
     * @param {string} collectionId - Id of the aoss collection to monitor.
     * @param {CollectionMonitoringProps} props - user provided props for monitoring.
    */
    addCollectionMonitoringbyAttributes(collectionName, collectionId, props) {
        const period = props.period ?? aws_cdk_lib_1.Duration.hours(1);
        const clientId = props.clientId ?? aws_cdk_lib_1.Aws.ACCOUNT_ID;
        const dimensionMap = {
            ClientId: clientId,
            CollectionId: collectionId,
            CollectionName: collectionName,
        };
        this.dashboard.addWidgets(new aws_cloudwatch_1.TextWidget({
            markdown: '# OpenSearch Vector Database (collection level)',
            width: 24,
        }));
        // Response codes
        this.dashboard.addWidgets(new aws_cloudwatch_1.GraphWidget({
            title: 'OpenSearch response codes',
            view: aws_cloudwatch_1.GraphWidgetView.TIME_SERIES,
            width: 12,
            left: [
                new aws_cloudwatch_1.Metric({
                    metricName: '2xx',
                    namespace: 'AWS/AOSS',
                    statistic: aws_cloudwatch_1.Stats.SUM,
                    dimensionsMap: dimensionMap,
                    period: period,
                }),
                new aws_cloudwatch_1.Metric({
                    metricName: '3xx',
                    namespace: 'AWS/AOSS',
                    statistic: aws_cloudwatch_1.Stats.SUM,
                    dimensionsMap: dimensionMap,
                    period: period,
                }),
                new aws_cloudwatch_1.Metric({
                    metricName: '4xx',
                    namespace: 'AWS/AOSS',
                    statistic: aws_cloudwatch_1.Stats.SUM,
                    dimensionsMap: dimensionMap,
                    period: period,
                }),
                new aws_cloudwatch_1.Metric({
                    metricName: '5xx',
                    namespace: 'AWS/AOSS',
                    statistic: aws_cloudwatch_1.Stats.SUM,
                    dimensionsMap: dimensionMap,
                    period: period,
                }),
            ],
        }));
        // Search
        this.dashboard.addWidgets(new aws_cloudwatch_1.GraphWidget({
            title: 'Search Request Latency',
            view: aws_cloudwatch_1.GraphWidgetView.TIME_SERIES,
            width: 12,
            left: [new aws_cloudwatch_1.Metric({
                    metricName: 'SearchRequestLatency',
                    namespace: 'AWS/AOSS',
                    statistic: aws_cloudwatch_1.Stats.AVERAGE,
                    dimensionsMap: dimensionMap,
                    period: period,
                })],
        }), new aws_cloudwatch_1.GraphWidget({
            title: 'Search Request Errors',
            view: aws_cloudwatch_1.GraphWidgetView.TIME_SERIES,
            width: 12,
            left: [new aws_cloudwatch_1.Metric({
                    metricName: 'SearchRequestErrors',
                    namespace: 'AWS/AOSS',
                    statistic: aws_cloudwatch_1.Stats.SUM,
                    dimensionsMap: dimensionMap,
                    period: period,
                })],
        }));
        // Ingestion
        this.dashboard.addWidgets(new aws_cloudwatch_1.GraphWidget({
            title: 'Ingestion Request Successes',
            view: aws_cloudwatch_1.GraphWidgetView.TIME_SERIES,
            width: 12,
            left: [new aws_cloudwatch_1.Metric({
                    metricName: 'IngestionRequestSuccess',
                    namespace: 'AWS/AOSS',
                    statistic: aws_cloudwatch_1.Stats.SUM,
                    dimensionsMap: dimensionMap,
                    period: period,
                })],
        }), new aws_cloudwatch_1.GraphWidget({
            title: 'Ingestion Request Rate',
            view: aws_cloudwatch_1.GraphWidgetView.TIME_SERIES,
            width: 12,
            left: [new aws_cloudwatch_1.Metric({
                    metricName: 'IngestionRequestRate',
                    namespace: 'AWS/AOSS',
                    statistic: aws_cloudwatch_1.Stats.AVERAGE,
                    dimensionsMap: dimensionMap,
                    period: period,
                })],
        }));
        this.dashboard.addWidgets(new aws_cloudwatch_1.GraphWidget({
            title: 'Ingestion Request Latency',
            view: aws_cloudwatch_1.GraphWidgetView.TIME_SERIES,
            width: 12,
            left: [new aws_cloudwatch_1.Metric({
                    metricName: 'IngestionRequestLatency',
                    namespace: 'AWS/AOSS',
                    statistic: aws_cloudwatch_1.Stats.AVERAGE,
                    dimensionsMap: dimensionMap,
                    period: period,
                })],
        }), new aws_cloudwatch_1.GraphWidget({
            title: 'Ingestion Request Errors',
            view: aws_cloudwatch_1.GraphWidgetView.TIME_SERIES,
            width: 12,
            left: [new aws_cloudwatch_1.Metric({
                    metricName: 'IngestionRequestErrors',
                    namespace: 'AWS/AOSS',
                    statistic: aws_cloudwatch_1.Stats.SUM,
                    dimensionsMap: dimensionMap,
                    period: period,
                })],
        }));
    }
    /* Provide metrics for a specific aoss collection
     * @param {string} collection - CfnCollection to monitor.
     * @param {CollectionMonitoringProps} props - user provided props for monitoring.
    */
    addCollectionMonitoringByCollection(collection, props) {
        this.addCollectionMonitoringbyAttributes(collection.name, collection.attrId, props);
    }
    /* Provide metrics for a specific aoss index
     * @param {string} collectionName - Name of the aoss collection to monitor.
     * @param {string} collectionId - Id of the aoss collection to monitor.
     * @param {string} IndexName - Name of the aoss index to monitor.
     * @param {string} IndexId - Id of the aoss index to monitor.
     * @param {IndexMonitoringProps} props - user provided props for monitoring.
    */
    addIndexMonitoringByAtributes(collectionName, collectionId, IndexName, IndexId, props) {
        const period = props.period ?? aws_cdk_lib_1.Duration.hours(1);
        const clientId = props.clientId ?? aws_cdk_lib_1.Aws.ACCOUNT_ID;
        const dimensionMap = {
            ClientId: clientId,
            CollectionId: collectionId,
            CollectionName: collectionName,
            IndexId: IndexId,
            IndexName: IndexName,
        };
        this.dashboard.addWidgets(new aws_cloudwatch_1.TextWidget({
            markdown: '# OpenSearch Vector Database (index level)',
            width: 24,
        }));
        this.dashboard.addWidgets(new aws_cloudwatch_1.GraphWidget({
            title: 'Deleted documents',
            view: aws_cloudwatch_1.GraphWidgetView.TIME_SERIES,
            width: 12,
            left: [new aws_cloudwatch_1.Metric({
                    metricName: 'DeletedDocuments',
                    namespace: 'AWS/AOSS',
                    statistic: aws_cloudwatch_1.Stats.SUM,
                    dimensionsMap: dimensionMap,
                    period: period,
                })],
        }), new aws_cloudwatch_1.GraphWidget({
            title: 'Searchable documents',
            view: aws_cloudwatch_1.GraphWidgetView.TIME_SERIES,
            width: 12,
            left: [new aws_cloudwatch_1.Metric({
                    metricName: 'SearchableDocuments',
                    namespace: 'AWS/AOSS',
                    statistic: aws_cloudwatch_1.Stats.SUM,
                    dimensionsMap: dimensionMap,
                    period: period,
                })],
        }));
        this.dashboard.addWidgets(new aws_cloudwatch_1.GraphWidget({
            title: 'S3 storage consumption',
            view: aws_cloudwatch_1.GraphWidgetView.TIME_SERIES,
            width: 12,
            left: [new aws_cloudwatch_1.Metric({
                    metricName: 'StorageUsedInS3',
                    namespace: 'AWS/AOSS',
                    statistic: aws_cloudwatch_1.Stats.SUM,
                    dimensionsMap: dimensionMap,
                    period: period,
                })],
        }), new aws_cloudwatch_1.GraphWidget({
            title: 'Document ingestion rate',
            view: aws_cloudwatch_1.GraphWidgetView.TIME_SERIES,
            width: 12,
            left: [new aws_cloudwatch_1.Metric({
                    metricName: 'IngestionDocumentRate',
                    namespace: 'AWS/AOSS',
                    statistic: aws_cloudwatch_1.Stats.SUM,
                    dimensionsMap: dimensionMap,
                    period: period,
                })],
        }));
        this.dashboard.addWidgets(new aws_cloudwatch_1.GraphWidget({
            title: 'Ingestion errors',
            view: aws_cloudwatch_1.GraphWidgetView.TIME_SERIES,
            width: 12,
            left: [new aws_cloudwatch_1.Metric({
                    metricName: 'IngestionDocumentErrors',
                    namespace: 'AWS/AOSS',
                    statistic: aws_cloudwatch_1.Stats.SUM,
                    dimensionsMap: dimensionMap,
                    period: period,
                })],
        }), new aws_cloudwatch_1.GraphWidget({
            title: 'Document data rate',
            view: aws_cloudwatch_1.GraphWidgetView.TIME_SERIES,
            width: 12,
            left: [new aws_cloudwatch_1.Metric({
                    metricName: 'IngestionDataRate',
                    namespace: 'AWS/AOSS',
                    statistic: aws_cloudwatch_1.Stats.SUM,
                    dimensionsMap: dimensionMap,
                    period: period,
                })],
        }));
    }
}
exports.AossCwDashboard = AossCwDashboard;
_a = JSII_RTTI_SYMBOL_1;
AossCwDashboard[_a] = { fqn: "@cdklabs/generative-ai-cdk-constructs.AossCwDashboard", version: "0.1.285" };
//# sourceMappingURL=data:application/json;base64,