import * as ec2 from 'aws-cdk-lib/aws-ec2';
import * as events from 'aws-cdk-lib/aws-events';
import * as rds from 'aws-cdk-lib/aws-rds';
import * as s3 from 'aws-cdk-lib/aws-s3';
import * as sqs from 'aws-cdk-lib/aws-sqs';
import * as stepfunctions from 'aws-cdk-lib/aws-stepfunctions';
import { Construct } from 'constructs';
import { BaseClass } from '../../../common/base-class/base-class';
import { DockerLambdaCustomProps } from '../../../common/props/DockerLambdaCustomProps';
export declare enum DbName {
    MYSQL = "MySQL",
    POSTGRESQL = "PostgreSQL"
}
export declare enum MetatdataSource {
    CONFIG_FILE = "config_file",
    KNOWLEDGE_BASE = "knowledge_base"
}
export interface TextToSqlProps {
    /**
     * Optional. The construct creates a custom VPC based on vpcProps.
     * Providing both this and existingVpc is an error.
     *
     * @default - none
     */
    readonly vpcProps?: ec2.VpcProps;
    /**
     * Optional. An existing VPC can be used to deploy the construct.
     * Providing both this and vpcProps is an error.
     *
     * @default - none
     */
    readonly existingVpc?: ec2.IVpc;
    /**
     * Optional. An existing subnet group can be used to deploy the construct.
     *
     * @default - none
     */
    readonly existingSubnetGroup?: rds.SubnetGroup;
    /**
     * Optional. Security group for the lambda function which this construct will use.
     * If no exisiting security group is provided it will create one from the vpc.
     * @default - none
     */
    readonly existingLambdaSecurityGroup?: ec2.SecurityGroup;
    /**
     * Optional. Security group for the db instance which this construct will use.
     * If no exisiting security group is provided it will create one from the vpc.
     * @default - none
     */
    readonly existingDBSecurityGroup?: ec2.SecurityGroup;
    /**
     * Value will be appended to resources name.
     *
     * @default - _dev
     */
    readonly stage?: string;
    /**
     * Enable observability. Warning: associated cost with the services
     * used. Best practice to enable by default.
     *
     * @default - true
     */
    readonly observability?: boolean;
    /**
     * Database name. This is the target database against which the query will be generated.
     */
    readonly dbName: DbName;
    /**
     *  Database secret. DB credentials to connect to Database.
     */
    readonly databaseSecretARN: string;
    /**
     *  Optional. db port number.
     *  @default -1534
     */
    readonly dbPort?: number;
    /**
     * Optional. Allows to provide custom lambda code for all pre steps required before generating the query.
     * If not provided, default code will be used.
     *
     */
    readonly customQueryConfigurerLambdaProps?: DockerLambdaCustomProps | undefined;
    /**
     * Optional. Allows to provide custom lambda code for generating the query.
     * If not provided, default code will be used.
     *
     */
    readonly customQueryGeneratorLambdaProps?: DockerLambdaCustomProps | undefined;
    /**
     * Optional. Allows to provide custom lambda code for executing the query.
     * If not provided, default code will be used.
     *
     */
    readonly customQueryExecutorLambdaProps?: DockerLambdaCustomProps | undefined;
    /**
     * The source of metatdata. This metadata is required to reduce the natual language ambiguity
     * in order to generate the correct sql query. A knowledge layer is used to map the natural language
     * to the database schema.
     * Two metatdata source are supported:
     * 1: config_file - A local json file containing the knowledge layer key value pair.
     * 2: Knowledge base - Semantic search is used to fetch the knowledge layer from AWS knowledge base
     * @default - config_file
     */
    readonly metadataSource: string;
    /**
     * Optional. User provided props to override the default props for the S3 Bucket.
     *
     * @default - Default props are used
     */
    readonly configAssetsBucketProps?: s3.BucketProps;
    /**
     * Optional. Existing s3 Bucket to store the config files.
     *
     * @default - None
     */
    readonly existingconfigAssetsBucketObj?: s3.IBucket;
    /**
     * Optional. Existing instance of event bus, providing both this and `eventBusProps` will cause an error.
     *
     * @default - None.
     */
    readonly existingEventBusInterface?: events.IEventBus;
    /**
     * Optional user provided event bus props
     *
     * @default - Default props are used.
     */
    readonly eventBusProps?: events.EventBusProps;
}
export declare class TextToSql extends BaseClass {
    /**
     * Returns the instance of ec2.IVpc used by the construct
     */
    readonly vpc: ec2.IVpc;
    /**
     * Returns the instance of subnet group used by the construct
     */
    readonly subnetGroup: rds.SubnetGroup;
    /**
     * Returns the instance of ec2.ISecurityGroup used by the construct
     */
    readonly lambdaSecurityGroup: ec2.SecurityGroup;
    /**
     * Returns the instance of ec2.ISecurityGroup used by the construct
     */
    readonly dbSecurityGroup: ec2.SecurityGroup;
    /**
     * Returns the instance of s3.IBucket used by the construct
     */
    readonly configAssetBucket: s3.IBucket;
    /**
     * Returns the instance of EventBus used by the construct
     */
    readonly eventBus?: events.IEventBus;
    /**
     * Returns the instance of EventBus used by the construct
     */
    readonly eventsRule?: events.Rule;
    /**
     * Returns the instance of feedback Queue  used by the construct
     */
    readonly feedbackQueue: sqs.Queue;
    /**
     * Returns the instance of output Queue used by the construct
     */
    readonly outputQueue: sqs.Queue;
    /**
     * Returns the Instance of stepfunction created by the construct
     */
    readonly stepFunction?: stepfunctions.StateMachine;
    /**
     * Constructs a new instance of the TextToSql class.
     * @param {Construct} scope - represents the scope for all the resources.
     * @param {string} id - this is a a scope-unique id.
     * @param {TextToSqlProps} props - user provided props for the construct.
     * @since 0.0.0
     * @public
     */
    constructor(scope: Construct, id: string, props: TextToSqlProps);
}
