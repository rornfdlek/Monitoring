"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.TextToSql = exports.MetatdataSource = exports.DbName = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
/**
 *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance
 *  with the License. A copy of the License is located at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  or in the 'license' file accompanying this file. This file is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES
 *  OR CONDITIONS OF ANY KIND, express or implied. See the License for the specific language governing permissions
 *  and limitations under the License.
 */
const path = require("path");
const cdk = require("aws-cdk-lib");
const aws_cdk_lib_1 = require("aws-cdk-lib");
const ec2 = require("aws-cdk-lib/aws-ec2");
const events = require("aws-cdk-lib/aws-events");
const iam = require("aws-cdk-lib/aws-iam");
const lambda = require("aws-cdk-lib/aws-lambda");
const logs = require("aws-cdk-lib/aws-logs");
const rds = require("aws-cdk-lib/aws-rds");
const s3 = require("aws-cdk-lib/aws-s3");
const secretsmanager = require("aws-cdk-lib/aws-secretsmanager");
const sqs = require("aws-cdk-lib/aws-sqs");
const stepfunctions = require("aws-cdk-lib/aws-stepfunctions");
const tasks = require("aws-cdk-lib/aws-stepfunctions-tasks");
const cdk_nag_1 = require("cdk-nag");
const base_class_1 = require("../../../common/base-class/base-class");
const construct_name_enum_1 = require("../../../common/base-class/construct-name-enum");
const custom_resource_provider_helper_1 = require("../../../common/helpers/custom-resource-provider-helper");
const eventBridgeHelper = require("../../../common/helpers/eventbridge-helper");
const lambda_builder_helper_1 = require("../../../common/helpers/lambda-builder-helper");
const s3BucketHelper = require("../../../common/helpers/s3-bucket-helper");
const utils_1 = require("../../../common/helpers/utils");
const vpcHelper = require("../../../common/helpers/vpc-helper");
var DbName;
(function (DbName) {
    DbName["MYSQL"] = "MySQL";
    DbName["POSTGRESQL"] = "PostgreSQL";
})(DbName || (exports.DbName = DbName = {}));
var MetatdataSource;
(function (MetatdataSource) {
    MetatdataSource["CONFIG_FILE"] = "config_file";
    MetatdataSource["KNOWLEDGE_BASE"] = "knowledge_base";
})(MetatdataSource || (exports.MetatdataSource = MetatdataSource = {}));
class TextToSql extends base_class_1.BaseClass {
    /**
     * Constructs a new instance of the TextToSql class.
     * @param {Construct} scope - represents the scope for all the resources.
     * @param {string} id - this is a a scope-unique id.
     * @param {TextToSqlProps} props - user provided props for the construct.
     * @since 0.0.0
     * @public
     */
    constructor(scope, id, props) {
        super(scope, id);
        const baseProps = {
            stage: props.stage,
            constructName: construct_name_enum_1.ConstructName.AWSTEXTTOSQL,
            constructId: id,
            observability: props.observability,
        };
        vpcHelper.CheckVpcProps(props);
        s3BucketHelper.CheckS3Props({
            existingBucketObj: props.existingconfigAssetsBucketObj,
            bucketProps: props.configAssetsBucketProps,
        });
        eventBridgeHelper.CheckEventBridgeProps(props);
        this.updateEnvSuffix(baseProps);
        this.addObservabilityToConstruct(baseProps);
        // vpc
        if (props?.existingVpc && props?.existingSubnetGroup) {
            this.vpc = props.existingVpc;
            this.subnetGroup = props.existingSubnetGroup;
        }
        else {
            this.vpc = vpcHelper.buildVpc(scope, {
                defaultVpcProps: props?.vpcProps,
                vpcName: 'awsTextToSqlVpc',
            });
            this.subnetGroup = new rds.SubnetGroup(this, 'SubnetGroup', {
                vpc: this.vpc,
                vpcSubnets: { subnetType: ec2.SubnetType.PRIVATE_ISOLATED },
                description: 'Subnet group for Aurora Serverless',
            });
        }
        // add VPC endpoints for the compute environment
        vpcHelper.AddAwsServiceEndpoint(this, this.vpc, [vpcHelper.ServiceEndpointTypeEnum.S3,
            vpcHelper.ServiceEndpointTypeEnum.STEP_FUNCTIONS,
            vpcHelper.ServiceEndpointTypeEnum.EVENTS]);
        const dbPort = props.dbPort ? props.dbPort : 1534;
        // Security group
        if (props?.existingLambdaSecurityGroup) {
            this.lambdaSecurityGroup = props.existingLambdaSecurityGroup;
        }
        else {
            this.lambdaSecurityGroup = new ec2.SecurityGroup(this, 'lambdaSecurityGroup', {
                vpc: this.vpc,
                allowAllOutbound: true,
            });
        }
        if (props?.existingDBSecurityGroup) {
            this.dbSecurityGroup = props.existingDBSecurityGroup;
        }
        else {
            this.dbSecurityGroup = new ec2.SecurityGroup(this, 'DBSecurityGroup', {
                vpc: this.vpc,
            });
            // Add an inbound rule to allow traffic from the Lambda security group
            this.dbSecurityGroup.addIngressRule(ec2.Peer.securityGroupId(this.lambdaSecurityGroup.securityGroupId), ec2.Port.tcp(dbPort), // Assuming MySQL is running on port 3306
            'Allow Lambda function to access the database');
        }
        // vpc flowloggroup
        const logGroup = new logs.LogGroup(this, 'textToSqlConstructVPCGroup');
        const vpcFlowLogrole = new iam.Role(this, 'textToSqlConstructRole', {
            assumedBy: new iam.ServicePrincipal('vpc-flow-logs.amazonaws.com'),
        });
        // vpc flowlogs
        new ec2.FlowLog(this, 'FlowLog', {
            resourceType: ec2.FlowLogResourceType.fromVpc(this.vpc),
            destination: ec2.FlowLogDestination.toCloudWatchLogs(logGroup, vpcFlowLogrole),
        });
        // bucket for storing server access logging
        const serverAccessLogBucket = new s3.Bucket(this, 'serverAccessLogBucket' + this.stage, {
            blockPublicAccess: s3.BlockPublicAccess.BLOCK_ALL,
            encryption: s3.BucketEncryption.S3_MANAGED,
            enforceSSL: true,
            versioned: true,
            lifecycleRules: [
                {
                    expiration: cdk.Duration.days(90),
                },
            ],
        });
        // config asset bucket
        if (props?.existingconfigAssetsBucketObj) {
            this.configAssetBucket = props.existingconfigAssetsBucketObj;
        }
        else if (props?.configAssetsBucketProps) {
            this.configAssetBucket = new s3.Bucket(this, 'configasset' + this.stage, props.configAssetsBucketProps);
        }
        else {
            this.configAssetBucket = new s3.Bucket(this, 'configasset' + this.stage, {
                accessControl: s3.BucketAccessControl.PRIVATE,
                blockPublicAccess: s3.BlockPublicAccess.BLOCK_ALL,
                encryption: s3.BucketEncryption.S3_MANAGED,
                bucketName: 'configasset' +
                    this.stage.toLowerCase() +
                    '-' +
                    cdk.Aws.REGION +
                    '-' +
                    cdk.Aws.ACCOUNT_ID,
                serverAccessLogsBucket: serverAccessLogBucket,
                enforceSSL: true,
                versioned: true,
                lifecycleRules: [
                    {
                        expiration: cdk.Duration.days(90),
                    },
                ],
            });
        }
        const configFilePath = path.join(__dirname, '../../../../resources/gen-ai/aws-text-to-sql');
        const textToSQLFunctionRole = new iam.Role(this, 'queryConfigFunctionRole', {
            assumedBy: new iam.ServicePrincipal('lambda.amazonaws.com'),
            inlinePolicies: {
                LambdaFunctionServiceRolePolicy: new iam.PolicyDocument({
                    statements: [
                        new iam.PolicyStatement({
                            actions: [
                                'logs:CreateLogGroup',
                                'logs:CreateLogStream',
                                'logs:PutLogEvents',
                                'bedrock:InvokeModel',
                                'bedrock:InvokeModelWithResponseStream',
                                's3:GetObject',
                                's3:GetBucketLocation',
                                's3:ListBucket',
                                's3:PutObject',
                            ],
                            resources: [
                                `arn:${aws_cdk_lib_1.Aws.PARTITION}:logs:${aws_cdk_lib_1.Aws.REGION}:${aws_cdk_lib_1.Aws.ACCOUNT_ID}:log-group:/aws/lambda/*`,
                                'arn:' +
                                    aws_cdk_lib_1.Aws.PARTITION +
                                    ':s3:::' +
                                    this.configAssetBucket.bucketName +
                                    '/*',
                                `arn:${aws_cdk_lib_1.Aws.PARTITION}:logs:${aws_cdk_lib_1.Aws.REGION}:${aws_cdk_lib_1.Aws.ACCOUNT_ID}:log-group:/aws/lambda/*`,
                                'arn:' +
                                    aws_cdk_lib_1.Aws.PARTITION +
                                    ':bedrock:' +
                                    aws_cdk_lib_1.Aws.REGION +
                                    '::foundation-model/*',
                            ],
                        }),
                    ],
                }),
            },
        });
        // Minimum permissions for a Lambda function to execute while accessing a resource within a VPC
        textToSQLFunctionRole.addToPolicy(new iam.PolicyStatement({
            effect: iam.Effect.ALLOW,
            actions: [
                'ec2:CreateNetworkInterface',
                'ec2:DeleteNetworkInterface',
                'ec2:AssignPrivateIpAddresses',
                'ec2:UnassignPrivateIpAddresses',
            ],
            resources: [
                'arn:' +
                    aws_cdk_lib_1.Aws.PARTITION +
                    ':ec2:' +
                    aws_cdk_lib_1.Aws.REGION +
                    ':' +
                    aws_cdk_lib_1.Aws.ACCOUNT_ID +
                    ':*/*',
            ],
        }));
        textToSQLFunctionRole.addToPolicy(new iam.PolicyStatement({
            effect: iam.Effect.ALLOW,
            actions: ['ec2:DescribeNetworkInterfaces'],
            resources: ['*'],
        }));
        textToSQLFunctionRole.addToPolicy(new iam.PolicyStatement({
            effect: iam.Effect.ALLOW,
            actions: ['s3:ListBucket'],
            resources: [
                'arn:' + aws_cdk_lib_1.Aws.PARTITION + ':s3:::' + this.configAssetBucket.bucketName,
            ],
        }));
        const configLoaderPolicy = new iam.ManagedPolicy(this, 'AuroraPgPolicy', {
            managedPolicyName: (0, utils_1.generatePhysicalNameV2)(this, 'configLoaderPolicy', {
                maxLength: 32,
                lower: true,
            }),
            statements: [
                new iam.PolicyStatement({
                    actions: [
                        'ec2:DescribeInstances',
                        'ec2:CreateNetworkInterface',
                        'ec2:AttachNetworkInterface',
                        'ec2:DescribeNetworkInterfaces',
                        'autoscaling:CompleteLifecycleAction',
                        'ec2:DeleteNetworkInterface',
                    ],
                    resources: ['*'],
                }),
                new iam.PolicyStatement({
                    actions: [
                        'logs:CreateLogGroup',
                        'logs:CreateLogStream',
                        'logs:PutLogEvents',
                        'bedrock:InvokeModel',
                        'bedrock:InvokeModelWithResponseStream',
                        's3:GetObject',
                        's3:GetBucketLocation',
                        's3:ListBucket',
                        's3:PutObject',
                    ],
                    resources: [
                        `arn:${aws_cdk_lib_1.Aws.PARTITION}:logs:${aws_cdk_lib_1.Aws.REGION}:${aws_cdk_lib_1.Aws.ACCOUNT_ID}:log-group:/aws/lambda/*`,
                        'arn:' +
                            aws_cdk_lib_1.Aws.PARTITION +
                            ':s3:::' +
                            this.configAssetBucket.bucketName +
                            '/*',
                        `arn:${aws_cdk_lib_1.Aws.PARTITION}:logs:${aws_cdk_lib_1.Aws.REGION}:${aws_cdk_lib_1.Aws.ACCOUNT_ID}:log-group:/aws/lambda/*`,
                        'arn:' +
                            aws_cdk_lib_1.Aws.PARTITION +
                            ':bedrock:' +
                            aws_cdk_lib_1.Aws.REGION +
                            '::foundation-model/*',
                    ],
                }),
            ],
        });
        const customResource = (0, custom_resource_provider_helper_1.buildCustomResourceProvider)({
            providerName: 'ConfigFileLoaderCRProvider',
            vpc: this.vpc,
            securityGroup: this.lambdaSecurityGroup,
            codePath: path.join(__dirname, '../../../../lambda/aws-text-to-sql'),
            handler: 'custom_resources.on_event',
            runtime: cdk.aws_lambda.Runtime.PYTHON_3_12,
        });
        const crProvider = customResource.getProvider(this);
        crProvider.role.addManagedPolicy(configLoaderPolicy);
        const configFileLoader = new cdk.CustomResource(this, 'ConfigFileLoader', {
            resourceType: 'Custom::ConfigFileLoader',
            serviceToken: crProvider.serviceToken,
            properties: {
                configBucket: this.configAssetBucket.bucketName,
                configFilePath: configFilePath,
            },
        });
        configFileLoader.node.addDependency(this.configAssetBucket);
        //crProvider.role.node.addDependency(configLoaderPolicy);
        cdk_nag_1.NagSuppressions.addResourceSuppressions(textToSQLFunctionRole, [
            {
                id: 'AwsSolutions-IAM5',
                reason: 'AWSLambdaBasicExecutionRole is used.',
            },
        ], true);
        const reformulateQuestionFunctionName = (0, utils_1.generatePhysicalNameV2)(this, 'reformulateQuestionFunction' + this.stage, { maxLength: 63, lower: true });
        const reformulateQuestionFunctionProps = {
            functionName: reformulateQuestionFunctionName,
            description: 'Lambda function to reformulate user question',
            code: lambda.DockerImageCode.fromImageAsset(path.join(__dirname, '../../../../lambda/aws-text-to-sql/reformulate_question')),
            vpc: this.vpc,
            vpcSubnets: { subnetType: ec2.SubnetType.PRIVATE_ISOLATED },
            securityGroups: [this.lambdaSecurityGroup],
            memorySize: (0, utils_1.lambdaMemorySizeLimiter)(this, 1769 * 4),
            timeout: aws_cdk_lib_1.Duration.minutes(10),
            tracing: this.lambdaTracing,
            role: textToSQLFunctionRole,
            environment: {
                DB_NAME: props.dbName,
                METADATA_SOURCE: props.metadataSource,
                CONFIG_BUCKET: this.configAssetBucket.bucketName,
            },
        };
        // Lambda function to load  the config and do all pre steps before query generation.
        const reformulateQuestionFunction = (0, lambda_builder_helper_1.buildDockerLambdaFunction)(this, 'reformulateQuestionFunction' + this.stage, reformulateQuestionFunctionProps, props.customQueryConfigurerLambdaProps);
        const queryGeneratorFunctionName = (0, utils_1.generatePhysicalNameV2)(this, 'queryGeneratorFunction' + this.stage, { maxLength: 63, lower: true });
        const queryGeneratorFunctionProps = {
            functionName: queryGeneratorFunctionName,
            description: 'Lambda function to generate the query based on user question.',
            code: lambda.DockerImageCode.fromImageAsset(path.join(__dirname, '../../../../lambda/aws-text-to-sql/query_generator')),
            vpc: this.vpc,
            vpcSubnets: { subnetType: ec2.SubnetType.PRIVATE_ISOLATED },
            securityGroups: [this.lambdaSecurityGroup],
            memorySize: (0, utils_1.lambdaMemorySizeLimiter)(this, 1769 * 4),
            timeout: aws_cdk_lib_1.Duration.minutes(10),
            tracing: this.lambdaTracing,
            role: textToSQLFunctionRole,
            environment: {
                DB_NAME: props.dbName,
                CONFIG_BUCKET: this.configAssetBucket.bucketName,
                SECRET_ARN: props.databaseSecretARN,
            },
        };
        // Lambda function used to generate the query
        const queryGeneratorFunction = (0, lambda_builder_helper_1.buildDockerLambdaFunction)(this, 'queryGeneratorFunction' + this.stage, queryGeneratorFunctionProps, props.customQueryGeneratorLambdaProps);
        // Lambda function used to execute the query
        const queryExecutorFunctionName = (0, utils_1.generatePhysicalNameV2)(this, 'queryExecutorFunctionName' + this.stage, { maxLength: 63, lower: true });
        const queryExecutorFunctionProps = {
            functionName: queryExecutorFunctionName,
            description: 'Lambda function to execute the query.',
            code: lambda.DockerImageCode.fromImageAsset(path.join(__dirname, '../../../../lambda/aws-text-to-sql/query_executor')),
            vpc: this.vpc,
            vpcSubnets: { subnetType: ec2.SubnetType.PRIVATE_ISOLATED },
            securityGroups: [this.lambdaSecurityGroup],
            memorySize: (0, utils_1.lambdaMemorySizeLimiter)(this, 1769 * 4),
            timeout: aws_cdk_lib_1.Duration.minutes(10),
            tracing: this.lambdaTracing,
            role: textToSQLFunctionRole,
            environment: {
                DB_NAME: props.dbName,
                CONFIG_BUCKET: this.configAssetBucket.bucketName,
                SECRET_ARN: props.databaseSecretARN,
            },
        };
        // Lambda function used to generate the query
        const queryExecutorFunction = (0, lambda_builder_helper_1.buildDockerLambdaFunction)(this, 'queryExecutorFunctionName' + this.stage, queryExecutorFunctionProps, props.customQueryExecutorLambdaProps);
        // lambda function for autocorrect loop
        const autocorrectQueryFunctionName = (0, utils_1.generatePhysicalNameV2)(this, 'autocorrectQueryFunction' + this.stage, { maxLength: 63, lower: true });
        const autocorrectQueryFunctionProps = {
            functionName: autocorrectQueryFunctionName,
            description: 'Lambda function to keep the count of autocorrect loop.',
            code: lambda.DockerImageCode.fromImageAsset(path.join(__dirname, '../../../../lambda/aws-text-to-sql/query_autocorrect')),
            vpc: this.vpc,
            vpcSubnets: { subnetType: ec2.SubnetType.PRIVATE_ISOLATED },
            securityGroups: [this.lambdaSecurityGroup],
            memorySize: (0, utils_1.lambdaMemorySizeLimiter)(this, 1769 * 4),
            timeout: aws_cdk_lib_1.Duration.minutes(10),
            tracing: this.lambdaTracing,
            role: textToSQLFunctionRole,
        };
        const autocorrectQueryFunction = (0, lambda_builder_helper_1.buildDockerLambdaFunction)(this, 'autocorrectQueryFunction' + this.stage, autocorrectQueryFunctionProps, undefined);
        const feedbackQueueName = (0, utils_1.generatePhysicalNameV2)(this, 'feedbackQueue' + this.stage, { maxLength: 63, lower: true });
        const queue = new sqs.Queue(this, 'userFeedbackQueue', {
            queueName: feedbackQueueName,
            visibilityTimeout: aws_cdk_lib_1.Duration.seconds(3600),
        });
        queue.addToResourcePolicy(new iam.PolicyStatement({
            effect: iam.Effect.DENY,
            principals: [new iam.AnyPrincipal()],
            actions: ['sqs:*'],
            resources: [queue.queueArn],
            conditions: {
                Bool: {
                    'aws:SecureTransport': 'false',
                },
            },
        }));
        this.feedbackQueue = queue;
        const outputQueueName = (0, utils_1.generatePhysicalNameV2)(this, 'outputQueue' + this.stage, { maxLength: 63, lower: true });
        const outputQueue = new sqs.Queue(this, 'outputQueue', {
            queueName: outputQueueName,
            visibilityTimeout: aws_cdk_lib_1.Duration.seconds(3600),
        });
        outputQueue.addToResourcePolicy(new iam.PolicyStatement({
            effect: iam.Effect.DENY,
            principals: [new iam.AnyPrincipal()],
            actions: ['sqs:*'],
            resources: [outputQueue.queueArn],
            conditions: {
                Bool: {
                    'aws:SecureTransport': 'false',
                },
            },
        }));
        this.outputQueue = outputQueue;
        const dbsecret = secretsmanager.Secret.fromSecretCompleteArn(this, 'dbsecret', props.databaseSecretARN);
        dbsecret.grantRead(queryGeneratorFunction);
        dbsecret.grantRead(queryExecutorFunction);
        const reformulateQuestionState = new tasks.LambdaInvoke(this, 'reformulate_question', {
            lambdaFunction: reformulateQuestionFunction,
            inputPath: '$.detail',
            resultPath: '$.queryConfig',
        });
        const reformulatedQuestionFeedbackState = new tasks.SqsSendMessage(this, 'get_feedback_on_reformulated_question', {
            queue,
            messageBody: stepfunctions.TaskInput.fromObject({
                message: 'Following is the reformulated question. Do you agree with the new question?',
                reformualted_question: stepfunctions.TaskInput.fromJsonPathAt('$.reformulated_user_question'),
                user_question: stepfunctions.TaskInput.fromJsonPathAt('$.user_question'),
                question_unique_id: stepfunctions.TaskInput.fromJsonPathAt('$.question_unique_id'),
                execute_sql_strategy: stepfunctions.TaskInput.fromJsonPathAt('$.execute_sql_strategy'),
                execution_start_time: stepfunctions.TaskInput.fromJsonPathAt('$.execution_start_time'),
                TaskToken: stepfunctions.JsonPath.taskToken,
            }),
            integrationPattern: stepfunctions.IntegrationPattern.WAIT_FOR_TASK_TOKEN,
        });
        const alternateQueryGeneratorState = new tasks.LambdaInvoke(this, 'generate_alternate_query', {
            lambdaFunction: queryGeneratorFunction,
            resultPath: '$.queryConfig',
        });
        // SF loggroup
        const sflogGroup = new logs.LogGroup(this, 'TextToSqlStepFunctionLogGroup', {
            logGroupName: '/aws/vendedlogs/states/TextToSqlStepFunction',
            removalPolicy: cdk.RemovalPolicy.DESTROY,
        });
        const autocorrectChoiceState = new stepfunctions.Choice(this, 'is_autocorrect_required?', {});
        const configureCountState = new stepfunctions.Pass(this, 'configure_count', {
            result: stepfunctions.Result.fromObject({
                count: 3,
                index: 0,
                step: 1,
            }),
            resultPath: '$.iterator',
        });
        const iteratorState = new tasks.LambdaInvoke(this, 'iterator', {
            lambdaFunction: autocorrectQueryFunction,
            resultPath: '$.iterator',
        });
        const isCountReachedState = new stepfunctions.Choice(this, 'is_count_reached', {
        //inputPath: '$.iterator',
        });
        // const queryGeneratorTwoState = new tasks.LambdaInvoke(
        //   this,
        //   'generate_query_path_two',
        //   {
        //     lambdaFunction: queryGeneratorFunction,
        //     resultPath: '$.queryConfig',
        //   },
        // );
        const outputState = new tasks.SqsSendMessage(this, 'publish_query_result', {
            queue: outputQueue,
            messageBody: stepfunctions.TaskInput.fromObject({
                result: stepfunctions.TaskInput.fromJsonPathAt('$.queryConfig.Payload.result'),
                user_question: stepfunctions.TaskInput.fromJsonPathAt('$.user_question'),
                question_unique_id: stepfunctions.TaskInput.fromJsonPathAt('$.question_unique_id'),
            }),
        });
        const alternateQueryCorrectChoiceState = new stepfunctions.Choice(this, 'is_alternate_query_correct?', {
        //inputPath: '$.queryConfig.Payload',
        });
        const alternateQueryExecutorState = new tasks.LambdaInvoke(this, 'execute_alternate_query', {
            lambdaFunction: queryExecutorFunction,
            resultPath: '$.queryConfig',
        }).next(alternateQueryCorrectChoiceState
            .when(stepfunctions.Condition.stringEquals('$.queryConfig.Payload.status', 'QUERY_ERROR'), iteratorState)
            .otherwise(outputState));
        const queryExecutorState = new tasks.LambdaInvoke(this, 'execute_query', {
            lambdaFunction: queryExecutorFunction,
            resultPath: '$.queryConfig',
        }).next(autocorrectChoiceState
            .when(stepfunctions.Condition.stringEquals('$.queryConfig.Payload.status', 'QUERY_ERROR'), configureCountState
            .next(iteratorState)
            .next(isCountReachedState
            .when(stepfunctions.Condition.booleanEquals('$.iterator.Payload.continue', true), alternateQueryGeneratorState.next(alternateQueryExecutorState))
            .otherwise(outputState)))
            .otherwise(outputState));
        const feedbackChoiceStateOne = new stepfunctions.Choice(this, 'is_feedback_req_on_reformualted_question?', {
            inputPath: '$.queryConfig.Payload',
        });
        // const feedbackChoiceStateTwo = new stepfunctions.Choice(
        //   this,
        //   'is_feedback_req_on_generated_query_path_two?',
        //   {},
        // );
        const executeQueryChoiceState = new stepfunctions.Choice(this, 'is_query_execution_req?', {})
            .when(stepfunctions.Condition.stringEquals('$.execute_sql_strategy', 'disabled'), outputState)
            .otherwise(queryExecutorState);
        const generatedQueryFeedbackState = new tasks.SqsSendMessage(this, 'get_feedback_on_generated_query', {
            queue,
            messageBody: stepfunctions.TaskInput.fromObject({
                message: 'Following is the generated query. Do you agree with it or want to override?',
                generated_query: stepfunctions.JsonPath.stringAt('$.queryConfig.Payload.result'),
                execute_sql_strategy: stepfunctions.TaskInput.fromJsonPathAt('$.execute_sql_strategy'),
                execution_start_time: stepfunctions.TaskInput.fromJsonPathAt('$.execution_start_time'),
                reformualted_question: stepfunctions.TaskInput.fromJsonPathAt('$.reformulated_user_question'),
                user_question: stepfunctions.TaskInput.fromJsonPathAt('$.user_question'),
                question_unique_id: stepfunctions.TaskInput.fromJsonPathAt('$.question_unique_id'),
                TaskToken: stepfunctions.JsonPath.taskToken,
            }),
            integrationPattern: stepfunctions.IntegrationPattern.WAIT_FOR_TASK_TOKEN,
        }).next(executeQueryChoiceState);
        const generateQueryfeedbackChoiceState = new stepfunctions.Choice(this, 'is_feedback_req_on_generated_query ?', {})
            .when(stepfunctions.Condition.stringEquals('$.queryConfig.Payload.sql_validation_strategy', 'human'), generatedQueryFeedbackState)
            .otherwise(executeQueryChoiceState);
        const queryGeneratorState = new tasks.LambdaInvoke(this, 'generate_query', {
            lambdaFunction: queryGeneratorFunction,
            resultPath: '$.queryConfig',
        }).next(generateQueryfeedbackChoiceState);
        // event bridge
        // Create an IAM role for Events to start the State Machine
        const eventsRole = new iam.Role(this, 'EventsRuleRole', {
            assumedBy: new iam.ServicePrincipal('events.amazonaws.com'),
        });
        if (props?.existingEventBusInterface) {
            this.eventBus = props.existingEventBusInterface;
        }
        else if (props?.eventBusProps) {
            this.eventBus = eventBridgeHelper.buildEventBus(this, {
                eventBusProps: props.eventBusProps,
            });
        }
        else {
            this.eventBus = new events.EventBus(this, 'textToSqlBus' + props.stage, {
                eventBusName: (0, utils_1.generatePhysicalNameV2)(this, 'textToSql' + this.stage, { maxLength: 63, lower: true }),
            });
        }
        this.stepFunction = new stepfunctions.StateMachine(this, 'textToSqlStepFunction' + props.stage, {
            definition: reformulateQuestionState.next(feedbackChoiceStateOne
                .when(stepfunctions.Condition.stringEquals('$.semantic_layer_strategy', 'human'), reformulatedQuestionFeedbackState.next(queryGeneratorState))
                .otherwise(queryGeneratorState)),
            logs: {
                destination: sflogGroup,
                level: stepfunctions.LogLevel.ALL,
            },
            tracingEnabled: true,
            timeout: aws_cdk_lib_1.Duration.days(90),
        });
        this.eventsRule = new events.Rule(this, 'EventsRule', {
            eventBus: this.eventBus,
            targets: [new aws_cdk_lib_1.aws_events_targets.SfnStateMachine(this.stepFunction, {
                    role: eventsRole,
                })],
            eventPattern: {
                source: ['webclient'],
            },
        });
        this.eventBus.grantPutEventsTo(this.stepFunction);
        // Grant the start execution permission to the Events service
        this.stepFunction.grantStartExecution(eventsRole);
    } // end construct
}
exports.TextToSql = TextToSql;
_a = JSII_RTTI_SYMBOL_1;
TextToSql[_a] = { fqn: "@cdklabs/generative-ai-cdk-constructs.TextToSql", version: "0.1.285" };
//# sourceMappingURL=data:application/json;base64,