"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.LlamaIndexDataLoader = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
/**
 *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance
 *  with the License. A copy of the License is located at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  or in the 'license' file accompanying this file. This file is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES
 *  OR CONDITIONS OF ANY KIND, express or implied. See the License for the specific language governing permissions
 *  and limitations under the License.
 */
const node_path_1 = require("node:path");
const aws_cdk_lib_1 = require("aws-cdk-lib");
const aws_ec2_1 = require("aws-cdk-lib/aws-ec2");
const aws_ecr_assets_1 = require("aws-cdk-lib/aws-ecr-assets");
const aws_ecs_1 = require("aws-cdk-lib/aws-ecs");
const aws_ecs_patterns_1 = require("aws-cdk-lib/aws-ecs-patterns");
const aws_iam_1 = require("aws-cdk-lib/aws-iam");
const aws_kms_1 = require("aws-cdk-lib/aws-kms");
const aws_s3_1 = require("aws-cdk-lib/aws-s3");
const aws_s3_notifications_1 = require("aws-cdk-lib/aws-s3-notifications");
const aws_sns_1 = require("aws-cdk-lib/aws-sns");
const aws_sns_subscriptions_1 = require("aws-cdk-lib/aws-sns-subscriptions");
const aws_sqs_1 = require("aws-cdk-lib/aws-sqs");
const aws_ssm_1 = require("aws-cdk-lib/aws-ssm");
const cdk_nag_1 = require("cdk-nag");
const base_class_1 = require("../../../common/base-class");
class LlamaIndexDataLoader extends base_class_1.BaseClass {
    constructor(scope, id, props) {
        super(scope, id);
        const baseProps = {
            stage: props.stage,
            constructName: base_class_1.ConstructName.AWSLLAMAINDEXDATALOADER,
            constructId: id,
            observability: props.observability,
        };
        this.updateEnvSuffix(baseProps);
        this.addObservabilityToConstruct(baseProps);
        // Update the optional properties to their defaults
        this.dockerImageAssetDirectory = props.dockerImageAssetDirectory ?? (0, node_path_1.join)(__dirname, '..', '..', '..', '..', 'resources', 'gen-ai', 'aws-llama-index-data-loader', 'docker');
        this.memoryLimitMiB = props.memoryLimitMiB ?? 2048;
        this.containerLoggingLevel = props.containerLoggingLevel ?? 'WARNING';
        let bucketsInvolved = [];
        if (props.outputBucket) {
            this.outputBucket = props.outputBucket;
        }
        else {
            this.bucketKey = new aws_kms_1.Key(this, 'LogBucketKey', {
                enableKeyRotation: true,
            });
            this.logBucket = new aws_s3_1.Bucket(this, 'LogBucket', {
                enforceSSL: true,
                versioned: true,
                encryption: aws_s3_1.BucketEncryption.KMS,
                encryptionKey: this.bucketKey,
                bucketKeyEnabled: true,
                removalPolicy: aws_cdk_lib_1.RemovalPolicy.DESTROY,
                autoDeleteObjects: true,
                objectLockEnabled: true,
                objectLockDefaultRetention: {
                    mode: aws_s3_1.ObjectLockMode.GOVERNANCE,
                    duration: aws_cdk_lib_1.Duration.days(1),
                },
                blockPublicAccess: aws_s3_1.BlockPublicAccess.BLOCK_ALL,
            });
            bucketsInvolved.push(this.logBucket);
            this.outputBucket = new aws_s3_1.Bucket(this, 'Output', {
                enforceSSL: true,
                versioned: true,
                serverAccessLogsBucket: this.logBucket,
                serverAccessLogsPrefix: 'output-bucket-access-logs',
                encryption: aws_s3_1.BucketEncryption.KMS,
                encryptionKey: this.bucketKey,
                bucketKeyEnabled: true,
                blockPublicAccess: aws_s3_1.BlockPublicAccess.BLOCK_ALL,
                removalPolicy: aws_cdk_lib_1.RemovalPolicy.DESTROY,
                autoDeleteObjects: true,
                objectLockEnabled: true,
                objectLockDefaultRetention: {
                    mode: aws_s3_1.ObjectLockMode.GOVERNANCE,
                    duration: aws_cdk_lib_1.Duration.days(1),
                },
                lifecycleRules: [
                    {
                        id: 'AbortIncompleteMultipartUpload',
                        enabled: true,
                        abortIncompleteMultipartUploadAfter: aws_cdk_lib_1.Duration.days(1),
                    },
                ],
            });
        }
        bucketsInvolved.push(this.outputBucket);
        // Create a new SSM Parameter holding a String
        const circuitBreakerParameter = new aws_ssm_1.StringParameter(this, 'CircuitBreaker', {
            stringValue: 'False',
        });
        const asset = new aws_ecr_assets_1.DockerImageAsset(this, 'Image', {
            directory: this.dockerImageAssetDirectory,
            platform: aws_ecr_assets_1.Platform.LINUX_AMD64,
        });
        const queue = new aws_sqs_1.Queue(this, 'Queue', {
            visibilityTimeout: aws_cdk_lib_1.Duration.seconds(300),
            enforceSSL: true,
            deadLetterQueue: {
                maxReceiveCount: 3,
                queue: new aws_sqs_1.Queue(this, 'DeadLetterQueue', {
                    enforceSSL: true,
                }),
            },
        });
        const queueProcessingFargateService = new aws_ecs_patterns_1.QueueProcessingFargateService(this, 'Service', {
            cluster: props.vpc === undefined ? new aws_ecs_1.Cluster(this, 'Cluster', {
                containerInsights: true,
            }) : undefined,
            vpc: props.vpc,
            memoryLimitMiB: this.memoryLimitMiB,
            runtimePlatform: {
                cpuArchitecture: aws_ecs_1.CpuArchitecture.X86_64,
                operatingSystemFamily: aws_ecs_1.OperatingSystemFamily.LINUX,
            },
            queue: queue,
            image: aws_ecs_1.ContainerImage.fromDockerImageAsset(asset),
            healthCheck: {
                command: ['CMD-SHELL', '/usr/src/app/healthcheck.sh'],
                interval: aws_cdk_lib_1.Duration.seconds(30),
                timeout: aws_cdk_lib_1.Duration.seconds(30),
                retries: 3,
                startPeriod: aws_cdk_lib_1.Duration.seconds(5),
            },
            enableLogging: true,
            environment: {
                CIRCUIT_BREAKER_SSM_PARAMETER_NAME: circuitBreakerParameter.parameterName,
                LOGGING_LEVEL: this.containerLoggingLevel,
                BUCKET_NAME: this.outputBucket.bucketName,
            },
            minScalingCapacity: 0,
            maxScalingCapacity: 10,
            scalingSteps: [
                { upper: 0, change: -1 },
                { lower: 1, change: +1 }, // because `minScalingCapacity` set at zero
                { lower: 100, change: +1 },
                { lower: 500, change: +5 },
            ],
        });
        this.queueProcessingFargateService = queueProcessingFargateService;
        // Setup Default S3 Example if Docker asset directory is missing
        if (!props.dockerImageAssetDirectory) {
            const rawBucket = new aws_s3_1.Bucket(this, 'Raw', {
                enforceSSL: true,
                versioned: true,
                serverAccessLogsBucket: this.logBucket,
                encryption: aws_s3_1.BucketEncryption.KMS,
                encryptionKey: this.bucketKey,
                bucketKeyEnabled: true,
                serverAccessLogsPrefix: 'raw-bucket-access-logs',
                blockPublicAccess: aws_s3_1.BlockPublicAccess.BLOCK_ALL,
                removalPolicy: aws_cdk_lib_1.RemovalPolicy.DESTROY,
                autoDeleteObjects: true,
                objectLockEnabled: true,
                objectLockDefaultRetention: {
                    mode: aws_s3_1.ObjectLockMode.GOVERNANCE,
                    duration: aws_cdk_lib_1.Duration.days(1),
                },
                lifecycleRules: [
                    {
                        id: 'AbortIncompleteMultipartUpload',
                        enabled: true,
                        abortIncompleteMultipartUploadAfter: aws_cdk_lib_1.Duration.days(1),
                    },
                ],
            });
            bucketsInvolved.push(rawBucket);
            const topicKey = new aws_kms_1.Key(this, 'TopicKey', {
                enableKeyRotation: true,
            });
            const topic = new aws_sns_1.Topic(this, 'Topic', {
                enforceSSL: true,
                masterKey: topicKey,
            });
            topicKey.addToResourcePolicy(new aws_iam_1.PolicyStatement({
                actions: ['kms:Decrypt', 'kms:GenerateDataKey*'],
                resources: ['*'],
                principals: [new aws_iam_1.ServicePrincipal('s3.amazonaws.com')],
            }));
            topic.grantPublish(new aws_iam_1.ServicePrincipal('s3.amazonaws.com'));
            rawBucket.addEventNotification(aws_s3_1.EventType.OBJECT_CREATED, new aws_s3_notifications_1.SnsDestination(topic));
            topic.addSubscription(new aws_sns_subscriptions_1.SqsSubscription(queue));
            this.queueProcessingFargateService.taskDefinition.addToTaskRolePolicy(new aws_iam_1.PolicyStatement({
                effect: aws_iam_1.Effect.ALLOW,
                actions: ['s3:GetObject'],
                resources: [rawBucket.bucketArn, rawBucket.bucketArn + '/*'],
            }));
            if (rawBucket.encryptionKey) {
                rawBucket.encryptionKey.grantDecrypt(this.queueProcessingFargateService.taskDefinition.taskRole);
                this.queueProcessingFargateService.taskDefinition.taskRole.addToPrincipalPolicy(new aws_iam_1.PolicyStatement({
                    effect: aws_iam_1.Effect.ALLOW,
                    actions: ['kms:GenerateDataKey'],
                    resources: [rawBucket.encryptionKey.keyArn],
                }));
            }
        }
        this.queueProcessingFargateService.cluster.vpc.addFlowLog('FlowLog', {
            destination: aws_ec2_1.FlowLogDestination.toS3(this.logBucket, 'vpc-flow-logs'),
        });
        circuitBreakerParameter.grantRead(this.queueProcessingFargateService.taskDefinition.taskRole);
        this.queueProcessingFargateService.taskDefinition.addToTaskRolePolicy(new aws_iam_1.PolicyStatement({
            effect: aws_iam_1.Effect.ALLOW,
            actions: ['s3:PutObject'],
            resources: [this.outputBucket.bucketArn, this.outputBucket.bucketArn + '/*'],
        }));
        if (this.outputBucket.encryptionKey) {
            this.outputBucket.encryptionKey.grantDecrypt(this.queueProcessingFargateService.taskDefinition.taskRole);
            this.queueProcessingFargateService.taskDefinition.taskRole.addToPrincipalPolicy(new aws_iam_1.PolicyStatement({
                effect: aws_iam_1.Effect.ALLOW,
                actions: ['kms:GenerateDataKey'],
                resources: [this.outputBucket.encryptionKey.keyArn],
            }));
        }
        ////////////////////////////////////////////////////////////////////////
        // NagSuppressions
        ////////////////////////////////////////////////////////////////////////
        if (this.logBucket) {
            cdk_nag_1.NagSuppressions.addResourceSuppressions(this.logBucket, [
                {
                    id: 'AwsSolutions-S1',
                    reason: 'There is no need to enable access logging for the AccessLogs bucket.',
                },
            ], true);
        }
        cdk_nag_1.NagSuppressions.addResourceSuppressions(bucketsInvolved, [
            {
                id: 'HIPAA.Security-S3BucketReplicationEnabled',
                reason: 'Replication for this use case is uneccessary.',
            },
            {
                id: 'NIST.800.53.R4-S3BucketReplicationEnabled',
                reason: 'Replication for this use case is uneccessary.',
            },
            {
                id: 'NIST.800.53.R5-S3BucketReplicationEnabled',
                reason: 'Replication for this use case is uneccessary.',
            },
            {
                id: 'PCI.DSS.321-S3BucketReplicationEnabled',
                reason: 'Replication for this use case is uneccessary.',
            },
        ], true);
        cdk_nag_1.NagSuppressions.addResourceSuppressions([this.queueProcessingFargateService.cluster.vpc], [
            {
                id: 'HIPAA.Security-VPCSubnetAutoAssignPublicIpDisabled',
                reason: 'default vpc creation',
            },
            {
                id: 'NIST.800.53.R5-VPCSubnetAutoAssignPublicIpDisabled',
                reason: 'default vpc creation',
            },
            {
                id: 'PCI.DSS.321-VPCSubnetAutoAssignPublicIpDisabled',
                reason: 'default vpc creation',
            },
            {
                id: 'HIPAA.Security-VPCNoUnrestrictedRouteToIGW',
                reason: 'default vpc creation',
            },
            {
                id: 'NIST.800.53.R5-VPCNoUnrestrictedRouteToIGW',
                reason: 'default vpc creation',
            },
            {
                id: 'PCI.DSS.321-VPCNoUnrestrictedRouteToIGW',
                reason: 'default vpc creation',
            },
        ], true);
        // Suppress findings for the BucketNotificationsHandler
        // https://github.com/aws/aws-cdk/issues/9552
        const bucketNotifications = aws_cdk_lib_1.Stack.of(this).node.tryFindChild('BucketNotificationsHandler050a0587b7544547bf325f094a3db834');
        if (bucketNotifications) {
            cdk_nag_1.NagSuppressions.addResourceSuppressions(bucketNotifications, [
                {
                    id: 'AwsSolutions-IAM4',
                    reason: 'AWSLambdaBasicExecutionRole is used by `addEventNotification`',
                    appliesTo: ['Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'],
                },
                {
                    id: 'AwsSolutions-IAM5',
                    reason: 'Suppress all AwsSolutions-IAM5 findings for this stack',
                    appliesTo: ['Resource::*'],
                },
                {
                    id: 'HIPAA.Security-IAMNoInlinePolicy',
                    reason: 'Inline policies are part of the BucketHandlerNotification',
                },
                {
                    id: 'NIST.800.53.R4-IAMNoInlinePolicy',
                    reason: 'Inline policies are part of the BucketHandlerNotification',
                },
                {
                    id: 'NIST.800.53.R5-IAMNoInlinePolicy',
                    reason: 'Inline policies are part of the BucketHandlerNotification',
                },
                {
                    id: 'PCI.DSS.321-IAMNoInlinePolicy',
                    reason: 'Inline policies are part of the BucketHandlerNotification',
                },
            ], true);
        }
        cdk_nag_1.NagSuppressions.addResourceSuppressions(this.queueProcessingFargateService, [
            {
                id: 'AwsSolutions-ECS2',
                reason: 'Environmental variables are okay',
            },
        ], true);
        cdk_nag_1.NagSuppressions.addResourceSuppressions(this.queueProcessingFargateService.taskDefinition, [
            {
                id: 'AwsSolutions-IAM5',
                reason: 'The ecr:GetAuthorizationToken requires "*"',
                appliesTo: [
                    'Resource::*',
                    'Resource::<Raw72517081.Arn>/*',
                    'Resource::<OutputAB65CDDE.Arn>/*',
                ],
            },
        ], true);
        // Inline policies
        let taskDefinitionRoles = [
            this.queueProcessingFargateService.taskDefinition.taskRole,
        ];
        if (this.queueProcessingFargateService.taskDefinition.executionRole) {
            taskDefinitionRoles.push(this.queueProcessingFargateService.taskDefinition.executionRole);
        }
        cdk_nag_1.NagSuppressions.addResourceSuppressions(taskDefinitionRoles, [
            {
                id: 'HIPAA.Security-IAMNoInlinePolicy',
                reason: 'Inline policies are acceptable for this use case.',
            },
            {
                id: 'NIST.800.53.R4-IAMNoInlinePolicy',
                reason: 'Inline policies are acceptable for this use case.',
            },
            {
                id: 'NIST.800.53.R5-IAMNoInlinePolicy',
                reason: 'Inline policies are acceptable for this use case.',
            },
            {
                id: 'PCI.DSS.321-IAMNoInlinePolicy',
                reason: 'Inline policies are acceptable for this use case.',
            },
        ], true);
        // Unencrypted CloudWatch logging
        cdk_nag_1.NagSuppressions.addResourceSuppressions(this.queueProcessingFargateService.taskDefinition, [
            {
                id: 'HIPAA.Security-CloudWatchLogGroupEncrypted',
                reason: 'CloudWatch logging is not encrypted',
            },
            {
                id: 'NIST.800.53.R4-CloudWatchLogGroupEncrypted',
                reason: 'CloudWatch logging is not encrypted',
            },
            {
                id: 'NIST.800.53.R5-CloudWatchLogGroupEncrypted',
                reason: 'CloudWatch logging is not encrypted',
            },
            {
                id: 'PCI.DSS.321-CloudWatchLogGroupEncrypted',
                reason: 'CloudWatch logging is not encrypted',
            },
            {
                id: 'HIPAA.Security-CloudWatchLogGroupRetentionPeriod',
                reason: 'CloudWatch logging is not encrypted',
            },
            {
                id: 'NIST.800.53.R4-CloudWatchLogGroupRetentionPeriod',
                reason: 'CloudWatch logging is not encrypted',
            },
            {
                id: 'NIST.800.53.R5-CloudWatchLogGroupRetentionPeriod',
                reason: 'CloudWatch logging is not encrypted',
            },
            {
                id: 'PCI.DSS.321-CloudWatchLogGroupRetentionPeriod',
                reason: 'CloudWatch logging is not encrypted',
            },
        ], true);
    }
}
exports.LlamaIndexDataLoader = LlamaIndexDataLoader;
_a = JSII_RTTI_SYMBOL_1;
LlamaIndexDataLoader[_a] = { fqn: "@cdklabs/generative-ai-cdk-constructs.LlamaIndexDataLoader", version: "0.1.285" };
//# sourceMappingURL=data:application/json;base64,