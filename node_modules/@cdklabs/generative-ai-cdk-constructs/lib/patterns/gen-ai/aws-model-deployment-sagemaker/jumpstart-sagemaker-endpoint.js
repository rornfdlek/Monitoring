"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.JumpStartSageMakerEndpoint = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const iam = require("aws-cdk-lib/aws-iam");
const sagemaker = require("aws-cdk-lib/aws-sagemaker");
const core_1 = require("aws-cdk-lib/core");
const jumpstart_constants_1 = require("./private/jumpstart-constants");
const sagemaker_endpoint_base_1 = require("./sagemaker-endpoint-base");
const construct_name_enum_1 = require("../../../common/base-class/construct-name-enum");
/**
 * The JumpStartSageMakerEndpoint class.
 */
class JumpStartSageMakerEndpoint extends sagemaker_endpoint_base_1.SageMakerEndpointBase {
    constructor(scope, id, props) {
        super(scope, id);
        const baseProps = {
            constructName: construct_name_enum_1.ConstructName.JUMPSTARTSAGEMAKERENDPOINT,
            constructId: id,
        };
        // No lambda function to use AWS SDK for service metric
        const lambdaFunctions = [];
        this.updateConstructUsageMetricCode(baseProps, scope, lambdaFunctions);
        this.model = props.model;
        this.instanceType = props.instanceType;
        this.instanceCount = Math.max(1, props.instanceCount ?? 1);
        this.acceptEula = props.acceptEula ?? false;
        this.role = props.role ?? this.createSageMakerRole();
        this.grantPrincipal = this.role;
        this.startupHealthCheckTimeoutInSeconds = props.startupHealthCheckTimeoutInSeconds ?? 600;
        this.environment = props.environment;
        this.spec = this.model.bind();
        if (!this.acceptEula && this.spec.requiresEula) {
            throw new Error('The AcceptEula value must be explicitly defined as True in order to accept the EULA for the model ' + this.spec.modelId + '. You are responsible for reviewing and complying with any applicable license terms and making sure they are acceptable for your use case before downloading or using a model.');
        }
        this.region = core_1.Stack.of(this).region;
        if (core_1.Token.isUnresolved(this.region)) {
            throw new Error('Region is unresolved. You should explicitly specify the region in the environment.');
        }
        const instanceType = this.verifyInstanceType();
        const instanseBaseType = instanceType.split('.')[1];
        let model;
        if (this.spec.modelPackageArns) {
            if (this.environment) {
                throw new Error('Environment variables are not supported for model packages.');
            }
            model = this.getModelFromPackage(scope, id, props.vpcConfig);
        }
        else {
            const environment = this.buildEnvironment(instanceType);
            model = this.getModelFromArtifact(scope, id, instanceType, instanseBaseType, environment, props.vpcConfig);
        }
        const endpointConfig = new sagemaker.CfnEndpointConfig(scope, `EndpointConfig-${id}`, {
            productionVariants: [
                {
                    instanceType,
                    initialVariantWeight: 1,
                    initialInstanceCount: this.instanceCount,
                    variantName: 'AllTraffic',
                    modelName: model.getAtt('ModelName').toString(),
                    containerStartupHealthCheckTimeoutInSeconds: this.startupHealthCheckTimeoutInSeconds,
                },
            ],
        });
        endpointConfig.addDependency(model);
        const endpoint = new sagemaker.CfnEndpoint(scope, `${this.spec.modelId}-endpoint-${id}`, {
            endpointConfigName: endpointConfig.getAtt('EndpointConfigName').toString(),
            endpointName: 'jumpstart-' + props.endpointName,
        });
        endpoint.addDependency(endpointConfig);
        this.cfnModel = model;
        this.cfnEndpoint = endpoint;
        this.cfnEndpointConfig = endpointConfig;
        this.endpointArn = endpoint.ref;
    }
    addToRolePolicy(statement) {
        if (!this.role) {
            return;
        }
        this.role.addToPolicy(statement);
    }
    grantInvoke(grantee) {
        return iam.Grant.addToPrincipal({
            grantee,
            actions: ['sagemaker:InvokeEndpoint'],
            resourceArns: [this.endpointArn],
        });
    }
    verifyInstanceType() {
        let instanceType = this.spec.defaultInstanceType;
        if (this.instanceType) {
            instanceType = this.instanceType.toString();
        }
        const supportedInstanceTypes = this.spec.instanceTypes;
        if (!supportedInstanceTypes.includes(instanceType)) {
            throw new Error(`The instance type ${instanceType} is not supported. Default instance type: ${this.spec.defaultInstanceType}. Supported instance types: ${supportedInstanceTypes.join(', ')}.`);
        }
        return instanceType;
    }
    buildEnvironment(instanceType) {
        const configEnvironment = this.spec.instanceVariants?.find((v) => v.instanceType === instanceType)?.environment;
        const environment = {
            ...(this.spec.environment ?? {}),
            ...configEnvironment,
            ...this.environment,
        };
        if (environment.SAGEMAKER_SUBMIT_DIRECTORY) {
            delete environment.SAGEMAKER_SUBMIT_DIRECTORY;
        }
        return environment;
    }
    getModelFromArtifact(scope, id, instanceType, instanceBaseType, environment, vpcConfig) {
        const key = this.spec.prepackedArtifactKey ?? this.spec.artifactKey;
        const bucket = this.spec.gatedBucket ? jumpstart_constants_1.JumpStartConstants.JUMPSTART_LAUNCHED_REGIONS[this.region]?.gatedContentBucket :
            jumpstart_constants_1.JumpStartConstants.JUMPSTART_LAUNCHED_REGIONS[this.region]?.contentBucket;
        if (!bucket) {
            throw new Error(`JumpStart is not available in the region ${this.region}.`);
        }
        const modelArtifactUrl = `s3://${bucket}/${key}`;
        const isArtifactCompressed = modelArtifactUrl.endsWith('.tar.gz');
        const imageUriKey = this.spec.instanceVariants
            ?.find((v) => v.instanceType === instanceBaseType)
            ?.imageUri?.replace('$', '');
        if (!imageUriKey) {
            throw new Error(`The image uri is not available for instance type ${instanceType}.`);
        }
        const image = this.spec.instanceAliases?.find((v) => v.region === this.region)?.aliases[imageUriKey];
        if (!image) {
            throw new Error(`The image uri is not available for instance type ${instanceType} in region ${this.region}.`);
        }
        const model = new sagemaker.CfnModel(scope, `${this.spec.modelId}-model-${id}`, {
            executionRoleArn: this.role.roleArn,
            enableNetworkIsolation: true,
            primaryContainer: isArtifactCompressed ? {
                // True: Artifact is a tarball
                image,
                modelDataUrl: modelArtifactUrl,
                environment,
            } : {
                // False: Model is uncompressed
                image,
                modelDataSource: {
                    s3DataSource: {
                        compressionType: 'None',
                        s3DataType: 'S3Prefix',
                        s3Uri: modelArtifactUrl,
                        modelAccessConfig: {
                            acceptEula: this.acceptEula,
                        },
                    },
                },
                environment,
            },
            tags: [
                {
                    key: 'modelId',
                    value: this.spec.modelId,
                },
                {
                    key: 'modelVersion',
                    value: this.spec.version,
                },
                {
                    key: 'sagemaker-studio:jumpstart-model-id',
                    value: this.spec.modelId,
                },
                {
                    key: 'sagemaker-studio:jumpstart-model-version',
                    value: this.spec.version,
                },
                {
                    key: 'sagemaker-studio:jumpstart-hub-name',
                    value: 'SageMakerPublicHub',
                },
            ],
            vpcConfig: vpcConfig,
        });
        return model;
    }
    getModelFromPackage(scope, id, vpcConfig) {
        const modelPackageArns = this.spec.modelPackageArns || {};
        const supportedRegions = Object.keys(modelPackageArns);
        if (!supportedRegions.includes(this.region)) {
            throw new Error(`The model package is not available in the region ${this.region}. Supported regions: ${supportedRegions.join(', ')}.`);
        }
        const modelPackageArn = modelPackageArns[this.region];
        const model = new sagemaker.CfnModel(scope, `${this.spec.modelId}-model-${id}`, {
            executionRoleArn: this.role.roleArn,
            enableNetworkIsolation: true,
            primaryContainer: {
                modelPackageName: modelPackageArn,
            },
            tags: [
                {
                    key: 'modelId',
                    value: this.spec.modelId,
                },
                {
                    key: 'modelVersion',
                    value: this.spec.version,
                },
            ],
            vpcConfig: vpcConfig,
        });
        return model;
    }
}
exports.JumpStartSageMakerEndpoint = JumpStartSageMakerEndpoint;
_a = JSII_RTTI_SYMBOL_1;
JumpStartSageMakerEndpoint[_a] = { fqn: "@cdklabs/generative-ai-cdk-constructs.JumpStartSageMakerEndpoint", version: "0.1.285" };
//# sourceMappingURL=data:application/json;base64,