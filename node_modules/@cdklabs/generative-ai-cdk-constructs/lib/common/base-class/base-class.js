"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.BaseClass = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
/**
 *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance
 *  with the License. A copy of the License is located at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  or in the 'license' file accompanying this file. This file is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES
 *  OR CONDITIONS OF ANY KIND, express or implied. See the License for the specific language governing permissions
 *  and limitations under the License.
 */
const aws_cdk_lib_1 = require("aws-cdk-lib");
const appsync = require("aws-cdk-lib/aws-appsync");
const lambda = require("aws-cdk-lib/aws-lambda");
const logs = require("aws-cdk-lib/aws-logs");
const constructs_1 = require("constructs");
const construct_name_enum_1 = require("./construct-name-enum");
const utils_1 = require("../helpers/utils");
class BaseClass extends constructs_1.Construct {
    constructor(scope, id) {
        super(scope, id);
        /**
         * construct usage metric , added in template description
         */
        this.constructUsageMetric = 'uksb-1tupboc45';
        /**
         * enable disable lambda tracing
         *
         * @default - Active
         */
        this.lambdaTracing = lambda.Tracing.ACTIVE;
        /**
         * enable disable xray tracing
         *
         * @default - True
         */
        this.enablexray = true;
        /**
         * Default  log config for all constructs
         */
        this.fieldLogLevel = appsync.FieldLogLevel.ALL;
        /**
         * Default  log retention config for all constructs
         */
        this.retention = logs.RetentionDays.TEN_YEARS;
    }
    //overwrite default env suffix
    updateEnvSuffix(props) {
        let stage = '-dev';
        if (props?.stage) {
            stage = props.stage;
        }
        this.stage = stage;
    }
    /*
    * update template description with construct usage metric and
    * add AWS_SDK_UA_APP_ID to user agent on aws sdk.
    */
    updateConstructUsageMetricCode(props, scope, lambdaFunctions) {
        const solutionId = `genai_cdk_${utils_1.version}/${props.constructName}/${props.constructId}`;
        if (lambdaFunctions
            && lambdaFunctions.length > 0) {
            for (let lambdaFunction of lambdaFunctions) {
                lambdaFunction.addEnvironment('AWS_SDK_UA_APP_ID', solutionId);
            }
        }
        if (props && BaseClass.usageMetricMap.hasOwnProperty(props.constructName)) {
            BaseClass.usageMetricMap[props.constructName] = BaseClass.usageMetricMap[props.constructName] + 1;
        }
        else {
            throw Error('construct name is not present in usageMetricMap ');
        }
        const usageMetricMapSerialized = JSON.stringify(BaseClass.usageMetricMap).replace(/[{}]/g, '').replace(/"/g, '');
        // Description format :(usage id :uksb-1tupboc45)(version:0.0.0) (constructs :::{\"C1\":1,\"C2\":5,\"C3\":3,\"C4\":0,\"C5\":0,\"C6\":0,\"C7\":0,\"C8\":0}) ",
        // where C1,C2, etc are mapped with construct-name-enum and the values shows the number of time stack created/deleted.
        aws_cdk_lib_1.Stack.of(scope).templateOptions.description =
            `Description: (${this.constructUsageMetric}) (version:${utils_1.version}) (tag:${usageMetricMapSerialized}) `;
    }
    // observability
    addObservabilityToConstruct(props) {
        if (props.observability == false) {
            this.enablexray = false;
            this.lambdaTracing = lambda.Tracing.DISABLED;
            this.fieldLogLevel = appsync.FieldLogLevel.NONE;
            this.retention = logs.RetentionDays.TEN_YEARS;
        }
        ;
    }
}
exports.BaseClass = BaseClass;
_a = JSII_RTTI_SYMBOL_1;
BaseClass[_a] = { fqn: "@cdklabs/generative-ai-cdk-constructs.BaseClass", version: "0.1.285" };
/**
 * Record<string, number> , maps construct name with number of deployments
 */
BaseClass.usageMetricMap = {
    [construct_name_enum_1.ConstructName.AWSRAGAPPSYNCSTEPFNOPENSEARCH]: 0,
    [construct_name_enum_1.ConstructName.AWSQAAPPSYNCOPENSEARCH]: 0,
    [construct_name_enum_1.ConstructName.AWSSUMMARIZATIONAPPSYNCSTEPFN]: 0,
    [construct_name_enum_1.ConstructName.AWSMODELDEPLOYMENTSAGEMAKER]: 0,
    [construct_name_enum_1.ConstructName.CUSTOMSAGEMAKERENDPOINT]: 0,
    [construct_name_enum_1.ConstructName.HUGGINGFACESAGEMAKERENDPOINT]: 0,
    [construct_name_enum_1.ConstructName.JUMPSTARTSAGEMAKERENDPOINT]: 0,
    [construct_name_enum_1.ConstructName.AWSCONTENTGENAPPSYNCLAMBDA]: 0,
    [construct_name_enum_1.ConstructName.AWSLLAMAINDEXDATALOADER]: 0,
};
//# sourceMappingURL=data:application/json;base64,