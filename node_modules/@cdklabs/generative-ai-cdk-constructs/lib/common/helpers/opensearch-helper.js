"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getOpenSearchEndpoint = exports.getOpenSearchApiName = exports.CheckOpenSearchProps = void 0;
function CheckOpenSearchProps(propsObject) {
    let errorMessages = '';
    let errorFound = false;
    if (propsObject.existingOpenSearchDomain && propsObject.existingOpenSearchServerlessCollection) {
        errorMessages += 'Error - Either provide existingOpenSearchDomain or existingOpenSearchServerlessCollection, but not both.\n';
        errorFound = true;
    }
    if (propsObject.existingOpenSearchDomain === null && propsObject.existingOpenSearchServerlessCollection === null) {
        errorMessages += 'Error - existingOpenSearchDomain and existingOpenSearchServerlessCollection cannot both be null. Please provide one.\n';
        errorFound = true;
    }
    if (propsObject.existingOpenSearchDomain && !propsObject.existingVpc) {
        errorMessages += 'Error - When using an existing OpenSearch domain, you must also provide an existing VPC.\n';
        errorFound = true;
    }
    if (errorFound) {
        throw new Error(errorMessages);
    }
}
exports.CheckOpenSearchProps = CheckOpenSearchProps;
function getOpenSearchApiName(propsObject) {
    if (propsObject.existingOpensearchDomain) {
        return 'es';
    }
    else if (propsObject.existingOpensearchServerlessCollection) {
        return 'aoss';
    }
    throw new Error('OpenSearch resouce not defined.');
}
exports.getOpenSearchApiName = getOpenSearchApiName;
function getOpenSearchEndpoint(propsObject) {
    if (propsObject.existingOpensearchDomain) {
        return propsObject.existingOpensearchDomain.domainEndpoint;
    }
    else if (propsObject.existingOpensearchServerlessCollection) {
        return propsObject.existingOpensearchServerlessCollection.attrCollectionEndpoint;
    }
    throw new Error('OpenSearch resouce not defined.');
}
exports.getOpenSearchEndpoint = getOpenSearchEndpoint;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3BlbnNlYXJjaC1oZWxwZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvY29tbW9uL2hlbHBlcnMvb3BlbnNlYXJjaC1oZWxwZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBOEJBLFNBQWdCLG9CQUFvQixDQUFDLFdBQWtDO0lBQ3JFLElBQUksYUFBYSxHQUFHLEVBQUUsQ0FBQztJQUN2QixJQUFJLFVBQVUsR0FBRyxLQUFLLENBQUM7SUFFdkIsSUFBSSxXQUFXLENBQUMsd0JBQXdCLElBQUksV0FBVyxDQUFDLHNDQUFzQyxFQUFFLENBQUM7UUFDL0YsYUFBYSxJQUFJLDRHQUE0RyxDQUFDO1FBQzlILFVBQVUsR0FBRyxJQUFJLENBQUM7SUFDcEIsQ0FBQztJQUVELElBQUksV0FBVyxDQUFDLHdCQUF3QixLQUFLLElBQUksSUFBSSxXQUFXLENBQUMsc0NBQXNDLEtBQUssSUFBSSxFQUFFLENBQUM7UUFDakgsYUFBYSxJQUFJLHdIQUF3SCxDQUFDO1FBQzFJLFVBQVUsR0FBRyxJQUFJLENBQUM7SUFDcEIsQ0FBQztJQUVELElBQUksV0FBVyxDQUFDLHdCQUF3QixJQUFJLENBQUMsV0FBVyxDQUFDLFdBQVcsRUFBRSxDQUFDO1FBQ3JFLGFBQWEsSUFBSSw0RkFBNEYsQ0FBQztRQUM5RyxVQUFVLEdBQUcsSUFBSSxDQUFDO0lBQ3BCLENBQUM7SUFFRCxJQUFJLFVBQVUsRUFBRSxDQUFDO1FBQ2YsTUFBTSxJQUFJLEtBQUssQ0FBQyxhQUFhLENBQUMsQ0FBQztJQUNqQyxDQUFDO0FBQ0gsQ0FBQztBQXRCRCxvREFzQkM7QUFFRCxTQUFnQixvQkFBb0IsQ0FBQyxXQUE0QjtJQUMvRCxJQUFJLFdBQVcsQ0FBQyx3QkFBd0IsRUFBRSxDQUFDO1FBQ3pDLE9BQU8sSUFBSSxDQUFDO0lBRWQsQ0FBQztTQUFNLElBQUksV0FBVyxDQUFDLHNDQUFzQyxFQUFFLENBQUM7UUFDOUQsT0FBTyxNQUFNLENBQUM7SUFDaEIsQ0FBQztJQUVELE1BQU0sSUFBSSxLQUFLLENBQUMsaUNBQWlDLENBQUMsQ0FBQztBQUNyRCxDQUFDO0FBVEQsb0RBU0M7QUFFRCxTQUFnQixxQkFBcUIsQ0FBQyxXQUE0QjtJQUNoRSxJQUFJLFdBQVcsQ0FBQyx3QkFBd0IsRUFBRSxDQUFDO1FBQ3pDLE9BQU8sV0FBVyxDQUFDLHdCQUF3QixDQUFDLGNBQWMsQ0FBQztJQUU3RCxDQUFDO1NBQU0sSUFBSSxXQUFXLENBQUMsc0NBQXNDLEVBQUUsQ0FBQztRQUM5RCxPQUFPLFdBQVcsQ0FBQyxzQ0FBc0MsQ0FBQyxzQkFBc0IsQ0FBQztJQUNuRixDQUFDO0lBRUQsTUFBTSxJQUFJLEtBQUssQ0FBQyxpQ0FBaUMsQ0FBQyxDQUFDO0FBQ3JELENBQUM7QUFURCxzREFTQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogIENvcHlyaWdodCBBbWF6b24uY29tLCBJbmMuIG9yIGl0cyBhZmZpbGlhdGVzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqICBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpLiBZb3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlXG4gKiAgd2l0aCB0aGUgTGljZW5zZS4gQSBjb3B5IG9mIHRoZSBMaWNlbnNlIGlzIGxvY2F0ZWQgYXRcbiAqXG4gKiAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqICBvciBpbiB0aGUgJ2xpY2Vuc2UnIGZpbGUgYWNjb21wYW55aW5nIHRoaXMgZmlsZS4gVGhpcyBmaWxlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuICdBUyBJUycgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFU1xuICogIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGV4cHJlc3Mgb3IgaW1wbGllZC4gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zXG4gKiAgYW5kIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5pbXBvcnQgKiBhcyBvcGVuU2VhcmNoU2VydmVybGVzcyBmcm9tICdhd3MtY2RrLWxpYi9hd3Mtb3BlbnNlYXJjaHNlcnZlcmxlc3MnO1xuaW1wb3J0ICogYXMgb3BlbnNlYXJjaHNlcnZpY2UgZnJvbSAnYXdzLWNkay1saWIvYXdzLW9wZW5zZWFyY2hzZXJ2aWNlJztcblxuZXhwb3J0IGludGVyZmFjZSBPcGVuU2VhcmNoUHJvcHMge1xuICAvKipcbiAgICogT3B0aW9uYWwgZXhpc3RpbmcgQW1hem9uIE9wZW5TZWFyY2ggU2VydmljZSBkb21haW4uXG4gICAqXG4gICAqIEBkZWZhdWx0IC0gTm9uZVxuICAgKi9cbiAgcmVhZG9ubHkgZXhpc3RpbmdPcGVuc2VhcmNoRG9tYWluPzogb3BlbnNlYXJjaHNlcnZpY2UuSURvbWFpbjtcbiAgLyoqXG4gICAqIE9wdGlvbmFsIGV4aXN0aW5nIEFtYXpvbiBBbWF6b24gT3BlblNlYXJjaCBTZXJ2ZXJsZXNzIGNvbGxlY3Rpb24uXG4gICAqXG4gICAqIEBkZWZhdWx0IC0gTm9uZS5cbiAgICovXG4gIHJlYWRvbmx5IGV4aXN0aW5nT3BlbnNlYXJjaFNlcnZlcmxlc3NDb2xsZWN0aW9uPzogb3BlblNlYXJjaFNlcnZlcmxlc3MuQ2ZuQ29sbGVjdGlvbjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIENoZWNrT3BlblNlYXJjaFByb3BzKHByb3BzT2JqZWN0OiBPcGVuU2VhcmNoUHJvcHMgfCBhbnkpIHtcbiAgbGV0IGVycm9yTWVzc2FnZXMgPSAnJztcbiAgbGV0IGVycm9yRm91bmQgPSBmYWxzZTtcblxuICBpZiAocHJvcHNPYmplY3QuZXhpc3RpbmdPcGVuU2VhcmNoRG9tYWluICYmIHByb3BzT2JqZWN0LmV4aXN0aW5nT3BlblNlYXJjaFNlcnZlcmxlc3NDb2xsZWN0aW9uKSB7XG4gICAgZXJyb3JNZXNzYWdlcyArPSAnRXJyb3IgLSBFaXRoZXIgcHJvdmlkZSBleGlzdGluZ09wZW5TZWFyY2hEb21haW4gb3IgZXhpc3RpbmdPcGVuU2VhcmNoU2VydmVybGVzc0NvbGxlY3Rpb24sIGJ1dCBub3QgYm90aC5cXG4nO1xuICAgIGVycm9yRm91bmQgPSB0cnVlO1xuICB9XG5cbiAgaWYgKHByb3BzT2JqZWN0LmV4aXN0aW5nT3BlblNlYXJjaERvbWFpbiA9PT0gbnVsbCAmJiBwcm9wc09iamVjdC5leGlzdGluZ09wZW5TZWFyY2hTZXJ2ZXJsZXNzQ29sbGVjdGlvbiA9PT0gbnVsbCkge1xuICAgIGVycm9yTWVzc2FnZXMgKz0gJ0Vycm9yIC0gZXhpc3RpbmdPcGVuU2VhcmNoRG9tYWluIGFuZCBleGlzdGluZ09wZW5TZWFyY2hTZXJ2ZXJsZXNzQ29sbGVjdGlvbiBjYW5ub3QgYm90aCBiZSBudWxsLiBQbGVhc2UgcHJvdmlkZSBvbmUuXFxuJztcbiAgICBlcnJvckZvdW5kID0gdHJ1ZTtcbiAgfVxuXG4gIGlmIChwcm9wc09iamVjdC5leGlzdGluZ09wZW5TZWFyY2hEb21haW4gJiYgIXByb3BzT2JqZWN0LmV4aXN0aW5nVnBjKSB7XG4gICAgZXJyb3JNZXNzYWdlcyArPSAnRXJyb3IgLSBXaGVuIHVzaW5nIGFuIGV4aXN0aW5nIE9wZW5TZWFyY2ggZG9tYWluLCB5b3UgbXVzdCBhbHNvIHByb3ZpZGUgYW4gZXhpc3RpbmcgVlBDLlxcbic7XG4gICAgZXJyb3JGb3VuZCA9IHRydWU7XG4gIH1cblxuICBpZiAoZXJyb3JGb3VuZCkge1xuICAgIHRocm93IG5ldyBFcnJvcihlcnJvck1lc3NhZ2VzKTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0T3BlblNlYXJjaEFwaU5hbWUocHJvcHNPYmplY3Q6IE9wZW5TZWFyY2hQcm9wcykge1xuICBpZiAocHJvcHNPYmplY3QuZXhpc3RpbmdPcGVuc2VhcmNoRG9tYWluKSB7XG4gICAgcmV0dXJuICdlcyc7XG5cbiAgfSBlbHNlIGlmIChwcm9wc09iamVjdC5leGlzdGluZ09wZW5zZWFyY2hTZXJ2ZXJsZXNzQ29sbGVjdGlvbikge1xuICAgIHJldHVybiAnYW9zcyc7XG4gIH1cblxuICB0aHJvdyBuZXcgRXJyb3IoJ09wZW5TZWFyY2ggcmVzb3VjZSBub3QgZGVmaW5lZC4nKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldE9wZW5TZWFyY2hFbmRwb2ludChwcm9wc09iamVjdDogT3BlblNlYXJjaFByb3BzKSB7XG4gIGlmIChwcm9wc09iamVjdC5leGlzdGluZ09wZW5zZWFyY2hEb21haW4pIHtcbiAgICByZXR1cm4gcHJvcHNPYmplY3QuZXhpc3RpbmdPcGVuc2VhcmNoRG9tYWluLmRvbWFpbkVuZHBvaW50O1xuXG4gIH0gZWxzZSBpZiAocHJvcHNPYmplY3QuZXhpc3RpbmdPcGVuc2VhcmNoU2VydmVybGVzc0NvbGxlY3Rpb24pIHtcbiAgICByZXR1cm4gcHJvcHNPYmplY3QuZXhpc3RpbmdPcGVuc2VhcmNoU2VydmVybGVzc0NvbGxlY3Rpb24uYXR0ckNvbGxlY3Rpb25FbmRwb2ludDtcbiAgfVxuXG4gIHRocm93IG5ldyBFcnJvcignT3BlblNlYXJjaCByZXNvdWNlIG5vdCBkZWZpbmVkLicpO1xufSJdfQ==